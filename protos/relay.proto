syntax = "proto3";

package protos;

import "args/kafka.proto";
import "common/auth.proto";
import "common/status.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go";

message Relay {
    // Required
    string batch_collection_token = 1;

    // Optional; how many messages to send in a single batch (default: 1000)
    int32 batch_size = 2;

    // Optional; how many times plumber will try re-sending a batch (default: 3)
    int32 batch_max_retry = 3;

    string connection_id = 4;

    // Optional; where to send events to (default: grpc-collector.batch.sh:9000)
    string batchsh_grpc_address = 5;

    // Optional; whether to use TLS for gRPC (default: true)
    bool batchsh_grpc_disable_tls = 6;

    // Optional: how long to wait before giving up talking to the gRPC collector (default: 10s)
    bool batchsh_grpc_timeout = 7;

    // Set appropriate args based on what connection is specified
    // ie. If connection_id is for kafka - specify Kafka args
    oneof Args {
        args.Kafka kafka = 100;
    }
}

message GetAllRelaysRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllRelaysResponse {
    common.Status status = 1000;

    // Will be set as empty []Relay if no relays are configured
    repeated Relay relays = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GetRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message GetRelayResponse {
    common.Status status = 1000;

    // Set only if status is OK
    Relay relay = 1;
}

///////////////////////////////////////////////////////////////////////////////

message CreateRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    // Required
    string batch_collection_token = 1;

    // Optional; how many messages to send in a single batch (default: 1000)
    int32 batch_size = 2;

    // Optional; how many times plumber will try re-sending a batch (default: 3)
    int32 batch_max_retry = 3;

    string connection_id = 4;

    // Optional; where to send events to (default: grpc-collector.batch.sh:9000)
    string batchsh_grpc_address = 5;

    // Optional; whether to use TLS for gRPC (default: true)
    bool batchsh_grpc_disable_tls = 6;

    // Optional: how long to wait before giving up talking to the gRPC collector (default: 10s)
    bool batchsh_grpc_timeout = 7;


    oneof Args {
        args.Kafka kafka = 100;
    }
}

message CreateRelayResponse {
    common.Status status = 1000;

    // ID of the created relay entry
    string relay_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

// WARNING: Any in-progress relay will be interrupted/restarted
message UpdateRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;

    Relay relay = 2;
}

message UpdateRelayResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

// Temporarily stop/pause a relay
message StopRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message StopRelayResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message DeleteRelayResponse {
    common.Status status = 1000;
}
