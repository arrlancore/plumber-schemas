syntax = "proto3";

package protos;

import "backends/kafka.proto";
import "backends/activemq.proto";
import "backends/aws-sns.proto";
import "backends/aws-sqs.proto";
import "backends/mongo.proto";
import "backends/nats.proto";
import "backends/nats-streaming.proto";
import "backends/nsq.proto";
import "backends/postgres.proto";
import "backends/pulsar.proto";
import "backends/rabbit.proto";
import "backends/rabbit-streams.proto";
import "backends/redis-pubsub.proto";
import "backends/redis-streams.proto";
import "backends/azure-service-bus.proto";
import "backends/azure-event-hub.proto";
import "common/auth.proto";
import "common/status.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message CLIRelayConfig {
    string http_listen_address = 1;
}

message RelayConfig {
    // Required
    string collection_token = 1;

    // Optional; how many messages to send in a single batch (default: 1000)
    int32 batch_size = 2;

    // Optional; how many times plumber will try re-sending a batch (default: 3)
    int32 batch_max_retry = 3;

    // Required for server mode; ignored in CLI mode.
    string connection_id = 4;

    // How many workers to launch per relay (default: 10)
    int32 num_workers = 5;

    // Optional; where to send events to (default: grpc-collector.batch.sh:9000)
    string _batchsh_grpc_address = 6;

    // Optional; whether to use TLS for gRPC (default: true)
    bool _batchsh_grpc_disable_tls = 7;

    // Optional: how long to wait before giving up talking to the gRPC collector (default: 10)
    int32 _batchsh_grpc_timeout_seconds = 8;

    // ID of the created relay entry; populated by plumber.
    string _relay_id = 9;

    CLIRelayConfig _cli_config = 10;

    // Set appropriate backend based on what connection is specified
    // ie. If connection_id is for kafka - specify Kafka backend
    oneof Backends {
        backends.Kafka kafka = 100;
        backends.ActiveMQ active_mq = 101;
        backends.AWSSQS awssqs = 102;
        backends.AWSSNS awssns = 103;
        backends.Mongo mongo = 104;
        backends.Nats nats = 105;
        backends.NatsStreaming nats_streaming = 106;
        backends.NSQ nsq = 107;
        backends.Postgres postgres = 108;
        backends.Pulsar pulsar = 109;
        backends.Rabbit rabbit = 110;
        backends.RabbitStreams rabbit_streams = 111;
        backends.RedisPubsub redis_pubsub = 112;
        backends.RedisStreams redis_streams = 113;
        backends.AzureEventHub azure_event_hub = 114;
        backends.AzureServiceBus azure_service_bus = 115;
    }
}

message GetAllRelaysRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllRelaysResponse {
    common.Status status = 1000;

    // Will be set as empty []Relay if no relays are configured
    repeated RelayConfig configs = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GetRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message GetRelayResponse {
    common.Status status = 1000;

    // Set only if status is OK
    RelayConfig config = 1;
}

///////////////////////////////////////////////////////////////////////////////

message CreateRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    RelayConfig config = 1;

    oneof Backends {
        backends.Kafka kafka = 100;
        backends.ActiveMQ active_mq = 101;
        backends.AWSSQS awssqs = 102;
        backends.AWSSNS awssns = 103;
        backends.Mongo mongo = 104;
        backends.Nats nats = 105;
        backends.NatsStreaming nats_streaming = 106;
        backends.NSQ nsq = 107;
        backends.Postgres postgres = 108;
        backends.Pulsar pulsar = 109;
        backends.Rabbit rabbit = 110;
        backends.RabbitStreams rabbit_streams = 111;
        backends.RedisPubsub redis_pubsub = 112;
        backends.RedisStreams redis_streams = 113;
    }
}

message CreateRelayResponse {
    common.Status status = 1000;

    // ID of the created relay entry
    string relay_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

// WARNING: Any in-progress relay will be interrupted/restarted
message UpdateRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;

    RelayConfig config = 2;
}

message UpdateRelayResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

// Resume a paused relay
message ResumeRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message ResumeRelayResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

// Temporarily stop/pause a relay
message StopRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message StopRelayResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteRelayRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string relay_id = 1;
}

message DeleteRelayResponse {
    common.Status status = 1000;
}
