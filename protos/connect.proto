syntax = "proto3";

package protos;

import "backends/kafka.proto";
import "backends/activemq.proto";
import "backends/aws-sns.proto";
import "backends/aws-sqs.proto";
import "backends/mongo.proto";
import "backends/nats.proto";
import "backends/nats-streaming.proto";
import "backends/nsq.proto";
import "backends/mqtt.proto";
import "backends/gcp-pubsub.proto";
import "backends/kubemq-queue.proto";
import "backends/postgres.proto";
import "backends/pulsar.proto";
import "backends/rabbit.proto";
import "backends/rabbit-streams.proto";
import "backends/redis-pubsub.proto";
import "backends/redis-streams.proto";
import "backends/azure-service-bus.proto";
import "backends/azure-event-hub.proto";
import "common/auth.proto";
import "common/status.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message ConnectionConfig {
    // Friendly name to identify this connection by (used in plumber-server logs)
    string name = 1;

    // Any notes associated with this connection (stored plumber-server side)
    string notes = 2;

    string id = 3;

    oneof conn {
        backends.KafkaConn kafka = 100;
        backends.ActiveMQConn active_mq = 101;
        backends.AWSSQSConn awssqs = 102;
        backends.AWSSNSConn awssns = 103;
        backends.MongoConn mongo = 104;
        backends.NatsConn nats = 105;
        backends.NatsStreamingConn nats_streaming = 106;
        backends.NSQConn nsq = 107;
        backends.PostgresConn postgres = 108;
        backends.PulsarConn pulsar = 109;
        backends.RabbitConn rabbit = 110;
        backends.RabbitStreamsConn rabbit_streams = 111;
        backends.RedisPubSubConn redis_pubsub = 112;
        backends.RedisStreamsConn redis_streams = 113;
        backends.AzureEventHubConn azure_event_hub = 114;
        backends.AzureServiceBusConn azure_service_bus = 115;
        backends.MQTTConn mqtt = 116;
        backends.KubeMQQueueConn kubemq_queue = 117;
        backends.GCPPubSubConn gcp_pubsub = 118;
    }
}

message GetAllConnectionsRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllConnectionsResponse {
    repeated ConnectionConfig configs = 1;
}

///////////////////////////////////////////////////////////////////////////////

message GetConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string connection_id = 1;
}

message GetConnectionResponse {
    ConnectionConfig connection = 1;
}

///////////////////////////////////////////////////////////////////////////////

message CreateConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    ConnectionConfig config = 1;
}

message CreateConnectionResponse {
    // Set with uuid that represents connection if create is successful
    string connection_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

message TestConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    ConnectionConfig config = 1;
}

message TestConnectionResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message UpdateConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string connection_id = 1;

    ConnectionConfig config = 2;
}

message UpdateConnectionResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteConnectionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string connection_id = 1;
}

message DeleteConnectionResponse {
    common.Status status = 1000;
}
