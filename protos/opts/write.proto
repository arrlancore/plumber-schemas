syntax = "proto3";

package protos.opts;

import "records/base.proto";
import "args/activemq.proto";
import "args/azure-service-bus.proto";
import "args/azure-event-hub.proto";
import "args/aws-sns.proto";
import "args/aws-sqs.proto";
import "args/gcp-pubsub.proto";
import "args/kafka.proto";
import "args/kubemq-queue.proto";
import "args/mqtt.proto";
import "args/nats.proto";
import "args/nats-streaming.proto";
import "args/nsq.proto";
import "args/pulsar.proto";
import "args/rabbit.proto";
import "args/rabbit-streams.proto";
import "args/redis-pubsub.proto";
import "args/redis-streams.proto";
import "encoding/options.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos/opts";

message WriteCLIOptions {
    // @gotags: kong:"help='Write data from input file',existingfile,xor=input"
    string input_file = 1;

    // @gotags: kong="help='Treat input as JSON array - each array element will be written as a separate message'"
    bool input_as_json_array = 2;
}

// Write is the structure that backends accept for facilitating a write.
// NOTE: _conn is only used by the CLI - desktop does not need to set it.
message WriteOptions {
    // Required for desktop; ignored in CLI.
    // @gotags: kong:"-"
    string connection_id = 1;

    // @gotags: kong:"embed"
    records.WriteRecord record = 2;

    // @gotags: kong:"embed"
    encoding.EncodeOptions encode_options = 3;

    // --------------------------------------------------------------------- //
    //                          PRIVATE FIELDS (1000+)                       //
    // --------------------------------------------------------------------- //

    // Optional; CLI-specific and non-backend-specific options
    // @gotags: kong:"embed"
    WriteCLIOptions _cli_options = 1000;

    // --------------------------------------------------------------------- //
    //                       SUPPORTED BACKENDS (100-999)                    //
    // --------------------------------------------------------------------- //

    // @gotags: kong:"cmd,help='Apache Kafka'"
    WriteGroupKafkaOptions kafka = 100;

    // @gotags: kong:"cmd,help='Apache ActiveMQ'"
    WriteGroupActiveMQOptions activemq = 101;

    // @gotags: kong:"cmd,help='AWS Simple Queue System'"
    WriteGroupAWSSQSOptions awssqs = 102;

    // @gotags: kong:"cmd,help='AWS Simple Notification System'"
    WriteGroupAWSSNSOptions awssns = 103;

    // @gotags: kong:"cmd,help='NATS'"
    WriteGroupNatsOptions nats = 104;

    // @gotags: kong:"cmd,help='NATS Streaming'"
    WriteGroupNatsStreamingOptions nats_streaming = 105;

    // @gotags: kong:"cmd,help='NSQ'"
    WriteGroupNSQOptions nsq = 106;

    // @gotags: kong:"cmd,help='Apache Pulsar'"
    WriteGroupPulsarOptions pulsar = 107;

    // @gotags: kong:"cmd,help='RabbitMQ'"
    WriteGroupRabbitOptions rabbit = 108;

    // @gotags: kong:"cmd,help='RabbitMQ Streams'"
    WriteGroupRabbitStreamsOptions rabbit_streams = 109;

    // @gotags: kong:"cmd,help='MQTT'"
    WriteGroupMQTTOptions mqtt = 110;

    // @gotags: kong:"cmd,help='Azure Service Bus'"
    WriteGroupAzureServiceBusOptions azure_service_bus = 111;

    // @gotags: kong:"cmd,help='Azure Event Hub'"
    WriteGroupAzureEventHubOptions azure_event_hub = 112;

    // @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
    WriteGroupGCPPubSubOptions gcp_pubsub = 113;

    // @gotags: kong:"cmd,help='KubeMQ Queue'"
    WriteGroupKubeMQQueueOptions kubemq_queue = 114;

    // @gotags: kong:"cmd,help='Redis PubSub'"
    WriteGroupRedisPubSubOptions redis_pubsub = 115;

    // @gotags: kong:"cmd,help='Redis Streams'"
    WriteGroupRedisStreamsOptions redis_streams = 116;
}

message WriteGroupKafkaOptions {
    // @gotags: kong:"embed"
    args.KafkaConn _conn = 1;

    // @gotags: kong:"embed"
    args.KafkaWriteArgs args = 2;
}

message WriteGroupActiveMQOptions {
    // @gotags: kong:"embed"
    args.ActiveMQConn _conn = 1;

    // @gotags: kong:"embed"
    args.ActiveMQWriteArgs args = 2;
}

message WriteGroupAWSSQSOptions {
    // @gotags: kong:"embed"
    args.AWSSQSConn _conn = 1;

    // @gotags: kong:"embed"
    args.AWSSQSWriteArgs args = 2;
}

message WriteGroupAWSSNSOptions {
    // @gotags: kong:"embed"
    args.AWSSNSConn _conn = 1;

    // @gotags: kong:"embed"
    args.AWSSNSWriteArgs args = 2;
}

message WriteGroupNatsOptions {
    // @gotags: kong:"embed"
    args.NatsConn _conn = 1;

    // @gotags: kong:"embed"
    args.NatsWriteArgs args = 2;
}

message WriteGroupNatsStreamingOptions {
    // @gotags: kong:"embed"
    args.NatsStreamingConn _conn = 1;

    // @gotags: kong:"embed"
    args.NatsStreamingWriteArgs args = 2;
}

message WriteGroupNSQOptions {
    // @gotags: kong:"embed"
    args.NSQConn _conn = 1;

    // @gotags: kong:"embed"
    args.NSQWriteArgs args = 2;
}

message WriteGroupPulsarOptions {
    // @gotags: kong:"embed"
    args.PulsarConn _conn = 1;

    // @gotags: kong:"embed"
    args.PulsarWriteArgs args = 2;
}

message WriteGroupRabbitOptions {
    // @gotags: kong:"embed"
    args.RabbitConn _conn = 1;

    // @gotags: kong:"embed"
    args.RabbitWriteArgs args = 2;
}

message WriteGroupRabbitStreamsOptions {
    // @gotags: kong:"embed"
    args.RabbitStreamsConn _conn = 1;

    // @gotags: kong:"embed"
    args.RabbitStreamsWriteArgs args = 2;
}

message WriteGroupRedisPubSubOptions {
    // @gotags: kong:"embed"
    args.RedisPubSubConn _conn = 1;

    // @gotags: kong:"embed"
    args.RedisPubSubWriteArgs args = 2;
}

message WriteGroupRedisStreamsOptions {
    // @gotags: kong:"embed"
    args.RedisStreamsConn _conn = 1;

    // @gotags: kong:"embed"
    args.RedisStreamsWriteArgs args = 2;
}

message WriteGroupAzureEventHubOptions {
    // @gotags: kong:"embed"
    args.AzureEventHubConn _conn = 1;

    // @gotags: kong:"embed"
    args.AzureEventHubWriteArgs args = 2;
}

message WriteGroupAzureServiceBusOptions {
    // @gotags: kong:"embed"{
    args.AzureServiceBusConn _conn = 1;

    // @gotags: kong:"embed"
    args.AzureServiceBusWriteArgs args = 2;
}

message WriteGroupMQTTOptions {
    // @gotags: kong:"embed"
    args.MQTTConn _conn = 1;

    // @gotags: kong:"embed"
    args.MQTTWriteArgs args = 2;
}

message WriteGroupGCPPubSubOptions {
    // @gotags: kong:"embed"
    args.GCPPubSubConn _conn = 1;

    // @gotags: kong:"embed"
    args.GCPPubSubWriteArgs args = 2;
}

message WriteGroupKubeMQQueueOptions {
    // @gotags: kong:"embed"
    args.KubeMQQueueConn _conn = 1;

    // @gotags: kong:"embed"
    args.KubeMQQueueWriteArgs args = 2;
}
