// The encoding proto schema is intended to be used for either encoding or
// decoding. The intent of whether to encode or decode should be specified
// somewhere outside of this proto.

syntax = "proto3";

package protos.encoding;

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos/encoding";

enum Type {
    NONE = 0;
    JSON = 1;
    JSON_SCHEMA = 2;
    PROTOBUF = 3;
    AVRO = 4;
    THRIFT = 5;
}

message Dirs {
    repeated string dirs = 1;
}

message Protobuf {
    string root_type = 1;

    oneof Data {
        bytes zip_archive = 2;
        Dirs dirs = 3;
    }
}

message JSONSchema {
    // TODO
}

message Avro {
    oneof Data {
        bytes schema_data = 1;
        string schema_file = 2;
    }
}

// Encoding options will cause plumber to encode (or decode) the _value_ of a
// message. Either the schema_id must be specified OR a oneof Encoding.
// If schema_id is specified, oneof Encoding will be ignored. schema_id takes
// precedence over oneof Encoding. oneof Encoding is to be used for one-off
// operations.
message Options {
    Type type = 1;

    // Specify an existing stored schema to use instead of specifying a Encoding payload
    string schema_id = 2;

    // Only filled out if "type" is not NONE or JSON
    message Encoding {
        Protobuf protobuf = 100;
        Avro avro = 102;
        JSONSchema json_schema = 101;
    }
}
