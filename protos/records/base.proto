// Records contain types for read, write and relay operations.
syntax = "proto3";

package protos.records;

import "records/kafka.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos/records";

// Returned for read requests (server & cli)
message ReadRecord {
    // Unique id automatically created by plumber
    string message_id = 1;

    // Plumber counts the number of messages it reads; this number represents
    // the message number (useful for CLI).
    int64 num = 3;

    // Metadata may contain properties that cannot be found in the Raw message.
    // For example: read lag in Kafka.
    //
    // Metadata may also contain data such as "count" which is an incremental
    // number that plumber assigns to each message it receives. This is used
    // with read via CLI functionality to allow the user to quickly discern
    // whether this is message #1 or #500, etc.
    map<string, string> metadata = 4;

    // UTC unix timestamp of when plumber received the message; a backend record
    // entry might have its own timestamp as well. This should be seconds.
    int64 received_at_unix_ts_utc = 6;

    //
    // >>> Intentionally leaving this index space for future use <<<
    //

    // Set _outside_ the backend; will contain the final value, regardless of
    // whether decoding options were specified for a read.
    // _This_ is what both CLI and desktop should display for the payload.
    bytes payload = 99;

    oneof Record {
        records.Kafka kafka = 100;
    }

    // --------------------------------------------------------------------- //
    //                          PRIVATE FIELDS (1000+)                       //
    // --------------------------------------------------------------------- //

    // Original backend message (encoded with gob, ie. *skafka.Message, etc.).
    // In most cases, you should use the oneof record instead of the raw message.
    bytes _raw = 1000;

    // Identifies which plumber instance received the event (set outside the backend)
    string _plumber_id = 1001;
}

// Used as an arg for write requests (server & cli)
message WriteRecord {
    // If encoding options are provided, this value will be updated by plumber
    // to contain the encoded payload _before_ passing it to the backend.
    // @gotags: kong:"help='Input string',name=input,xor=input,default"
    string input = 1;

    // @gotags: kong:"help='Optional metadata a backend may use (key1:value,key2:value,etc)',name=input-metadata"
    map<string, string> input_metadata = 2;
}

// Used for communicating errors that occur during a read, write, relay, etc.
message ErrorRecord {
    int64 occurred_at_unix_ts_utc = 1;
    string error = 2;
    map<string, bytes> metadata = 3;
}
