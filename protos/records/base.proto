// Records contain types for read, write and relay operations.
syntax = "proto3";

package protos.records;

import "records/kafka.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos/records";

// Returned for read requests (server & cli)
message ReadRecord {
    // Unique id automatically created by plumber
    string message_id = 1;

    // Identifies which plumber instance received the event
    string plumber_id = 2;

    // Metadata may contain properties that cannot be found in the Raw message.
    // For example: read lag in Kafka.
    //
    // Metadata may also contain data such as "count" which is an incremental
    // number that plumber assigns to each message it receives. This is used
    // with read via CLI functionality to allow the user to quickly discern
    // whether this is message #1 or #500, etc.
    map<string, bytes> metadata = 3;

    // Original backend message (encoded with gob, ie. *skafka.Message, etc.)
    bytes raw = 4;

    // UTC unix timestamp of when plumber received the message (a backend record
    // entry might have its own timestamp as well).
    int64 received_at_unix_ts_utc = 5;

    // >>> Intentionally leaving this index space for future use <<<

    // Set _outside_ the backend; will contain the final value, regardless of
    // whether decoding options were specified for a read.
    bytes _decoded = 99;

    oneof Record {
        records.Kafka kafka = 100;
    }
}

// Used as an arg for write requests (server & cli)
message WriteRecord {
    // Set _outside_ the backend; will contain the final value that will be
    // written to the destination, regardless of whether encoding options were
    // specified for the write.
    bytes _encoded = 1;

    oneof Records {
        records.Kafka kafka = 100;
    }
}

// Used for communicating errors that occur during a read, write, relay, etc.
message ErrorRecord {
    int64 occurred_at_unix_ts_utc = 1;
    string error = 2;
    map<string, bytes> metadata = 3;
}
