syntax = "proto3";

package protos;

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

import "encoding/ps_encoding_options.proto";
import "common/ps_common_auth.proto";
import "common/ps_common_status.proto";

message Schema {
    // ID to identify this schema by
    string id = 1;

    // Friendly name for the schema
    string name = 2;

    SchemaType type = 3;

    string notes = 4;

    string owner_id = 5;

    repeated SchemaVersion versions = 6;
}

message SchemaVersion {

    int32 version = 1;

    SchemaStatus status = 2;

    // Contains a map of file names and file contents that contain schema definitions.
    // This is mainly used for protobuf definition viewing
    map<string,string> files = 3;

    // The 'type' will determine which one of these _should_ be filled out
    oneof settings {
        encoding.ProtobufSettings protobuf_settings = 100;
        encoding.AvroSettings avro_settings = 101;
        encoding.JSONSchemaSettings json_schema_settings = 102;
    }
}

// SchemaStatus defines whether an inferred schema has been accepted by the user. It should always be
// SCHEMA_STATUS_ACCEPTED for imported schemas. A schema should default to SCHEMA_STATUS_PROPOSED if it is inferred
// and then the user will need to accept it via the UI
enum SchemaStatus {
    SCHEMA_STATUS_UNSET = 0;
    SCHEMA_STATUS_ACCEPTED = 1;
    SCHEMA_STATUS_PROPOSED = 2;
}

enum SchemaType {
    SCHEMA_TYPE_UNSET = 0;
    SCHEMA_TYPE_PROTOBUF = 1;
    SCHEMA_TYPE_AVRO = 2;
    SCHEMA_TYPE_JSONSCHEMA = 3;
}

message GetSchemaRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string id = 1;
}

message GetSchemaResponse {
    Schema schema = 1;
}

message GetAllSchemasRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllSchemasResponse {
    repeated Schema schema = 1;
}

message ImportGithubRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string name = 1;

    SchemaType type = 2;

    string github_url = 3;

    oneof settings {
        encoding.ProtobufSettings protobuf_settings = 100;
        encoding.AvroSettings avro_settings = 101;
        encoding.JSONSchemaSettings json_schema_settings = 102;
    }
}

message ImportGithubResponse {
    common.Status status = 1000;

    string id = 1;
}

message ImportLocalRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string name = 1;

    SchemaType type = 2;

    bytes file_contents = 3;

    string file_name = 4;

    oneof settings {
        encoding.ProtobufSettings protobuf_settings = 100;
        encoding.AvroSettings avro_settings = 101;
        encoding.JSONSchemaSettings json_schema_settings = 102;
    }
}

message ImportLocalResponse {
    common.Status status = 1000;

    string id = 1;
}

message UpdateSchemaRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string id = 1;

    string name = 2;

    string owner_id = 3;

    string notes = 4;
}

message UpdateSchemaResponse {
    common.Status status = 1000;

    Schema schema = 1;
}

message DeleteSchemaRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string id = 1;
}

message DeleteSchemaResponse {
    common.Status status = 1000;
}

message DeleteSchemaVersionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string id = 1;

    int32 version = 2;
}

message DeleteSchemaVersionResponse {
    common.Status status = 1000;

    // The updated version of the schema definition after deletion
    Schema schema = 1;
}

message ApproveSchemaVersionRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    // Schema ID
    string id = 1;

    int32 version = 2;
}

message ApproveSchemaVersionResponse {
    common.Status status = 1000;

    // The updated version of the schema definition after approval
    Schema schema = 1;
}

message GetRepoListRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetRepoListResponse {
    repeated string repository_urls = 1;
}