syntax = "proto3";

package protos;

import "common/ps_common_auth.proto";
import "common/ps_common_status.proto";
import "encoding/ps_encoding_options.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message Schema {
  // ID to identify this schema by
  string id = 1;

  // Friendly name for the schema
  string name = 2;

  SchemaType type = 3;

  string notes = 4;

  string owner_id = 5;

  repeated SchemaVersion versions = 6;

  // Inferred schema is generated by plumber from either a json payload, or protobuf definitions
  // It is used for validation of payload values. All schemas will need this set
  encoding.JSONSchemaSettings inferred_schema = 7;
}

message SchemaVersion {

  int32 version = 1;

  SchemaStatus status = 2;

  // Contains a map of file names and file contents that contain schema definitions.
  // This is mainly used for protobuf definition viewing
  map<string,string> files = 3;

  // The 'type' will determine which one of these _should_ be filled out
  oneof settings {
    encoding.ProtobufSettings protobuf_settings = 100;
    encoding.AvroSettings avro_settings = 101;
    encoding.JSONSchemaSettings json_schema_settings = 102;
  }
}

// SchemaStatus defines whether an inferred schema has been accepted by the user. It should always be
// SCHEMA_STATUS_ACCEPTED for imported schemas. A schema should default to SCHEMA_STATUS_PROPOSED if it is inferred
// and then the user will need to accept it via the UI
enum SchemaStatus {
  SCHEMA_STATUS_UNSET = 0;
  SCHEMA_STATUS_ACCEPTED = 1;
  SCHEMA_STATUS_PROPOSED = 2;
}

enum SchemaType {
  SCHEMA_TYPE_UNSET = 0;
  SCHEMA_TYPE_PROTOBUF = 1;
  SCHEMA_TYPE_AVRO = 2;
  SCHEMA_TYPE_JSONSCHEMA = 3;
}

message GetSchemaRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string id = 1;
}

message GetSchemaResponse {
  Schema schema = 1;
}

message GetAllSchemasRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;
}

message GetAllSchemasResponse {
  repeated Schema schemata = 1;
}

message ImportGithubRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string name = 1;

  SchemaType type = 2;

  string github_url = 3;

  // Internal ID for tracking two-step import process. DO NOT FILL
  string _id = 4;
}

message ImportGithubResponse {
  common.Status status = 1000;

  // Temp ID to hold this information in cache
  string id = 1;

  // Contains file structure of the repo. The end user will select the root schema file and then
  // make a call to ImportGithubSelect() to complete the import
  Directory tree = 2;
}

message ImportGithubSelectRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  // ID received in ImportGithubResponse. This is used to pull the previous import request from cache
  // now that the user knows which file to import
  string import_id = 1;

  // The schema file to import. For protobuf, this will be the root directory under which .proto files are stored
  // For Avro or JSONSchema, it will be the actual schema file
  // Only used for JSONSchema/Avro. Protobuf needs a directory, not a file
  string schema_file_name = 2;

  // Obtained from ImportGithubResponse.Tree. This is the SHA git hash for the file
  // Only used for JSONSchema/Avro. Protobuf needs a directory, not a file
  string schema_file_sha = 3;

  oneof settings {
    encoding.ProtobufSettings protobuf_settings = 100;
    encoding.AvroSettings avro_settings = 101;
    encoding.JSONSchemaSettings json_schema_settings = 102;
  }
}

message ImportGithubSelectResponse {
  common.Status status = 1000;

  // The newly created schema
  Schema schema = 1;
}

message ImportLocalRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string name = 1;

  SchemaType type = 2;

  bytes file_contents = 3;

  string file_name = 4;

  oneof settings {
    encoding.ProtobufSettings protobuf_settings = 100;
    encoding.AvroSettings avro_settings = 101;
    encoding.JSONSchemaSettings json_schema_settings = 102;
  }
}

message ImportLocalResponse {
  common.Status status = 1000;

  string id = 1;
}

message UpdateSchemaRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string id = 1;

  string name = 2;

  string owner_id = 3;

  string notes = 4;
}

message UpdateSchemaResponse {
  common.Status status = 1000;

  Schema schema = 1;
}

message DeleteSchemaRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string id = 1;
}

message DeleteSchemaResponse {
  common.Status status = 1000;
}

message DeleteSchemaVersionRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string id = 1;

  int32 version = 2;
}

message DeleteSchemaVersionResponse {
  common.Status status = 1000;

  // The updated version of the schema definition after deletion
  Schema schema = 1;
}

message ApproveSchemaVersionRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  // Schema ID
  string id = 1;

  int32 version = 2;
}

message ApproveSchemaVersionResponse {
  common.Status status = 1000;

  // The updated version of the schema definition after approval
  Schema schema = 1;
}

message GetRepoListRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;
}

message GetRepoListResponse {
  repeated string repository_urls = 1;
}

message GetRepoTreeRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string repo_url = 1;
}

message GetRepoTreeResponse {
  Directory tree = 1;
}

message GetRepoFileRequest {
  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string repo_url = 1;
  string file_name = 2;
  string file_path = 3;
  string file_sha = 4;
}

message GetRepoFileResponse {
  bytes content = 1;
}

message CreatePRRequest {
  message PRFile {
    string path = 1;
    bytes contents = 2;
  }

  // Every gRPC request must have a valid auth config
  common.Auth auth = 9999;

  string repo_url = 1;

  string pr_name = 2;

  string pr_body = 3;

  string branch_name = 4;

  repeated PRFile files = 5;
}

message CreatePRResponse {
  string url = 1;

  string full_path = 2;
}

// Directory represents a repository directory
message Directory {
  string name  = 1;
  string full_path = 2;
  repeated File files = 3;
  map<string,Directory> dirs = 4;
}

// File represents a file inside of a repository directory
message File {
  string name = 1;
  string path = 2;
  string sha = 3;
  int64 size = 4;
}
