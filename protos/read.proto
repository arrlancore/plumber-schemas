syntax = "proto3";

package protos;

import "common/auth.proto";
import "common/status.proto";
import "encoding/options.proto";
import "records/base.proto";
import "backends/backends.proto";
import "backends/activemq.proto";
import "backends/azure-service-bus.proto";
import "backends/azure-event-hub.proto";
import "backends/aws-sns.proto";
import "backends/aws-sqs.proto";
import "backends/gcp-pubsub.proto";
import "backends/kafka.proto";
import "backends/kubemq-queue.proto";
import "backends/mongo.proto";
import "backends/mqtt.proto";
import "backends/nats.proto";
import "backends/nats-streaming.proto";
import "backends/nsq.proto";
import "backends/postgres.proto";
import "backends/pulsar.proto";
import "backends/rabbit.proto";
import "backends/rabbit-streams.proto";
import "backends/redis-pubsub.proto";
import "backends/redis-streams.proto";

option go_package = "github.com/batchcorp/plumber-schemas/build/go/protos";

message ReadSampleOptions {
    enum Interval {
        SECOND = 0;
        MINUTE = 1;
    }

    uint32 sample_rate = 1;
    Interval sample_interval = 2;
}

enum ReadType {
    ONE_TIME = 0;
    CONTINUOUS = 1;
}

enum ConvertOption {
    UNSET = 0;
    BASE64 = 1;
    GZIP = 2;
}

message ReadCLIConfig {
    bool display_lag_stats = 1;
    repeated ConvertOption convert_output = 2;
    bool verbose_output = 3;

    // Used by CLI to inform components, which backend to use; server uses
    // ReadConfig.connection_id.
    // @gotags: kong:"-"
    backends.Type _backend_type = 5;

    // @gotags: embed:""
    ReadBackend _read_backend = 6;

    message ReadBackend {
        // @gotags: cmd:""
        Kafka kafka = 1;
        // @gotags: cmd:""
        ActiveMQ activemq = 2;
        // @gotags: cmd:""
        AWSSQS awssqs = 3;
        // @gotags: cmd:""
        Mongo mongo = 4;
        // @gotags: cmd:""
        Nats nats = 5;
        // @gotags: cmd:""
        NatsStreaming nats_streaming = 6;
        // @gotags: cmd:""
        NSQ nsq = 7;
        // @gotags: cmd:""
        Pulsar pulsar = 8;
        // @gotags: cmd:""
        Rabbit rabbit = 9;
        // @gotags: cmd:""
        RabbitStreams rabbit_streams = 10;
        // @gotags: cmd:""
        MQTT mqtt = 11;
        // @gotags: cmd:""
        AzureServiceBus azure_service_bus = 12;
        // @gotags: cmd:""
        AzureEventHub azure_event_hub = 13;
        // @gotags: cmd:""
        GCPPubSub gcp_pubsub = 14;
        // @gotags: cmd:""
        KubeMQQueue kubemq_queue = 15;
        // @gotags: cmd:""
        RedisPubSub redis_pubsub = 16;
        // @gotags: cmd:""
        RedisStreams redis_streams = 17;
        // @gotags: cmd:""
        Postgres postgres = 18;

        // @gotags: cmd:""
        message Kafka {
            // @gotags: embed:""
            backends.KafkaConn conn = 1;
            // @gotags: embed:""
            backends.KafkaReadArgs args = 2;
        }

        // @gotags: cmd:""
        message ActiveMQ {
            // @gotags: embed:""
            backends.ActiveMQConn conn = 1;
            // @gotags: embed:""
            backends.ActiveMQReadArgs args = 2;
        }

        // @gotags: cmd:""
        message AWSSQS {
            // @gotags: embed:""
            backends.AWSSQSConn conn = 1;
            // @gotags: embed:""
            backends.AWSSQSReadArgs args = 2;
        }

        // @gotags: cmd:""
        message Mongo {
            // @gotags: embed:""
            backends.MongoConn conn = 1;
            // @gotags: embed:""
            backends.MongoReadArgs args = 2;
        }

        // @gotags: cmd:""
        message Nats {
            // @gotags: embed:""
            backends.NatsConn conn = 1;
            // @gotags: embed:""
            backends.NatsReadArgs args = 2;
        }

        // @gotags: cmd:""
        message NatsStreaming {
            // @gotags: embed:""
            backends.NatsStreamingConn conn = 1;
            // @gotags: embed:""
            backends.NatsStreamingReadArgs args = 2;
        }

        // @gotags: cmd:""
        message NSQ {
            // @gotags: embed:""
            backends.NSQConn conn = 1;
            // @gotags: embed:""
            backends.NSQReadArgs args = 2;
        }

        // @gotags: cmd:""
        message Postgres {
            // @gotags: embed:""
            backends.PostgresConn conn = 1;
            // @gotags: embed:""
            backends.PostgresReadArgs args = 2;
        }

        // @gotags: cmd:""
        message Pulsar {
            // @gotags: embed:""
            backends.PulsarConn conn = 1;
            // @gotags: embed:""
            backends.PulsarReadArgs args = 2;
        }

        // @gotags: cmd:""
        message Rabbit {
            // @gotags: embed:""
            backends.RabbitConn conn = 1;
            // @gotags: embed:""
            backends.RabbitReadArgs args = 2;
        }

        // @gotags: cmd:""
        message RabbitStreams {
            // @gotags: embed:""
            backends.RabbitStreamsConn conn = 1;
            // @gotags: embed:""
            backends.RabbitStreamsReadArgs args = 2;
        }

        // @gotags: cmd:""
        message RedisPubSub {
            // @gotags: embed:""
            backends.RedisPubSubConn conn = 1;
            // @gotags: embed:""
            backends.RedisPubSubReadArgs args = 2;
        }

        // @gotags: cmd:""
        message RedisStreams {
            // @gotags: embed:""
            backends.RedisStreamsConn conn = 1;
            // @gotags: embed:""
            backends.RedisStreamsReadArgs args = 2;
        }

        // @gotags: cmd:""
        message AzureEventHub {
            // @gotags: embed:""
            backends.AzureEventHubConn conn = 1;
            // @gotags: embed:""
            backends.AzureEventHubReadArgs args = 2;
        }

        // @gotags: cmd:""
        message AzureServiceBus {
            // @gotags: embed:""
            backends.AzureServiceBusConn conn = 1;
            // @gotags: embed:""
            backends.AzureServiceBusReadArgs args = 2;
        }

        message MQTT {
            // @gotags: embed:""
            backends.MQTTConn conn = 1;
            // @gotags: embed:""
            backends.MQTTReadArgs args = 2;
        }

        message GCPPubSub {
            // @gotags: embed:""
            backends.GCPPubSubConn conn = 1;
            // @gotags: embed:""
            backends.GCPPubSubReadArgs args = 2;
        }

        message KubeMQQueue {
            // @gotags: embed:""
            backends.KubeMQQueueConn conn = 1;
            // @gotags: embed:""
            backends.KubeMQQueueReadArgs args = 2;
        }
    }
}

message ReadConfig {
    // Required; friendly name for the read
    // @gotags: kong:"-"
    string name = 1;

    // Required for server mode; ignored in CLI mode.
    // @gotags: kong:"-"
    string connection_id = 2;

    // Required; specify if a read is continuous or not (default: false)
    // @gotags: short:"X" default: "false"
    bool continuous = 3;

    // Optional; specify if reading should utilize sampling
    // @gotags: embed:""
    ReadSampleOptions sample_options = 4;

    // Optional; decode_options specify how to decode the _value_ in a message.
    // If left unset, plumber will still populate records.ReadRecord.Decoded
    // with the (untouched) value.
    // @gotags: embed:""
    encoding.DecodeOptions decode_options = 5;

    ////////////////////////////////////////////////////////
    ////////////// "Private" fields 1000+ ////////////////
    ////////////////////////////////////////////////////////

    // Automatically set by plumber when a new read is created
    // @gotags: kong:"-"
    string _id = 1000;

    // Used by plumber to set read state
    // @gotags: kong:"-"
    bool _active = 1001;

    // Contains options/fields specific to the CLI
    // @gotags: embed:""
    ReadCLIConfig _cli_config = 1002;
}


message CreateReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    ReadConfig config = 1;
}

message CreateReadResponse {
    common.Status status = 1000;

    // Assigned and returned by plumber-server to identify a successful read request
    string read_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

message StopReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message StopReadResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message ResumeReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message ResumeReadResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message DeleteReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message DeleteReadResponse {
    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message StartReadRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;

    string read_id = 1;
}

message StartReadResponse {
    repeated records.ReadRecord records = 1;

    common.Status status = 1000;
}

///////////////////////////////////////////////////////////////////////////////

message GetAllReadsRequest {
    // Every gRPC request must have a valid auth config
    common.Auth auth = 9999;
}

message GetAllReadsResponse {
    repeated ReadConfig read = 1;

    common.Status status = 1000;
}
