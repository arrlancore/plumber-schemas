// source: backends/redis-streams.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.backends.CreateConsumerConfig', null, global);
goog.exportSymbol('proto.protos.backends.CreateConsumerConfig.OffsetStart', null, global);
goog.exportSymbol('proto.protos.backends.RedisStreams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.RedisStreams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.backends.RedisStreams.repeatedFields_, null);
};
goog.inherits(proto.protos.backends.RedisStreams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.RedisStreams.displayName = 'proto.protos.backends.RedisStreams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.CreateConsumerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.CreateConsumerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.CreateConsumerConfig.displayName = 'proto.protos.backends.CreateConsumerConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.backends.RedisStreams.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.RedisStreams.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.RedisStreams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.RedisStreams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.RedisStreams.toObject = function(includeInstance, msg) {
  var f, obj = {
    database: jspb.Message.getFieldWithDefault(msg, 1, 0),
    streamList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    key: jspb.Message.getFieldWithDefault(msg, 4, ""),
    consumerGroup: jspb.Message.getFieldWithDefault(msg, 5, ""),
    consumerName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    createConsumerConfig: (f = msg.getCreateConsumerConfig()) && proto.protos.backends.CreateConsumerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.RedisStreams}
 */
proto.protos.backends.RedisStreams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.RedisStreams;
  return proto.protos.backends.RedisStreams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.RedisStreams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.RedisStreams}
 */
proto.protos.backends.RedisStreams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDatabase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStream(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerGroup(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerName(value);
      break;
    case 7:
      var value = new proto.protos.backends.CreateConsumerConfig;
      reader.readMessage(value,proto.protos.backends.CreateConsumerConfig.deserializeBinaryFromReader);
      msg.setCreateConsumerConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.RedisStreams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.RedisStreams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.RedisStreams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.RedisStreams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabase();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStreamList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConsumerGroup();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getConsumerName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreateConsumerConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protos.backends.CreateConsumerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 database = 1;
 * @return {number}
 */
proto.protos.backends.RedisStreams.prototype.getDatabase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string stream = 2;
 * @return {!Array<string>}
 */
proto.protos.backends.RedisStreams.prototype.getStreamList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.setStreamList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.addStream = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.clearStreamList = function() {
  return this.setStreamList([]);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.protos.backends.RedisStreams.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string key = 4;
 * @return {string}
 */
proto.protos.backends.RedisStreams.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string consumer_group = 5;
 * @return {string}
 */
proto.protos.backends.RedisStreams.prototype.getConsumerGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.setConsumerGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string consumer_name = 6;
 * @return {string}
 */
proto.protos.backends.RedisStreams.prototype.getConsumerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.setConsumerName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional CreateConsumerConfig create_consumer_config = 7;
 * @return {?proto.protos.backends.CreateConsumerConfig}
 */
proto.protos.backends.RedisStreams.prototype.getCreateConsumerConfig = function() {
  return /** @type{?proto.protos.backends.CreateConsumerConfig} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.CreateConsumerConfig, 7));
};


/**
 * @param {?proto.protos.backends.CreateConsumerConfig|undefined} value
 * @return {!proto.protos.backends.RedisStreams} returns this
*/
proto.protos.backends.RedisStreams.prototype.setCreateConsumerConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RedisStreams} returns this
 */
proto.protos.backends.RedisStreams.prototype.clearCreateConsumerConfig = function() {
  return this.setCreateConsumerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RedisStreams.prototype.hasCreateConsumerConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.CreateConsumerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.CreateConsumerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.CreateConsumerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.CreateConsumerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    createStreams: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    recreateConsumerGroup: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    offsetStart: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.CreateConsumerConfig}
 */
proto.protos.backends.CreateConsumerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.CreateConsumerConfig;
  return proto.protos.backends.CreateConsumerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.CreateConsumerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.CreateConsumerConfig}
 */
proto.protos.backends.CreateConsumerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreateStreams(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecreateConsumerGroup(value);
      break;
    case 5:
      var value = /** @type {!proto.protos.backends.CreateConsumerConfig.OffsetStart} */ (reader.readEnum());
      msg.setOffsetStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.CreateConsumerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.CreateConsumerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.CreateConsumerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.CreateConsumerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateStreams();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRecreateConsumerGroup();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getOffsetStart();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protos.backends.CreateConsumerConfig.OffsetStart = {
  LATEST: 0,
  OLDEST: 1
};

/**
 * optional bool create_streams = 3;
 * @return {boolean}
 */
proto.protos.backends.CreateConsumerConfig.prototype.getCreateStreams = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.backends.CreateConsumerConfig} returns this
 */
proto.protos.backends.CreateConsumerConfig.prototype.setCreateStreams = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool recreate_consumer_group = 4;
 * @return {boolean}
 */
proto.protos.backends.CreateConsumerConfig.prototype.getRecreateConsumerGroup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.backends.CreateConsumerConfig} returns this
 */
proto.protos.backends.CreateConsumerConfig.prototype.setRecreateConsumerGroup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional OffsetStart offset_start = 5;
 * @return {!proto.protos.backends.CreateConsumerConfig.OffsetStart}
 */
proto.protos.backends.CreateConsumerConfig.prototype.getOffsetStart = function() {
  return /** @type {!proto.protos.backends.CreateConsumerConfig.OffsetStart} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.protos.backends.CreateConsumerConfig.OffsetStart} value
 * @return {!proto.protos.backends.CreateConsumerConfig} returns this
 */
proto.protos.backends.CreateConsumerConfig.prototype.setOffsetStart = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


goog.object.extend(exports, proto.protos.backends);
