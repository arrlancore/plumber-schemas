// source: backends/rabbit-streams.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.backends.DeclareStream', null, global);
goog.exportSymbol('proto.protos.backends.FirstOffset', null, global);
goog.exportSymbol('proto.protos.backends.LastConsumed', null, global);
goog.exportSymbol('proto.protos.backends.LastOffset', null, global);
goog.exportSymbol('proto.protos.backends.NextOffset', null, global);
goog.exportSymbol('proto.protos.backends.RabbitStreams', null, global);
goog.exportSymbol('proto.protos.backends.RabbitStreams.OffsetOptionCase', null, global);
goog.exportSymbol('proto.protos.backends.SpecificOffset', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.RabbitStreams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.backends.RabbitStreams.oneofGroups_);
};
goog.inherits(proto.protos.backends.RabbitStreams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.RabbitStreams.displayName = 'proto.protos.backends.RabbitStreams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.DeclareStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.DeclareStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.DeclareStream.displayName = 'proto.protos.backends.DeclareStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.SpecificOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.SpecificOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.SpecificOffset.displayName = 'proto.protos.backends.SpecificOffset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.LastOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.LastOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.LastOffset.displayName = 'proto.protos.backends.LastOffset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.LastConsumed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.LastConsumed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.LastConsumed.displayName = 'proto.protos.backends.LastConsumed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.FirstOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.FirstOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.FirstOffset.displayName = 'proto.protos.backends.FirstOffset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.NextOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.NextOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.NextOffset.displayName = 'proto.protos.backends.NextOffset';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.backends.RabbitStreams.oneofGroups_ = [[101,102,103,104,105]];

/**
 * @enum {number}
 */
proto.protos.backends.RabbitStreams.OffsetOptionCase = {
  OFFSET_OPTION_NOT_SET: 0,
  OFFSET: 101,
  LAST_OFFSET: 102,
  LAST_CONSUMED: 103,
  FIRST_OFFSET: 104,
  NEXT_OFFSET: 105
};

/**
 * @return {proto.protos.backends.RabbitStreams.OffsetOptionCase}
 */
proto.protos.backends.RabbitStreams.prototype.getOffsetOptionCase = function() {
  return /** @type {proto.protos.backends.RabbitStreams.OffsetOptionCase} */(jspb.Message.computeOneofCase(this, proto.protos.backends.RabbitStreams.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.RabbitStreams.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.RabbitStreams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.RabbitStreams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.RabbitStreams.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    declareStream: (f = msg.getDeclareStream()) && proto.protos.backends.DeclareStream.toObject(includeInstance, f),
    offset: (f = msg.getOffset()) && proto.protos.backends.SpecificOffset.toObject(includeInstance, f),
    lastOffset: (f = msg.getLastOffset()) && proto.protos.backends.LastOffset.toObject(includeInstance, f),
    lastConsumed: (f = msg.getLastConsumed()) && proto.protos.backends.LastConsumed.toObject(includeInstance, f),
    firstOffset: (f = msg.getFirstOffset()) && proto.protos.backends.FirstOffset.toObject(includeInstance, f),
    nextOffset: (f = msg.getNextOffset()) && proto.protos.backends.NextOffset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.RabbitStreams}
 */
proto.protos.backends.RabbitStreams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.RabbitStreams;
  return proto.protos.backends.RabbitStreams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.RabbitStreams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.RabbitStreams}
 */
proto.protos.backends.RabbitStreams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.protos.backends.DeclareStream;
      reader.readMessage(value,proto.protos.backends.DeclareStream.deserializeBinaryFromReader);
      msg.setDeclareStream(value);
      break;
    case 101:
      var value = new proto.protos.backends.SpecificOffset;
      reader.readMessage(value,proto.protos.backends.SpecificOffset.deserializeBinaryFromReader);
      msg.setOffset(value);
      break;
    case 102:
      var value = new proto.protos.backends.LastOffset;
      reader.readMessage(value,proto.protos.backends.LastOffset.deserializeBinaryFromReader);
      msg.setLastOffset(value);
      break;
    case 103:
      var value = new proto.protos.backends.LastConsumed;
      reader.readMessage(value,proto.protos.backends.LastConsumed.deserializeBinaryFromReader);
      msg.setLastConsumed(value);
      break;
    case 104:
      var value = new proto.protos.backends.FirstOffset;
      reader.readMessage(value,proto.protos.backends.FirstOffset.deserializeBinaryFromReader);
      msg.setFirstOffset(value);
      break;
    case 105:
      var value = new proto.protos.backends.NextOffset;
      reader.readMessage(value,proto.protos.backends.NextOffset.deserializeBinaryFromReader);
      msg.setNextOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.RabbitStreams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.RabbitStreams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.RabbitStreams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.RabbitStreams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeclareStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.backends.DeclareStream.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.protos.backends.SpecificOffset.serializeBinaryToWriter
    );
  }
  f = message.getLastOffset();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.protos.backends.LastOffset.serializeBinaryToWriter
    );
  }
  f = message.getLastConsumed();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.protos.backends.LastConsumed.serializeBinaryToWriter
    );
  }
  f = message.getFirstOffset();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.protos.backends.FirstOffset.serializeBinaryToWriter
    );
  }
  f = message.getNextOffset();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.protos.backends.NextOffset.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.protos.backends.RabbitStreams.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.setStream = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DeclareStream declare_stream = 2;
 * @return {?proto.protos.backends.DeclareStream}
 */
proto.protos.backends.RabbitStreams.prototype.getDeclareStream = function() {
  return /** @type{?proto.protos.backends.DeclareStream} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.DeclareStream, 2));
};


/**
 * @param {?proto.protos.backends.DeclareStream|undefined} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
*/
proto.protos.backends.RabbitStreams.prototype.setDeclareStream = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.clearDeclareStream = function() {
  return this.setDeclareStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RabbitStreams.prototype.hasDeclareStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SpecificOffset offset = 101;
 * @return {?proto.protos.backends.SpecificOffset}
 */
proto.protos.backends.RabbitStreams.prototype.getOffset = function() {
  return /** @type{?proto.protos.backends.SpecificOffset} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.SpecificOffset, 101));
};


/**
 * @param {?proto.protos.backends.SpecificOffset|undefined} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
*/
proto.protos.backends.RabbitStreams.prototype.setOffset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.protos.backends.RabbitStreams.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.clearOffset = function() {
  return this.setOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RabbitStreams.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional LastOffset last_offset = 102;
 * @return {?proto.protos.backends.LastOffset}
 */
proto.protos.backends.RabbitStreams.prototype.getLastOffset = function() {
  return /** @type{?proto.protos.backends.LastOffset} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.LastOffset, 102));
};


/**
 * @param {?proto.protos.backends.LastOffset|undefined} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
*/
proto.protos.backends.RabbitStreams.prototype.setLastOffset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.protos.backends.RabbitStreams.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.clearLastOffset = function() {
  return this.setLastOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RabbitStreams.prototype.hasLastOffset = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional LastConsumed last_consumed = 103;
 * @return {?proto.protos.backends.LastConsumed}
 */
proto.protos.backends.RabbitStreams.prototype.getLastConsumed = function() {
  return /** @type{?proto.protos.backends.LastConsumed} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.LastConsumed, 103));
};


/**
 * @param {?proto.protos.backends.LastConsumed|undefined} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
*/
proto.protos.backends.RabbitStreams.prototype.setLastConsumed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.protos.backends.RabbitStreams.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.clearLastConsumed = function() {
  return this.setLastConsumed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RabbitStreams.prototype.hasLastConsumed = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional FirstOffset first_offset = 104;
 * @return {?proto.protos.backends.FirstOffset}
 */
proto.protos.backends.RabbitStreams.prototype.getFirstOffset = function() {
  return /** @type{?proto.protos.backends.FirstOffset} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.FirstOffset, 104));
};


/**
 * @param {?proto.protos.backends.FirstOffset|undefined} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
*/
proto.protos.backends.RabbitStreams.prototype.setFirstOffset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.protos.backends.RabbitStreams.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.clearFirstOffset = function() {
  return this.setFirstOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RabbitStreams.prototype.hasFirstOffset = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional NextOffset next_offset = 105;
 * @return {?proto.protos.backends.NextOffset}
 */
proto.protos.backends.RabbitStreams.prototype.getNextOffset = function() {
  return /** @type{?proto.protos.backends.NextOffset} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.NextOffset, 105));
};


/**
 * @param {?proto.protos.backends.NextOffset|undefined} value
 * @return {!proto.protos.backends.RabbitStreams} returns this
*/
proto.protos.backends.RabbitStreams.prototype.setNextOffset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.protos.backends.RabbitStreams.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.RabbitStreams} returns this
 */
proto.protos.backends.RabbitStreams.prototype.clearNextOffset = function() {
  return this.setNextOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.RabbitStreams.prototype.hasNextOffset = function() {
  return jspb.Message.getField(this, 105) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.DeclareStream.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.DeclareStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.DeclareStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.DeclareStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.DeclareStream}
 */
proto.protos.backends.DeclareStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.DeclareStream;
  return proto.protos.backends.DeclareStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.DeclareStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.DeclareStream}
 */
proto.protos.backends.DeclareStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.DeclareStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.DeclareStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.DeclareStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.DeclareStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string size = 1;
 * @return {string}
 */
proto.protos.backends.DeclareStream.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.DeclareStream} returns this
 */
proto.protos.backends.DeclareStream.prototype.setSize = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.SpecificOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.SpecificOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.SpecificOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.SpecificOffset.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.SpecificOffset}
 */
proto.protos.backends.SpecificOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.SpecificOffset;
  return proto.protos.backends.SpecificOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.SpecificOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.SpecificOffset}
 */
proto.protos.backends.SpecificOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.SpecificOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.SpecificOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.SpecificOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.SpecificOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 offset = 1;
 * @return {number}
 */
proto.protos.backends.SpecificOffset.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.backends.SpecificOffset} returns this
 */
proto.protos.backends.SpecificOffset.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.LastOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.LastOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.LastOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.LastOffset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.LastOffset}
 */
proto.protos.backends.LastOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.LastOffset;
  return proto.protos.backends.LastOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.LastOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.LastOffset}
 */
proto.protos.backends.LastOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.LastOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.LastOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.LastOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.LastOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.LastConsumed.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.LastConsumed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.LastConsumed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.LastConsumed.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.LastConsumed}
 */
proto.protos.backends.LastConsumed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.LastConsumed;
  return proto.protos.backends.LastConsumed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.LastConsumed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.LastConsumed}
 */
proto.protos.backends.LastConsumed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.LastConsumed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.LastConsumed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.LastConsumed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.LastConsumed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.FirstOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.FirstOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.FirstOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.FirstOffset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.FirstOffset}
 */
proto.protos.backends.FirstOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.FirstOffset;
  return proto.protos.backends.FirstOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.FirstOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.FirstOffset}
 */
proto.protos.backends.FirstOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.FirstOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.FirstOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.FirstOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.FirstOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.NextOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.NextOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.NextOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.NextOffset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.NextOffset}
 */
proto.protos.backends.NextOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.NextOffset;
  return proto.protos.backends.NextOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.NextOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.NextOffset}
 */
proto.protos.backends.NextOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.NextOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.NextOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.NextOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.NextOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.protos.backends);
