// source: backends/nats-streaming.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.backends.NatsStreaming', null, global);
goog.exportSymbol('proto.protos.backends.NatsStreaming.ReadOptionCase', null, global);
goog.exportSymbol('proto.protos.backends.ReadAll', null, global);
goog.exportSymbol('proto.protos.backends.ReadLastAvailable', null, global);
goog.exportSymbol('proto.protos.backends.ReadSequenceNumber', null, global);
goog.exportSymbol('proto.protos.backends.ReadSince', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.NatsStreaming = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.backends.NatsStreaming.oneofGroups_);
};
goog.inherits(proto.protos.backends.NatsStreaming, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.NatsStreaming.displayName = 'proto.protos.backends.NatsStreaming';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.ReadLastAvailable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.ReadLastAvailable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.ReadLastAvailable.displayName = 'proto.protos.backends.ReadLastAvailable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.ReadSequenceNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.ReadSequenceNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.ReadSequenceNumber.displayName = 'proto.protos.backends.ReadSequenceNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.ReadSince = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.ReadSince, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.ReadSince.displayName = 'proto.protos.backends.ReadSince';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.backends.ReadAll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.backends.ReadAll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.backends.ReadAll.displayName = 'proto.protos.backends.ReadAll';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.backends.NatsStreaming.oneofGroups_ = [[100,101,102,103]];

/**
 * @enum {number}
 */
proto.protos.backends.NatsStreaming.ReadOptionCase = {
  READ_OPTION_NOT_SET: 0,
  LAST_AVAILABLE: 100,
  READ_SEQUENCE_NUMBER: 101,
  READ_SINCE: 102,
  ALL: 103
};

/**
 * @return {proto.protos.backends.NatsStreaming.ReadOptionCase}
 */
proto.protos.backends.NatsStreaming.prototype.getReadOptionCase = function() {
  return /** @type {proto.protos.backends.NatsStreaming.ReadOptionCase} */(jspb.Message.computeOneofCase(this, proto.protos.backends.NatsStreaming.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.NatsStreaming.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.NatsStreaming.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.NatsStreaming} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.NatsStreaming.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    durableName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastAvailable: (f = msg.getLastAvailable()) && proto.protos.backends.ReadLastAvailable.toObject(includeInstance, f),
    readSequenceNumber: (f = msg.getReadSequenceNumber()) && proto.protos.backends.ReadSequenceNumber.toObject(includeInstance, f),
    readSince: (f = msg.getReadSince()) && proto.protos.backends.ReadSince.toObject(includeInstance, f),
    all: (f = msg.getAll()) && proto.protos.backends.ReadAll.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.NatsStreaming}
 */
proto.protos.backends.NatsStreaming.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.NatsStreaming;
  return proto.protos.backends.NatsStreaming.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.NatsStreaming} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.NatsStreaming}
 */
proto.protos.backends.NatsStreaming.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDurableName(value);
      break;
    case 100:
      var value = new proto.protos.backends.ReadLastAvailable;
      reader.readMessage(value,proto.protos.backends.ReadLastAvailable.deserializeBinaryFromReader);
      msg.setLastAvailable(value);
      break;
    case 101:
      var value = new proto.protos.backends.ReadSequenceNumber;
      reader.readMessage(value,proto.protos.backends.ReadSequenceNumber.deserializeBinaryFromReader);
      msg.setReadSequenceNumber(value);
      break;
    case 102:
      var value = new proto.protos.backends.ReadSince;
      reader.readMessage(value,proto.protos.backends.ReadSince.deserializeBinaryFromReader);
      msg.setReadSince(value);
      break;
    case 103:
      var value = new proto.protos.backends.ReadAll;
      reader.readMessage(value,proto.protos.backends.ReadAll.deserializeBinaryFromReader);
      msg.setAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.NatsStreaming.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.NatsStreaming.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.NatsStreaming} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.NatsStreaming.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDurableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastAvailable();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.protos.backends.ReadLastAvailable.serializeBinaryToWriter
    );
  }
  f = message.getReadSequenceNumber();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.protos.backends.ReadSequenceNumber.serializeBinaryToWriter
    );
  }
  f = message.getReadSince();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.protos.backends.ReadSince.serializeBinaryToWriter
    );
  }
  f = message.getAll();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.protos.backends.ReadAll.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.protos.backends.NatsStreaming.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.NatsStreaming} returns this
 */
proto.protos.backends.NatsStreaming.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string durable_name = 2;
 * @return {string}
 */
proto.protos.backends.NatsStreaming.prototype.getDurableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.NatsStreaming} returns this
 */
proto.protos.backends.NatsStreaming.prototype.setDurableName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ReadLastAvailable last_available = 100;
 * @return {?proto.protos.backends.ReadLastAvailable}
 */
proto.protos.backends.NatsStreaming.prototype.getLastAvailable = function() {
  return /** @type{?proto.protos.backends.ReadLastAvailable} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.ReadLastAvailable, 100));
};


/**
 * @param {?proto.protos.backends.ReadLastAvailable|undefined} value
 * @return {!proto.protos.backends.NatsStreaming} returns this
*/
proto.protos.backends.NatsStreaming.prototype.setLastAvailable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.protos.backends.NatsStreaming.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.NatsStreaming} returns this
 */
proto.protos.backends.NatsStreaming.prototype.clearLastAvailable = function() {
  return this.setLastAvailable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.NatsStreaming.prototype.hasLastAvailable = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional ReadSequenceNumber read_sequence_number = 101;
 * @return {?proto.protos.backends.ReadSequenceNumber}
 */
proto.protos.backends.NatsStreaming.prototype.getReadSequenceNumber = function() {
  return /** @type{?proto.protos.backends.ReadSequenceNumber} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.ReadSequenceNumber, 101));
};


/**
 * @param {?proto.protos.backends.ReadSequenceNumber|undefined} value
 * @return {!proto.protos.backends.NatsStreaming} returns this
*/
proto.protos.backends.NatsStreaming.prototype.setReadSequenceNumber = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.protos.backends.NatsStreaming.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.NatsStreaming} returns this
 */
proto.protos.backends.NatsStreaming.prototype.clearReadSequenceNumber = function() {
  return this.setReadSequenceNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.NatsStreaming.prototype.hasReadSequenceNumber = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ReadSince read_since = 102;
 * @return {?proto.protos.backends.ReadSince}
 */
proto.protos.backends.NatsStreaming.prototype.getReadSince = function() {
  return /** @type{?proto.protos.backends.ReadSince} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.ReadSince, 102));
};


/**
 * @param {?proto.protos.backends.ReadSince|undefined} value
 * @return {!proto.protos.backends.NatsStreaming} returns this
*/
proto.protos.backends.NatsStreaming.prototype.setReadSince = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.protos.backends.NatsStreaming.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.NatsStreaming} returns this
 */
proto.protos.backends.NatsStreaming.prototype.clearReadSince = function() {
  return this.setReadSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.NatsStreaming.prototype.hasReadSince = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional ReadAll all = 103;
 * @return {?proto.protos.backends.ReadAll}
 */
proto.protos.backends.NatsStreaming.prototype.getAll = function() {
  return /** @type{?proto.protos.backends.ReadAll} */ (
    jspb.Message.getWrapperField(this, proto.protos.backends.ReadAll, 103));
};


/**
 * @param {?proto.protos.backends.ReadAll|undefined} value
 * @return {!proto.protos.backends.NatsStreaming} returns this
*/
proto.protos.backends.NatsStreaming.prototype.setAll = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.protos.backends.NatsStreaming.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.backends.NatsStreaming} returns this
 */
proto.protos.backends.NatsStreaming.prototype.clearAll = function() {
  return this.setAll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.backends.NatsStreaming.prototype.hasAll = function() {
  return jspb.Message.getField(this, 103) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.ReadLastAvailable.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.ReadLastAvailable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.ReadLastAvailable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadLastAvailable.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.ReadLastAvailable}
 */
proto.protos.backends.ReadLastAvailable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.ReadLastAvailable;
  return proto.protos.backends.ReadLastAvailable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.ReadLastAvailable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.ReadLastAvailable}
 */
proto.protos.backends.ReadLastAvailable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.ReadLastAvailable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.ReadLastAvailable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.ReadLastAvailable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadLastAvailable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.ReadSequenceNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.ReadSequenceNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.ReadSequenceNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadSequenceNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.ReadSequenceNumber}
 */
proto.protos.backends.ReadSequenceNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.ReadSequenceNumber;
  return proto.protos.backends.ReadSequenceNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.ReadSequenceNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.ReadSequenceNumber}
 */
proto.protos.backends.ReadSequenceNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.ReadSequenceNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.ReadSequenceNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.ReadSequenceNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadSequenceNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 sequence_number = 1;
 * @return {number}
 */
proto.protos.backends.ReadSequenceNumber.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.backends.ReadSequenceNumber} returns this
 */
proto.protos.backends.ReadSequenceNumber.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.ReadSince.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.ReadSince.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.ReadSince} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadSince.toObject = function(includeInstance, msg) {
  var f, obj = {
    since: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.ReadSince}
 */
proto.protos.backends.ReadSince.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.ReadSince;
  return proto.protos.backends.ReadSince.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.ReadSince} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.ReadSince}
 */
proto.protos.backends.ReadSince.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSince(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.ReadSince.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.ReadSince.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.ReadSince} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadSince.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSince();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string since = 1;
 * @return {string}
 */
proto.protos.backends.ReadSince.prototype.getSince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.backends.ReadSince} returns this
 */
proto.protos.backends.ReadSince.prototype.setSince = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.backends.ReadAll.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.backends.ReadAll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.backends.ReadAll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadAll.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.backends.ReadAll}
 */
proto.protos.backends.ReadAll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.backends.ReadAll;
  return proto.protos.backends.ReadAll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.backends.ReadAll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.backends.ReadAll}
 */
proto.protos.backends.ReadAll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.backends.ReadAll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.backends.ReadAll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.backends.ReadAll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.backends.ReadAll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.protos.backends);
