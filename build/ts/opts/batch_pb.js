// source: opts/batch.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var opts_write_pb = require('../opts/write_pb.js');
goog.object.extend(proto, opts_write_pb);
goog.exportSymbol('proto.protos.opts.BatchArchiveOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchArchiveReplayOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchCreateCollectionOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchCreateDestinationOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchCreateOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchCreateReplayOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchListOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchLoginOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchLogoutOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchOptions', null, global);
goog.exportSymbol('proto.protos.opts.BatchOutputType', null, global);
goog.exportSymbol('proto.protos.opts.BatchReplayType', null, global);
goog.exportSymbol('proto.protos.opts.BatchSearchOptions', null, global);
goog.exportSymbol('proto.protos.opts.HTTPDestination', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchOptions.displayName = 'proto.protos.opts.BatchOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchLoginOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchLoginOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchLoginOptions.displayName = 'proto.protos.opts.BatchLoginOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchLogoutOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchLogoutOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchLogoutOptions.displayName = 'proto.protos.opts.BatchLogoutOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchArchiveOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchArchiveOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchArchiveOptions.displayName = 'proto.protos.opts.BatchArchiveOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchArchiveReplayOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchArchiveReplayOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchArchiveReplayOptions.displayName = 'proto.protos.opts.BatchArchiveReplayOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchListOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchListOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchListOptions.displayName = 'proto.protos.opts.BatchListOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchCreateOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchCreateOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchCreateOptions.displayName = 'proto.protos.opts.BatchCreateOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchSearchOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchSearchOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchSearchOptions.displayName = 'proto.protos.opts.BatchSearchOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchCreateCollectionOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchCreateCollectionOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchCreateCollectionOptions.displayName = 'proto.protos.opts.BatchCreateCollectionOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchCreateReplayOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchCreateReplayOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchCreateReplayOptions.displayName = 'proto.protos.opts.BatchCreateReplayOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.BatchCreateDestinationOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.BatchCreateDestinationOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.BatchCreateDestinationOptions.displayName = 'proto.protos.opts.BatchCreateDestinationOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.HTTPDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.HTTPDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.HTTPDestination.displayName = 'proto.protos.opts.HTTPDestination';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: (f = msg.getLogin()) && proto.protos.opts.BatchLoginOptions.toObject(includeInstance, f),
    logout: (f = msg.getLogout()) && proto.protos.opts.BatchLogoutOptions.toObject(includeInstance, f),
    list: (f = msg.getList()) && proto.protos.opts.BatchListOptions.toObject(includeInstance, f),
    create: (f = msg.getCreate()) && proto.protos.opts.BatchCreateOptions.toObject(includeInstance, f),
    search: (f = msg.getSearch()) && proto.protos.opts.BatchSearchOptions.toObject(includeInstance, f),
    archive: (f = msg.getArchive()) && proto.protos.opts.BatchArchiveOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchOptions}
 */
proto.protos.opts.BatchOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchOptions;
  return proto.protos.opts.BatchOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchOptions}
 */
proto.protos.opts.BatchOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.opts.BatchLoginOptions;
      reader.readMessage(value,proto.protos.opts.BatchLoginOptions.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 2:
      var value = new proto.protos.opts.BatchLogoutOptions;
      reader.readMessage(value,proto.protos.opts.BatchLogoutOptions.deserializeBinaryFromReader);
      msg.setLogout(value);
      break;
    case 3:
      var value = new proto.protos.opts.BatchListOptions;
      reader.readMessage(value,proto.protos.opts.BatchListOptions.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 4:
      var value = new proto.protos.opts.BatchCreateOptions;
      reader.readMessage(value,proto.protos.opts.BatchCreateOptions.deserializeBinaryFromReader);
      msg.setCreate(value);
      break;
    case 5:
      var value = new proto.protos.opts.BatchSearchOptions;
      reader.readMessage(value,proto.protos.opts.BatchSearchOptions.deserializeBinaryFromReader);
      msg.setSearch(value);
      break;
    case 6:
      var value = new proto.protos.opts.BatchArchiveOptions;
      reader.readMessage(value,proto.protos.opts.BatchArchiveOptions.deserializeBinaryFromReader);
      msg.setArchive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.opts.BatchLoginOptions.serializeBinaryToWriter
    );
  }
  f = message.getLogout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.opts.BatchLogoutOptions.serializeBinaryToWriter
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.opts.BatchListOptions.serializeBinaryToWriter
    );
  }
  f = message.getCreate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protos.opts.BatchCreateOptions.serializeBinaryToWriter
    );
  }
  f = message.getSearch();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protos.opts.BatchSearchOptions.serializeBinaryToWriter
    );
  }
  f = message.getArchive();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protos.opts.BatchArchiveOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional BatchLoginOptions login = 1;
 * @return {?proto.protos.opts.BatchLoginOptions}
 */
proto.protos.opts.BatchOptions.prototype.getLogin = function() {
  return /** @type{?proto.protos.opts.BatchLoginOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchLoginOptions, 1));
};


/**
 * @param {?proto.protos.opts.BatchLoginOptions|undefined} value
 * @return {!proto.protos.opts.BatchOptions} returns this
*/
proto.protos.opts.BatchOptions.prototype.setLogin = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchOptions} returns this
 */
proto.protos.opts.BatchOptions.prototype.clearLogin = function() {
  return this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchOptions.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BatchLogoutOptions logout = 2;
 * @return {?proto.protos.opts.BatchLogoutOptions}
 */
proto.protos.opts.BatchOptions.prototype.getLogout = function() {
  return /** @type{?proto.protos.opts.BatchLogoutOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchLogoutOptions, 2));
};


/**
 * @param {?proto.protos.opts.BatchLogoutOptions|undefined} value
 * @return {!proto.protos.opts.BatchOptions} returns this
*/
proto.protos.opts.BatchOptions.prototype.setLogout = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchOptions} returns this
 */
proto.protos.opts.BatchOptions.prototype.clearLogout = function() {
  return this.setLogout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchOptions.prototype.hasLogout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BatchListOptions list = 3;
 * @return {?proto.protos.opts.BatchListOptions}
 */
proto.protos.opts.BatchOptions.prototype.getList = function() {
  return /** @type{?proto.protos.opts.BatchListOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchListOptions, 3));
};


/**
 * @param {?proto.protos.opts.BatchListOptions|undefined} value
 * @return {!proto.protos.opts.BatchOptions} returns this
*/
proto.protos.opts.BatchOptions.prototype.setList = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchOptions} returns this
 */
proto.protos.opts.BatchOptions.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchOptions.prototype.hasList = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BatchCreateOptions create = 4;
 * @return {?proto.protos.opts.BatchCreateOptions}
 */
proto.protos.opts.BatchOptions.prototype.getCreate = function() {
  return /** @type{?proto.protos.opts.BatchCreateOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchCreateOptions, 4));
};


/**
 * @param {?proto.protos.opts.BatchCreateOptions|undefined} value
 * @return {!proto.protos.opts.BatchOptions} returns this
*/
proto.protos.opts.BatchOptions.prototype.setCreate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchOptions} returns this
 */
proto.protos.opts.BatchOptions.prototype.clearCreate = function() {
  return this.setCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchOptions.prototype.hasCreate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BatchSearchOptions search = 5;
 * @return {?proto.protos.opts.BatchSearchOptions}
 */
proto.protos.opts.BatchOptions.prototype.getSearch = function() {
  return /** @type{?proto.protos.opts.BatchSearchOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchSearchOptions, 5));
};


/**
 * @param {?proto.protos.opts.BatchSearchOptions|undefined} value
 * @return {!proto.protos.opts.BatchOptions} returns this
*/
proto.protos.opts.BatchOptions.prototype.setSearch = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchOptions} returns this
 */
proto.protos.opts.BatchOptions.prototype.clearSearch = function() {
  return this.setSearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchOptions.prototype.hasSearch = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BatchArchiveOptions archive = 6;
 * @return {?proto.protos.opts.BatchArchiveOptions}
 */
proto.protos.opts.BatchOptions.prototype.getArchive = function() {
  return /** @type{?proto.protos.opts.BatchArchiveOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchArchiveOptions, 6));
};


/**
 * @param {?proto.protos.opts.BatchArchiveOptions|undefined} value
 * @return {!proto.protos.opts.BatchOptions} returns this
*/
proto.protos.opts.BatchOptions.prototype.setArchive = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchOptions} returns this
 */
proto.protos.opts.BatchOptions.prototype.clearArchive = function() {
  return this.setArchive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchOptions.prototype.hasArchive = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchLoginOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchLoginOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchLoginOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchLoginOptions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchLoginOptions}
 */
proto.protos.opts.BatchLoginOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchLoginOptions;
  return proto.protos.opts.BatchLoginOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchLoginOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchLoginOptions}
 */
proto.protos.opts.BatchLoginOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchLoginOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchLoginOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchLoginOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchLoginOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchLogoutOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchLogoutOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchLogoutOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchLogoutOptions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchLogoutOptions}
 */
proto.protos.opts.BatchLogoutOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchLogoutOptions;
  return proto.protos.opts.BatchLogoutOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchLogoutOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchLogoutOptions}
 */
proto.protos.opts.BatchLogoutOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchLogoutOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchLogoutOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchLogoutOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchLogoutOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchArchiveOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchArchiveOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchArchiveOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchArchiveOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    replay: (f = msg.getReplay()) && proto.protos.opts.BatchArchiveReplayOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchArchiveOptions}
 */
proto.protos.opts.BatchArchiveOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchArchiveOptions;
  return proto.protos.opts.BatchArchiveOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchArchiveOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchArchiveOptions}
 */
proto.protos.opts.BatchArchiveOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.opts.BatchArchiveReplayOptions;
      reader.readMessage(value,proto.protos.opts.BatchArchiveReplayOptions.deserializeBinaryFromReader);
      msg.setReplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchArchiveOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchArchiveOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchArchiveOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchArchiveOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.opts.BatchArchiveReplayOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional BatchArchiveReplayOptions replay = 1;
 * @return {?proto.protos.opts.BatchArchiveReplayOptions}
 */
proto.protos.opts.BatchArchiveOptions.prototype.getReplay = function() {
  return /** @type{?proto.protos.opts.BatchArchiveReplayOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchArchiveReplayOptions, 1));
};


/**
 * @param {?proto.protos.opts.BatchArchiveReplayOptions|undefined} value
 * @return {!proto.protos.opts.BatchArchiveOptions} returns this
*/
proto.protos.opts.BatchArchiveOptions.prototype.setReplay = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchArchiveOptions} returns this
 */
proto.protos.opts.BatchArchiveOptions.prototype.clearReplay = function() {
  return this.setReplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchArchiveOptions.prototype.hasReplay = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchArchiveReplayOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchArchiveReplayOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchArchiveReplayOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchArchiveReplayOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    replayId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchArchiveReplayOptions}
 */
proto.protos.opts.BatchArchiveReplayOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchArchiveReplayOptions;
  return proto.protos.opts.BatchArchiveReplayOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchArchiveReplayOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchArchiveReplayOptions}
 */
proto.protos.opts.BatchArchiveReplayOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplayId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchArchiveReplayOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchArchiveReplayOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchArchiveReplayOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchArchiveReplayOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplayId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string replay_id = 1;
 * @return {string}
 */
proto.protos.opts.BatchArchiveReplayOptions.prototype.getReplayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchArchiveReplayOptions} returns this
 */
proto.protos.opts.BatchArchiveReplayOptions.prototype.setReplayId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchListOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchListOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchListOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchListOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collection: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    destination: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    replay: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    schema: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchListOptions}
 */
proto.protos.opts.BatchListOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchListOptions;
  return proto.protos.opts.BatchListOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchListOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchListOptions}
 */
proto.protos.opts.BatchListOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protos.opts.BatchOutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDestination(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplay(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchListOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchListOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchListOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchListOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDestination();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getReplay();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSchema();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional BatchOutputType output_type = 1;
 * @return {!proto.protos.opts.BatchOutputType}
 */
proto.protos.opts.BatchListOptions.prototype.getOutputType = function() {
  return /** @type {!proto.protos.opts.BatchOutputType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.protos.opts.BatchOutputType} value
 * @return {!proto.protos.opts.BatchListOptions} returns this
 */
proto.protos.opts.BatchListOptions.prototype.setOutputType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool collection = 2;
 * @return {boolean}
 */
proto.protos.opts.BatchListOptions.prototype.getCollection = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.opts.BatchListOptions} returns this
 */
proto.protos.opts.BatchListOptions.prototype.setCollection = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool destination = 3;
 * @return {boolean}
 */
proto.protos.opts.BatchListOptions.prototype.getDestination = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.opts.BatchListOptions} returns this
 */
proto.protos.opts.BatchListOptions.prototype.setDestination = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool replay = 4;
 * @return {boolean}
 */
proto.protos.opts.BatchListOptions.prototype.getReplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.opts.BatchListOptions} returns this
 */
proto.protos.opts.BatchListOptions.prototype.setReplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool schema = 5;
 * @return {boolean}
 */
proto.protos.opts.BatchListOptions.prototype.getSchema = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.opts.BatchListOptions} returns this
 */
proto.protos.opts.BatchListOptions.prototype.setSchema = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchCreateOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchCreateOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchCreateOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.protos.opts.BatchCreateCollectionOptions.toObject(includeInstance, f),
    replay: (f = msg.getReplay()) && proto.protos.opts.BatchCreateReplayOptions.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.protos.opts.BatchCreateDestinationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchCreateOptions}
 */
proto.protos.opts.BatchCreateOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchCreateOptions;
  return proto.protos.opts.BatchCreateOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchCreateOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchCreateOptions}
 */
proto.protos.opts.BatchCreateOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.opts.BatchCreateCollectionOptions;
      reader.readMessage(value,proto.protos.opts.BatchCreateCollectionOptions.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = new proto.protos.opts.BatchCreateReplayOptions;
      reader.readMessage(value,proto.protos.opts.BatchCreateReplayOptions.deserializeBinaryFromReader);
      msg.setReplay(value);
      break;
    case 3:
      var value = new proto.protos.opts.BatchCreateDestinationOptions;
      reader.readMessage(value,proto.protos.opts.BatchCreateDestinationOptions.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchCreateOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchCreateOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchCreateOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.opts.BatchCreateCollectionOptions.serializeBinaryToWriter
    );
  }
  f = message.getReplay();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.opts.BatchCreateReplayOptions.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.opts.BatchCreateDestinationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional BatchCreateCollectionOptions collection = 1;
 * @return {?proto.protos.opts.BatchCreateCollectionOptions}
 */
proto.protos.opts.BatchCreateOptions.prototype.getCollection = function() {
  return /** @type{?proto.protos.opts.BatchCreateCollectionOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchCreateCollectionOptions, 1));
};


/**
 * @param {?proto.protos.opts.BatchCreateCollectionOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateOptions} returns this
*/
proto.protos.opts.BatchCreateOptions.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateOptions} returns this
 */
proto.protos.opts.BatchCreateOptions.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateOptions.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BatchCreateReplayOptions replay = 2;
 * @return {?proto.protos.opts.BatchCreateReplayOptions}
 */
proto.protos.opts.BatchCreateOptions.prototype.getReplay = function() {
  return /** @type{?proto.protos.opts.BatchCreateReplayOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchCreateReplayOptions, 2));
};


/**
 * @param {?proto.protos.opts.BatchCreateReplayOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateOptions} returns this
*/
proto.protos.opts.BatchCreateOptions.prototype.setReplay = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateOptions} returns this
 */
proto.protos.opts.BatchCreateOptions.prototype.clearReplay = function() {
  return this.setReplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateOptions.prototype.hasReplay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BatchCreateDestinationOptions destination = 3;
 * @return {?proto.protos.opts.BatchCreateDestinationOptions}
 */
proto.protos.opts.BatchCreateOptions.prototype.getDestination = function() {
  return /** @type{?proto.protos.opts.BatchCreateDestinationOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.BatchCreateDestinationOptions, 3));
};


/**
 * @param {?proto.protos.opts.BatchCreateDestinationOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateOptions} returns this
*/
proto.protos.opts.BatchCreateOptions.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateOptions} returns this
 */
proto.protos.opts.BatchCreateOptions.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateOptions.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchSearchOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchSearchOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchSearchOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchSearchOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchSearchOptions}
 */
proto.protos.opts.BatchSearchOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchSearchOptions;
  return proto.protos.opts.BatchSearchOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchSearchOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchSearchOptions}
 */
proto.protos.opts.BatchSearchOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchSearchOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchSearchOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchSearchOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchSearchOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.protos.opts.BatchSearchOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchSearchOptions} returns this
 */
proto.protos.opts.BatchSearchOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection_id = 2;
 * @return {string}
 */
proto.protos.opts.BatchSearchOptions.prototype.getCollectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchSearchOptions} returns this
 */
proto.protos.opts.BatchSearchOptions.prototype.setCollectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 page_size = 3;
 * @return {number}
 */
proto.protos.opts.BatchSearchOptions.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.opts.BatchSearchOptions} returns this
 */
proto.protos.opts.BatchSearchOptions.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchCreateCollectionOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchCreateCollectionOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateCollectionOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schemaId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchCreateCollectionOptions}
 */
proto.protos.opts.BatchCreateCollectionOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchCreateCollectionOptions;
  return proto.protos.opts.BatchCreateCollectionOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchCreateCollectionOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchCreateCollectionOptions}
 */
proto.protos.opts.BatchCreateCollectionOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchCreateCollectionOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchCreateCollectionOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateCollectionOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchemaId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateCollectionOptions} returns this
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string schema_id = 2;
 * @return {string}
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.getSchemaId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateCollectionOptions} returns this
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.setSchemaId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string notes = 3;
 * @return {string}
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateCollectionOptions} returns this
 */
proto.protos.opts.BatchCreateCollectionOptions.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchCreateReplayOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchCreateReplayOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateReplayOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    notes: jspb.Message.getFieldWithDefault(msg, 3, ""),
    collectionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    destinationId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    query: jspb.Message.getFieldWithDefault(msg, 6, ""),
    fromTimestamp: jspb.Message.getFieldWithDefault(msg, 7, ""),
    toTimestamp: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchCreateReplayOptions}
 */
proto.protos.opts.BatchCreateReplayOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchCreateReplayOptions;
  return proto.protos.opts.BatchCreateReplayOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchCreateReplayOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchCreateReplayOptions}
 */
proto.protos.opts.BatchCreateReplayOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.protos.opts.BatchReplayType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setToTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchCreateReplayOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchCreateReplayOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateReplayOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCollectionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDestinationId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFromTimestamp();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getToTimestamp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BatchReplayType type = 2;
 * @return {!proto.protos.opts.BatchReplayType}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getType = function() {
  return /** @type {!proto.protos.opts.BatchReplayType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.protos.opts.BatchReplayType} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string notes = 3;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string collection_id = 4;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getCollectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setCollectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string destination_id = 5;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getDestinationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setDestinationId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string query = 6;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string from_timestamp = 7;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getFromTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setFromTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string to_timestamp = 8;
 * @return {string}
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.getToTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateReplayOptions} returns this
 */
proto.protos.opts.BatchCreateReplayOptions.prototype.setToTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.BatchCreateDestinationOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.BatchCreateDestinationOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateDestinationOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kafka: (f = msg.getKafka()) && opts_write_pb.WriteGroupKafkaOptions.toObject(includeInstance, f),
    rabbit: (f = msg.getRabbit()) && opts_write_pb.WriteGroupRabbitOptions.toObject(includeInstance, f),
    kubemqQueue: (f = msg.getKubemqQueue()) && opts_write_pb.WriteGroupKubeMQQueueOptions.toObject(includeInstance, f),
    awssqs: (f = msg.getAwssqs()) && opts_write_pb.WriteGroupAWSSQSOptions.toObject(includeInstance, f),
    http: (f = msg.getHttp()) && proto.protos.opts.HTTPDestination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions}
 */
proto.protos.opts.BatchCreateDestinationOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.BatchCreateDestinationOptions;
  return proto.protos.opts.BatchCreateDestinationOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.BatchCreateDestinationOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions}
 */
proto.protos.opts.BatchCreateDestinationOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 100:
      var value = new opts_write_pb.WriteGroupKafkaOptions;
      reader.readMessage(value,opts_write_pb.WriteGroupKafkaOptions.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    case 101:
      var value = new opts_write_pb.WriteGroupRabbitOptions;
      reader.readMessage(value,opts_write_pb.WriteGroupRabbitOptions.deserializeBinaryFromReader);
      msg.setRabbit(value);
      break;
    case 102:
      var value = new opts_write_pb.WriteGroupKubeMQQueueOptions;
      reader.readMessage(value,opts_write_pb.WriteGroupKubeMQQueueOptions.deserializeBinaryFromReader);
      msg.setKubemqQueue(value);
      break;
    case 103:
      var value = new opts_write_pb.WriteGroupAWSSQSOptions;
      reader.readMessage(value,opts_write_pb.WriteGroupAWSSQSOptions.deserializeBinaryFromReader);
      msg.setAwssqs(value);
      break;
    case 104:
      var value = new proto.protos.opts.HTTPDestination;
      reader.readMessage(value,proto.protos.opts.HTTPDestination.deserializeBinaryFromReader);
      msg.setHttp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.BatchCreateDestinationOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.BatchCreateDestinationOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.BatchCreateDestinationOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      opts_write_pb.WriteGroupKafkaOptions.serializeBinaryToWriter
    );
  }
  f = message.getRabbit();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      opts_write_pb.WriteGroupRabbitOptions.serializeBinaryToWriter
    );
  }
  f = message.getKubemqQueue();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      opts_write_pb.WriteGroupKubeMQQueueOptions.serializeBinaryToWriter
    );
  }
  f = message.getAwssqs();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      opts_write_pb.WriteGroupAWSSQSOptions.serializeBinaryToWriter
    );
  }
  f = message.getHttp();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.protos.opts.HTTPDestination.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string notes = 2;
 * @return {string}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.setNotes = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional WriteGroupKafkaOptions kafka = 100;
 * @return {?proto.protos.opts.WriteGroupKafkaOptions}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getKafka = function() {
  return /** @type{?proto.protos.opts.WriteGroupKafkaOptions} */ (
    jspb.Message.getWrapperField(this, opts_write_pb.WriteGroupKafkaOptions, 100));
};


/**
 * @param {?proto.protos.opts.WriteGroupKafkaOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
*/
proto.protos.opts.BatchCreateDestinationOptions.prototype.setKafka = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional WriteGroupRabbitOptions rabbit = 101;
 * @return {?proto.protos.opts.WriteGroupRabbitOptions}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getRabbit = function() {
  return /** @type{?proto.protos.opts.WriteGroupRabbitOptions} */ (
    jspb.Message.getWrapperField(this, opts_write_pb.WriteGroupRabbitOptions, 101));
};


/**
 * @param {?proto.protos.opts.WriteGroupRabbitOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
*/
proto.protos.opts.BatchCreateDestinationOptions.prototype.setRabbit = function(value) {
  return jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.clearRabbit = function() {
  return this.setRabbit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.hasRabbit = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional WriteGroupKubeMQQueueOptions kubemq_queue = 102;
 * @return {?proto.protos.opts.WriteGroupKubeMQQueueOptions}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getKubemqQueue = function() {
  return /** @type{?proto.protos.opts.WriteGroupKubeMQQueueOptions} */ (
    jspb.Message.getWrapperField(this, opts_write_pb.WriteGroupKubeMQQueueOptions, 102));
};


/**
 * @param {?proto.protos.opts.WriteGroupKubeMQQueueOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
*/
proto.protos.opts.BatchCreateDestinationOptions.prototype.setKubemqQueue = function(value) {
  return jspb.Message.setWrapperField(this, 102, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.clearKubemqQueue = function() {
  return this.setKubemqQueue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.hasKubemqQueue = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional WriteGroupAWSSQSOptions awssqs = 103;
 * @return {?proto.protos.opts.WriteGroupAWSSQSOptions}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getAwssqs = function() {
  return /** @type{?proto.protos.opts.WriteGroupAWSSQSOptions} */ (
    jspb.Message.getWrapperField(this, opts_write_pb.WriteGroupAWSSQSOptions, 103));
};


/**
 * @param {?proto.protos.opts.WriteGroupAWSSQSOptions|undefined} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
*/
proto.protos.opts.BatchCreateDestinationOptions.prototype.setAwssqs = function(value) {
  return jspb.Message.setWrapperField(this, 103, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.clearAwssqs = function() {
  return this.setAwssqs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.hasAwssqs = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional HTTPDestination http = 104;
 * @return {?proto.protos.opts.HTTPDestination}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.getHttp = function() {
  return /** @type{?proto.protos.opts.HTTPDestination} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.HTTPDestination, 104));
};


/**
 * @param {?proto.protos.opts.HTTPDestination|undefined} value
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
*/
proto.protos.opts.BatchCreateDestinationOptions.prototype.setHttp = function(value) {
  return jspb.Message.setWrapperField(this, 104, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.BatchCreateDestinationOptions} returns this
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.clearHttp = function() {
  return this.setHttp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.BatchCreateDestinationOptions.prototype.hasHttp = function() {
  return jspb.Message.getField(this, 104) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.HTTPDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.HTTPDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.HTTPDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.HTTPDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.HTTPDestination}
 */
proto.protos.opts.HTTPDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.HTTPDestination;
  return proto.protos.opts.HTTPDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.HTTPDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.HTTPDestination}
 */
proto.protos.opts.HTTPDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.HTTPDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.HTTPDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.HTTPDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.HTTPDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.protos.opts.HTTPDestination.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.opts.HTTPDestination} returns this
 */
proto.protos.opts.HTTPDestination.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> headers = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.opts.HTTPDestination.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.opts.HTTPDestination} returns this
 */
proto.protos.opts.HTTPDestination.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.protos.opts.BatchOutputType = {
  TABLE: 0,
  JSON: 1
};

/**
 * @enum {number}
 */
proto.protos.opts.BatchReplayType = {
  SINGLE: 0,
  CONTINUOUS: 1
};

goog.object.extend(exports, proto.protos.opts);
