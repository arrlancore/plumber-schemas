// source: opts/read.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var args_activemq_pb = require('../args/activemq_pb.js');
goog.object.extend(proto, args_activemq_pb);
var args_azure$service$bus_pb = require('../args/azure-service-bus_pb.js');
goog.object.extend(proto, args_azure$service$bus_pb);
var args_azure$event$hub_pb = require('../args/azure-event-hub_pb.js');
goog.object.extend(proto, args_azure$event$hub_pb);
var args_aws$sqs_pb = require('../args/aws-sqs_pb.js');
goog.object.extend(proto, args_aws$sqs_pb);
var args_gcp$pubsub_pb = require('../args/gcp-pubsub_pb.js');
goog.object.extend(proto, args_gcp$pubsub_pb);
var args_kafka_pb = require('../args/kafka_pb.js');
goog.object.extend(proto, args_kafka_pb);
var args_kubemq$queue_pb = require('../args/kubemq-queue_pb.js');
goog.object.extend(proto, args_kubemq$queue_pb);
var args_mongo_pb = require('../args/mongo_pb.js');
goog.object.extend(proto, args_mongo_pb);
var args_mqtt_pb = require('../args/mqtt_pb.js');
goog.object.extend(proto, args_mqtt_pb);
var args_nats_pb = require('../args/nats_pb.js');
goog.object.extend(proto, args_nats_pb);
var args_nats$streaming_pb = require('../args/nats-streaming_pb.js');
goog.object.extend(proto, args_nats$streaming_pb);
var args_nsq_pb = require('../args/nsq_pb.js');
goog.object.extend(proto, args_nsq_pb);
var args_postgres_pb = require('../args/postgres_pb.js');
goog.object.extend(proto, args_postgres_pb);
var args_pulsar_pb = require('../args/pulsar_pb.js');
goog.object.extend(proto, args_pulsar_pb);
var args_rabbit_pb = require('../args/rabbit_pb.js');
goog.object.extend(proto, args_rabbit_pb);
var args_rabbit$streams_pb = require('../args/rabbit-streams_pb.js');
goog.object.extend(proto, args_rabbit$streams_pb);
var args_redis$pubsub_pb = require('../args/redis-pubsub_pb.js');
goog.object.extend(proto, args_redis$pubsub_pb);
var args_redis$streams_pb = require('../args/redis-streams_pb.js');
goog.object.extend(proto, args_redis$streams_pb);
goog.exportSymbol('proto.protos.opts.Read', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsAWSSQS', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsActiveMQ', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsAzureEventHub', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsAzureServiceBus', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsGCPPubSub', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsKafka', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsKubeMQQueue', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsMQTT', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsMongo', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsNSQ', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsNats', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsNatsStreaming', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsPostgres', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsPulsar', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsRabbit', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsRabbitStreams', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsRedisPubSub', null, global);
goog.exportSymbol('proto.protos.opts.ReadOptsRedisStreams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.Read.displayName = 'proto.protos.opts.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsKafka = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsKafka, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsKafka.displayName = 'proto.protos.opts.ReadOptsKafka';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsActiveMQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsActiveMQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsActiveMQ.displayName = 'proto.protos.opts.ReadOptsActiveMQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsAWSSQS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsAWSSQS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsAWSSQS.displayName = 'proto.protos.opts.ReadOptsAWSSQS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsMongo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsMongo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsMongo.displayName = 'proto.protos.opts.ReadOptsMongo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsNats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsNats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsNats.displayName = 'proto.protos.opts.ReadOptsNats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsNatsStreaming = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsNatsStreaming, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsNatsStreaming.displayName = 'proto.protos.opts.ReadOptsNatsStreaming';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsNSQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsNSQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsNSQ.displayName = 'proto.protos.opts.ReadOptsNSQ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsPostgres = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsPostgres, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsPostgres.displayName = 'proto.protos.opts.ReadOptsPostgres';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsPulsar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsPulsar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsPulsar.displayName = 'proto.protos.opts.ReadOptsPulsar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsRabbit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsRabbit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsRabbit.displayName = 'proto.protos.opts.ReadOptsRabbit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsRabbitStreams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsRabbitStreams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsRabbitStreams.displayName = 'proto.protos.opts.ReadOptsRabbitStreams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsRedisPubSub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsRedisPubSub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsRedisPubSub.displayName = 'proto.protos.opts.ReadOptsRedisPubSub';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsRedisStreams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsRedisStreams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsRedisStreams.displayName = 'proto.protos.opts.ReadOptsRedisStreams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsAzureEventHub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsAzureEventHub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsAzureEventHub.displayName = 'proto.protos.opts.ReadOptsAzureEventHub';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsAzureServiceBus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsAzureServiceBus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsAzureServiceBus.displayName = 'proto.protos.opts.ReadOptsAzureServiceBus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsMQTT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsMQTT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsMQTT.displayName = 'proto.protos.opts.ReadOptsMQTT';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsGCPPubSub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsGCPPubSub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsGCPPubSub.displayName = 'proto.protos.opts.ReadOptsGCPPubSub';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.opts.ReadOptsKubeMQQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.opts.ReadOptsKubeMQQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.opts.ReadOptsKubeMQQueue.displayName = 'proto.protos.opts.ReadOptsKubeMQQueue';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.Read.toObject = function(includeInstance, msg) {
  var f, obj = {
    kafka: (f = msg.getKafka()) && proto.protos.opts.ReadOptsKafka.toObject(includeInstance, f),
    activemq: (f = msg.getActivemq()) && proto.protos.opts.ReadOptsActiveMQ.toObject(includeInstance, f),
    awssqs: (f = msg.getAwssqs()) && proto.protos.opts.ReadOptsAWSSQS.toObject(includeInstance, f),
    mongo: (f = msg.getMongo()) && proto.protos.opts.ReadOptsMongo.toObject(includeInstance, f),
    nats: (f = msg.getNats()) && proto.protos.opts.ReadOptsNats.toObject(includeInstance, f),
    natsStreaming: (f = msg.getNatsStreaming()) && proto.protos.opts.ReadOptsNatsStreaming.toObject(includeInstance, f),
    nsq: (f = msg.getNsq()) && proto.protos.opts.ReadOptsNSQ.toObject(includeInstance, f),
    pulsar: (f = msg.getPulsar()) && proto.protos.opts.ReadOptsPulsar.toObject(includeInstance, f),
    rabbit: (f = msg.getRabbit()) && proto.protos.opts.ReadOptsRabbit.toObject(includeInstance, f),
    rabbitStreams: (f = msg.getRabbitStreams()) && proto.protos.opts.ReadOptsRabbitStreams.toObject(includeInstance, f),
    mqtt: (f = msg.getMqtt()) && proto.protos.opts.ReadOptsMQTT.toObject(includeInstance, f),
    azureServiceBus: (f = msg.getAzureServiceBus()) && proto.protos.opts.ReadOptsAzureServiceBus.toObject(includeInstance, f),
    azureEventHub: (f = msg.getAzureEventHub()) && proto.protos.opts.ReadOptsAzureEventHub.toObject(includeInstance, f),
    gcpPubsub: (f = msg.getGcpPubsub()) && proto.protos.opts.ReadOptsGCPPubSub.toObject(includeInstance, f),
    kubemqQueue: (f = msg.getKubemqQueue()) && proto.protos.opts.ReadOptsKubeMQQueue.toObject(includeInstance, f),
    redisPubsub: (f = msg.getRedisPubsub()) && proto.protos.opts.ReadOptsRedisPubSub.toObject(includeInstance, f),
    redisStreams: (f = msg.getRedisStreams()) && proto.protos.opts.ReadOptsRedisStreams.toObject(includeInstance, f),
    postgres: (f = msg.getPostgres()) && proto.protos.opts.ReadOptsPostgres.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.Read}
 */
proto.protos.opts.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.Read;
  return proto.protos.opts.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.Read}
 */
proto.protos.opts.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.protos.opts.ReadOptsKafka;
      reader.readMessage(value,proto.protos.opts.ReadOptsKafka.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    case 101:
      var value = new proto.protos.opts.ReadOptsActiveMQ;
      reader.readMessage(value,proto.protos.opts.ReadOptsActiveMQ.deserializeBinaryFromReader);
      msg.setActivemq(value);
      break;
    case 102:
      var value = new proto.protos.opts.ReadOptsAWSSQS;
      reader.readMessage(value,proto.protos.opts.ReadOptsAWSSQS.deserializeBinaryFromReader);
      msg.setAwssqs(value);
      break;
    case 103:
      var value = new proto.protos.opts.ReadOptsMongo;
      reader.readMessage(value,proto.protos.opts.ReadOptsMongo.deserializeBinaryFromReader);
      msg.setMongo(value);
      break;
    case 104:
      var value = new proto.protos.opts.ReadOptsNats;
      reader.readMessage(value,proto.protos.opts.ReadOptsNats.deserializeBinaryFromReader);
      msg.setNats(value);
      break;
    case 105:
      var value = new proto.protos.opts.ReadOptsNatsStreaming;
      reader.readMessage(value,proto.protos.opts.ReadOptsNatsStreaming.deserializeBinaryFromReader);
      msg.setNatsStreaming(value);
      break;
    case 106:
      var value = new proto.protos.opts.ReadOptsNSQ;
      reader.readMessage(value,proto.protos.opts.ReadOptsNSQ.deserializeBinaryFromReader);
      msg.setNsq(value);
      break;
    case 107:
      var value = new proto.protos.opts.ReadOptsPulsar;
      reader.readMessage(value,proto.protos.opts.ReadOptsPulsar.deserializeBinaryFromReader);
      msg.setPulsar(value);
      break;
    case 108:
      var value = new proto.protos.opts.ReadOptsRabbit;
      reader.readMessage(value,proto.protos.opts.ReadOptsRabbit.deserializeBinaryFromReader);
      msg.setRabbit(value);
      break;
    case 109:
      var value = new proto.protos.opts.ReadOptsRabbitStreams;
      reader.readMessage(value,proto.protos.opts.ReadOptsRabbitStreams.deserializeBinaryFromReader);
      msg.setRabbitStreams(value);
      break;
    case 110:
      var value = new proto.protos.opts.ReadOptsMQTT;
      reader.readMessage(value,proto.protos.opts.ReadOptsMQTT.deserializeBinaryFromReader);
      msg.setMqtt(value);
      break;
    case 111:
      var value = new proto.protos.opts.ReadOptsAzureServiceBus;
      reader.readMessage(value,proto.protos.opts.ReadOptsAzureServiceBus.deserializeBinaryFromReader);
      msg.setAzureServiceBus(value);
      break;
    case 112:
      var value = new proto.protos.opts.ReadOptsAzureEventHub;
      reader.readMessage(value,proto.protos.opts.ReadOptsAzureEventHub.deserializeBinaryFromReader);
      msg.setAzureEventHub(value);
      break;
    case 113:
      var value = new proto.protos.opts.ReadOptsGCPPubSub;
      reader.readMessage(value,proto.protos.opts.ReadOptsGCPPubSub.deserializeBinaryFromReader);
      msg.setGcpPubsub(value);
      break;
    case 114:
      var value = new proto.protos.opts.ReadOptsKubeMQQueue;
      reader.readMessage(value,proto.protos.opts.ReadOptsKubeMQQueue.deserializeBinaryFromReader);
      msg.setKubemqQueue(value);
      break;
    case 115:
      var value = new proto.protos.opts.ReadOptsRedisPubSub;
      reader.readMessage(value,proto.protos.opts.ReadOptsRedisPubSub.deserializeBinaryFromReader);
      msg.setRedisPubsub(value);
      break;
    case 116:
      var value = new proto.protos.opts.ReadOptsRedisStreams;
      reader.readMessage(value,proto.protos.opts.ReadOptsRedisStreams.deserializeBinaryFromReader);
      msg.setRedisStreams(value);
      break;
    case 117:
      var value = new proto.protos.opts.ReadOptsPostgres;
      reader.readMessage(value,proto.protos.opts.ReadOptsPostgres.deserializeBinaryFromReader);
      msg.setPostgres(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.protos.opts.ReadOptsKafka.serializeBinaryToWriter
    );
  }
  f = message.getActivemq();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.protos.opts.ReadOptsActiveMQ.serializeBinaryToWriter
    );
  }
  f = message.getAwssqs();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.protos.opts.ReadOptsAWSSQS.serializeBinaryToWriter
    );
  }
  f = message.getMongo();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.protos.opts.ReadOptsMongo.serializeBinaryToWriter
    );
  }
  f = message.getNats();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.protos.opts.ReadOptsNats.serializeBinaryToWriter
    );
  }
  f = message.getNatsStreaming();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.protos.opts.ReadOptsNatsStreaming.serializeBinaryToWriter
    );
  }
  f = message.getNsq();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.protos.opts.ReadOptsNSQ.serializeBinaryToWriter
    );
  }
  f = message.getPulsar();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.protos.opts.ReadOptsPulsar.serializeBinaryToWriter
    );
  }
  f = message.getRabbit();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      proto.protos.opts.ReadOptsRabbit.serializeBinaryToWriter
    );
  }
  f = message.getRabbitStreams();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      proto.protos.opts.ReadOptsRabbitStreams.serializeBinaryToWriter
    );
  }
  f = message.getMqtt();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.protos.opts.ReadOptsMQTT.serializeBinaryToWriter
    );
  }
  f = message.getAzureServiceBus();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.protos.opts.ReadOptsAzureServiceBus.serializeBinaryToWriter
    );
  }
  f = message.getAzureEventHub();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.protos.opts.ReadOptsAzureEventHub.serializeBinaryToWriter
    );
  }
  f = message.getGcpPubsub();
  if (f != null) {
    writer.writeMessage(
      113,
      f,
      proto.protos.opts.ReadOptsGCPPubSub.serializeBinaryToWriter
    );
  }
  f = message.getKubemqQueue();
  if (f != null) {
    writer.writeMessage(
      114,
      f,
      proto.protos.opts.ReadOptsKubeMQQueue.serializeBinaryToWriter
    );
  }
  f = message.getRedisPubsub();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      proto.protos.opts.ReadOptsRedisPubSub.serializeBinaryToWriter
    );
  }
  f = message.getRedisStreams();
  if (f != null) {
    writer.writeMessage(
      116,
      f,
      proto.protos.opts.ReadOptsRedisStreams.serializeBinaryToWriter
    );
  }
  f = message.getPostgres();
  if (f != null) {
    writer.writeMessage(
      117,
      f,
      proto.protos.opts.ReadOptsPostgres.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReadOptsKafka kafka = 100;
 * @return {?proto.protos.opts.ReadOptsKafka}
 */
proto.protos.opts.Read.prototype.getKafka = function() {
  return /** @type{?proto.protos.opts.ReadOptsKafka} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsKafka, 100));
};


/**
 * @param {?proto.protos.opts.ReadOptsKafka|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setKafka = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional ReadOptsActiveMQ activemq = 101;
 * @return {?proto.protos.opts.ReadOptsActiveMQ}
 */
proto.protos.opts.Read.prototype.getActivemq = function() {
  return /** @type{?proto.protos.opts.ReadOptsActiveMQ} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsActiveMQ, 101));
};


/**
 * @param {?proto.protos.opts.ReadOptsActiveMQ|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setActivemq = function(value) {
  return jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearActivemq = function() {
  return this.setActivemq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasActivemq = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ReadOptsAWSSQS awssqs = 102;
 * @return {?proto.protos.opts.ReadOptsAWSSQS}
 */
proto.protos.opts.Read.prototype.getAwssqs = function() {
  return /** @type{?proto.protos.opts.ReadOptsAWSSQS} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsAWSSQS, 102));
};


/**
 * @param {?proto.protos.opts.ReadOptsAWSSQS|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setAwssqs = function(value) {
  return jspb.Message.setWrapperField(this, 102, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearAwssqs = function() {
  return this.setAwssqs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasAwssqs = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional ReadOptsMongo mongo = 103;
 * @return {?proto.protos.opts.ReadOptsMongo}
 */
proto.protos.opts.Read.prototype.getMongo = function() {
  return /** @type{?proto.protos.opts.ReadOptsMongo} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsMongo, 103));
};


/**
 * @param {?proto.protos.opts.ReadOptsMongo|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setMongo = function(value) {
  return jspb.Message.setWrapperField(this, 103, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearMongo = function() {
  return this.setMongo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasMongo = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional ReadOptsNats nats = 104;
 * @return {?proto.protos.opts.ReadOptsNats}
 */
proto.protos.opts.Read.prototype.getNats = function() {
  return /** @type{?proto.protos.opts.ReadOptsNats} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsNats, 104));
};


/**
 * @param {?proto.protos.opts.ReadOptsNats|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setNats = function(value) {
  return jspb.Message.setWrapperField(this, 104, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearNats = function() {
  return this.setNats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasNats = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional ReadOptsNatsStreaming nats_streaming = 105;
 * @return {?proto.protos.opts.ReadOptsNatsStreaming}
 */
proto.protos.opts.Read.prototype.getNatsStreaming = function() {
  return /** @type{?proto.protos.opts.ReadOptsNatsStreaming} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsNatsStreaming, 105));
};


/**
 * @param {?proto.protos.opts.ReadOptsNatsStreaming|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setNatsStreaming = function(value) {
  return jspb.Message.setWrapperField(this, 105, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearNatsStreaming = function() {
  return this.setNatsStreaming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasNatsStreaming = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional ReadOptsNSQ nsq = 106;
 * @return {?proto.protos.opts.ReadOptsNSQ}
 */
proto.protos.opts.Read.prototype.getNsq = function() {
  return /** @type{?proto.protos.opts.ReadOptsNSQ} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsNSQ, 106));
};


/**
 * @param {?proto.protos.opts.ReadOptsNSQ|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setNsq = function(value) {
  return jspb.Message.setWrapperField(this, 106, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearNsq = function() {
  return this.setNsq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasNsq = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional ReadOptsPulsar pulsar = 107;
 * @return {?proto.protos.opts.ReadOptsPulsar}
 */
proto.protos.opts.Read.prototype.getPulsar = function() {
  return /** @type{?proto.protos.opts.ReadOptsPulsar} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsPulsar, 107));
};


/**
 * @param {?proto.protos.opts.ReadOptsPulsar|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setPulsar = function(value) {
  return jspb.Message.setWrapperField(this, 107, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearPulsar = function() {
  return this.setPulsar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasPulsar = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional ReadOptsRabbit rabbit = 108;
 * @return {?proto.protos.opts.ReadOptsRabbit}
 */
proto.protos.opts.Read.prototype.getRabbit = function() {
  return /** @type{?proto.protos.opts.ReadOptsRabbit} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsRabbit, 108));
};


/**
 * @param {?proto.protos.opts.ReadOptsRabbit|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setRabbit = function(value) {
  return jspb.Message.setWrapperField(this, 108, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearRabbit = function() {
  return this.setRabbit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasRabbit = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional ReadOptsRabbitStreams rabbit_streams = 109;
 * @return {?proto.protos.opts.ReadOptsRabbitStreams}
 */
proto.protos.opts.Read.prototype.getRabbitStreams = function() {
  return /** @type{?proto.protos.opts.ReadOptsRabbitStreams} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsRabbitStreams, 109));
};


/**
 * @param {?proto.protos.opts.ReadOptsRabbitStreams|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setRabbitStreams = function(value) {
  return jspb.Message.setWrapperField(this, 109, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearRabbitStreams = function() {
  return this.setRabbitStreams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasRabbitStreams = function() {
  return jspb.Message.getField(this, 109) != null;
};


/**
 * optional ReadOptsMQTT mqtt = 110;
 * @return {?proto.protos.opts.ReadOptsMQTT}
 */
proto.protos.opts.Read.prototype.getMqtt = function() {
  return /** @type{?proto.protos.opts.ReadOptsMQTT} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsMQTT, 110));
};


/**
 * @param {?proto.protos.opts.ReadOptsMQTT|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setMqtt = function(value) {
  return jspb.Message.setWrapperField(this, 110, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearMqtt = function() {
  return this.setMqtt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasMqtt = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional ReadOptsAzureServiceBus azure_service_bus = 111;
 * @return {?proto.protos.opts.ReadOptsAzureServiceBus}
 */
proto.protos.opts.Read.prototype.getAzureServiceBus = function() {
  return /** @type{?proto.protos.opts.ReadOptsAzureServiceBus} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsAzureServiceBus, 111));
};


/**
 * @param {?proto.protos.opts.ReadOptsAzureServiceBus|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setAzureServiceBus = function(value) {
  return jspb.Message.setWrapperField(this, 111, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearAzureServiceBus = function() {
  return this.setAzureServiceBus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasAzureServiceBus = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional ReadOptsAzureEventHub azure_event_hub = 112;
 * @return {?proto.protos.opts.ReadOptsAzureEventHub}
 */
proto.protos.opts.Read.prototype.getAzureEventHub = function() {
  return /** @type{?proto.protos.opts.ReadOptsAzureEventHub} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsAzureEventHub, 112));
};


/**
 * @param {?proto.protos.opts.ReadOptsAzureEventHub|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setAzureEventHub = function(value) {
  return jspb.Message.setWrapperField(this, 112, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearAzureEventHub = function() {
  return this.setAzureEventHub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasAzureEventHub = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional ReadOptsGCPPubSub gcp_pubsub = 113;
 * @return {?proto.protos.opts.ReadOptsGCPPubSub}
 */
proto.protos.opts.Read.prototype.getGcpPubsub = function() {
  return /** @type{?proto.protos.opts.ReadOptsGCPPubSub} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsGCPPubSub, 113));
};


/**
 * @param {?proto.protos.opts.ReadOptsGCPPubSub|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setGcpPubsub = function(value) {
  return jspb.Message.setWrapperField(this, 113, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearGcpPubsub = function() {
  return this.setGcpPubsub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasGcpPubsub = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional ReadOptsKubeMQQueue kubemq_queue = 114;
 * @return {?proto.protos.opts.ReadOptsKubeMQQueue}
 */
proto.protos.opts.Read.prototype.getKubemqQueue = function() {
  return /** @type{?proto.protos.opts.ReadOptsKubeMQQueue} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsKubeMQQueue, 114));
};


/**
 * @param {?proto.protos.opts.ReadOptsKubeMQQueue|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setKubemqQueue = function(value) {
  return jspb.Message.setWrapperField(this, 114, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearKubemqQueue = function() {
  return this.setKubemqQueue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasKubemqQueue = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional ReadOptsRedisPubSub redis_pubsub = 115;
 * @return {?proto.protos.opts.ReadOptsRedisPubSub}
 */
proto.protos.opts.Read.prototype.getRedisPubsub = function() {
  return /** @type{?proto.protos.opts.ReadOptsRedisPubSub} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsRedisPubSub, 115));
};


/**
 * @param {?proto.protos.opts.ReadOptsRedisPubSub|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setRedisPubsub = function(value) {
  return jspb.Message.setWrapperField(this, 115, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearRedisPubsub = function() {
  return this.setRedisPubsub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasRedisPubsub = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * optional ReadOptsRedisStreams redis_streams = 116;
 * @return {?proto.protos.opts.ReadOptsRedisStreams}
 */
proto.protos.opts.Read.prototype.getRedisStreams = function() {
  return /** @type{?proto.protos.opts.ReadOptsRedisStreams} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsRedisStreams, 116));
};


/**
 * @param {?proto.protos.opts.ReadOptsRedisStreams|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setRedisStreams = function(value) {
  return jspb.Message.setWrapperField(this, 116, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearRedisStreams = function() {
  return this.setRedisStreams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasRedisStreams = function() {
  return jspb.Message.getField(this, 116) != null;
};


/**
 * optional ReadOptsPostgres postgres = 117;
 * @return {?proto.protos.opts.ReadOptsPostgres}
 */
proto.protos.opts.Read.prototype.getPostgres = function() {
  return /** @type{?proto.protos.opts.ReadOptsPostgres} */ (
    jspb.Message.getWrapperField(this, proto.protos.opts.ReadOptsPostgres, 117));
};


/**
 * @param {?proto.protos.opts.ReadOptsPostgres|undefined} value
 * @return {!proto.protos.opts.Read} returns this
*/
proto.protos.opts.Read.prototype.setPostgres = function(value) {
  return jspb.Message.setWrapperField(this, 117, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.Read} returns this
 */
proto.protos.opts.Read.prototype.clearPostgres = function() {
  return this.setPostgres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.Read.prototype.hasPostgres = function() {
  return jspb.Message.getField(this, 117) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsKafka.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsKafka.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsKafka} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsKafka.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_kafka_pb.KafkaConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_kafka_pb.KafkaReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsKafka}
 */
proto.protos.opts.ReadOptsKafka.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsKafka;
  return proto.protos.opts.ReadOptsKafka.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsKafka} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsKafka}
 */
proto.protos.opts.ReadOptsKafka.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_kafka_pb.KafkaConn;
      reader.readMessage(value,args_kafka_pb.KafkaConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_kafka_pb.KafkaReadArgs;
      reader.readMessage(value,args_kafka_pb.KafkaReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsKafka.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsKafka.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsKafka} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsKafka.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_kafka_pb.KafkaConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_kafka_pb.KafkaReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.KafkaConn _conn = 1;
 * @return {?proto.protos.args.KafkaConn}
 */
proto.protos.opts.ReadOptsKafka.prototype.getConn = function() {
  return /** @type{?proto.protos.args.KafkaConn} */ (
    jspb.Message.getWrapperField(this, args_kafka_pb.KafkaConn, 1));
};


/**
 * @param {?proto.protos.args.KafkaConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsKafka} returns this
*/
proto.protos.opts.ReadOptsKafka.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsKafka} returns this
 */
proto.protos.opts.ReadOptsKafka.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsKafka.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.KafkaReadArgs args = 2;
 * @return {?proto.protos.args.KafkaReadArgs}
 */
proto.protos.opts.ReadOptsKafka.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.KafkaReadArgs} */ (
    jspb.Message.getWrapperField(this, args_kafka_pb.KafkaReadArgs, 2));
};


/**
 * @param {?proto.protos.args.KafkaReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsKafka} returns this
*/
proto.protos.opts.ReadOptsKafka.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsKafka} returns this
 */
proto.protos.opts.ReadOptsKafka.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsKafka.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsActiveMQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsActiveMQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsActiveMQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_activemq_pb.ActiveMQConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_activemq_pb.ActiveMQReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsActiveMQ}
 */
proto.protos.opts.ReadOptsActiveMQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsActiveMQ;
  return proto.protos.opts.ReadOptsActiveMQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsActiveMQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsActiveMQ}
 */
proto.protos.opts.ReadOptsActiveMQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_activemq_pb.ActiveMQConn;
      reader.readMessage(value,args_activemq_pb.ActiveMQConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_activemq_pb.ActiveMQReadArgs;
      reader.readMessage(value,args_activemq_pb.ActiveMQReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsActiveMQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsActiveMQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsActiveMQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_activemq_pb.ActiveMQConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_activemq_pb.ActiveMQReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.ActiveMQConn _conn = 1;
 * @return {?proto.protos.args.ActiveMQConn}
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.getConn = function() {
  return /** @type{?proto.protos.args.ActiveMQConn} */ (
    jspb.Message.getWrapperField(this, args_activemq_pb.ActiveMQConn, 1));
};


/**
 * @param {?proto.protos.args.ActiveMQConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsActiveMQ} returns this
*/
proto.protos.opts.ReadOptsActiveMQ.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsActiveMQ} returns this
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.ActiveMQReadArgs args = 2;
 * @return {?proto.protos.args.ActiveMQReadArgs}
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.ActiveMQReadArgs} */ (
    jspb.Message.getWrapperField(this, args_activemq_pb.ActiveMQReadArgs, 2));
};


/**
 * @param {?proto.protos.args.ActiveMQReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsActiveMQ} returns this
*/
proto.protos.opts.ReadOptsActiveMQ.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsActiveMQ} returns this
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsActiveMQ.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsAWSSQS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsAWSSQS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsAWSSQS.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_aws$sqs_pb.AWSSQSConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_aws$sqs_pb.AWSSQSReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsAWSSQS}
 */
proto.protos.opts.ReadOptsAWSSQS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsAWSSQS;
  return proto.protos.opts.ReadOptsAWSSQS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsAWSSQS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsAWSSQS}
 */
proto.protos.opts.ReadOptsAWSSQS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_aws$sqs_pb.AWSSQSConn;
      reader.readMessage(value,args_aws$sqs_pb.AWSSQSConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_aws$sqs_pb.AWSSQSReadArgs;
      reader.readMessage(value,args_aws$sqs_pb.AWSSQSReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsAWSSQS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsAWSSQS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsAWSSQS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_aws$sqs_pb.AWSSQSConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_aws$sqs_pb.AWSSQSReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.AWSSQSConn _conn = 1;
 * @return {?proto.protos.args.AWSSQSConn}
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.getConn = function() {
  return /** @type{?proto.protos.args.AWSSQSConn} */ (
    jspb.Message.getWrapperField(this, args_aws$sqs_pb.AWSSQSConn, 1));
};


/**
 * @param {?proto.protos.args.AWSSQSConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsAWSSQS} returns this
*/
proto.protos.opts.ReadOptsAWSSQS.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsAWSSQS} returns this
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.AWSSQSReadArgs args = 2;
 * @return {?proto.protos.args.AWSSQSReadArgs}
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.AWSSQSReadArgs} */ (
    jspb.Message.getWrapperField(this, args_aws$sqs_pb.AWSSQSReadArgs, 2));
};


/**
 * @param {?proto.protos.args.AWSSQSReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsAWSSQS} returns this
*/
proto.protos.opts.ReadOptsAWSSQS.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsAWSSQS} returns this
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsAWSSQS.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsMongo.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsMongo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsMongo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsMongo.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_mongo_pb.MongoConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_mongo_pb.MongoReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsMongo}
 */
proto.protos.opts.ReadOptsMongo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsMongo;
  return proto.protos.opts.ReadOptsMongo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsMongo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsMongo}
 */
proto.protos.opts.ReadOptsMongo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_mongo_pb.MongoConn;
      reader.readMessage(value,args_mongo_pb.MongoConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_mongo_pb.MongoReadArgs;
      reader.readMessage(value,args_mongo_pb.MongoReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsMongo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsMongo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsMongo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsMongo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_mongo_pb.MongoConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_mongo_pb.MongoReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.MongoConn _conn = 1;
 * @return {?proto.protos.args.MongoConn}
 */
proto.protos.opts.ReadOptsMongo.prototype.getConn = function() {
  return /** @type{?proto.protos.args.MongoConn} */ (
    jspb.Message.getWrapperField(this, args_mongo_pb.MongoConn, 1));
};


/**
 * @param {?proto.protos.args.MongoConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsMongo} returns this
*/
proto.protos.opts.ReadOptsMongo.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsMongo} returns this
 */
proto.protos.opts.ReadOptsMongo.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsMongo.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.MongoReadArgs args = 2;
 * @return {?proto.protos.args.MongoReadArgs}
 */
proto.protos.opts.ReadOptsMongo.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.MongoReadArgs} */ (
    jspb.Message.getWrapperField(this, args_mongo_pb.MongoReadArgs, 2));
};


/**
 * @param {?proto.protos.args.MongoReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsMongo} returns this
*/
proto.protos.opts.ReadOptsMongo.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsMongo} returns this
 */
proto.protos.opts.ReadOptsMongo.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsMongo.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsNats.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsNats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsNats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsNats.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_nats_pb.NatsConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_nats_pb.NatsReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsNats}
 */
proto.protos.opts.ReadOptsNats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsNats;
  return proto.protos.opts.ReadOptsNats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsNats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsNats}
 */
proto.protos.opts.ReadOptsNats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_nats_pb.NatsConn;
      reader.readMessage(value,args_nats_pb.NatsConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_nats_pb.NatsReadArgs;
      reader.readMessage(value,args_nats_pb.NatsReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsNats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsNats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsNats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsNats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_nats_pb.NatsConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_nats_pb.NatsReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.NatsConn _conn = 1;
 * @return {?proto.protos.args.NatsConn}
 */
proto.protos.opts.ReadOptsNats.prototype.getConn = function() {
  return /** @type{?proto.protos.args.NatsConn} */ (
    jspb.Message.getWrapperField(this, args_nats_pb.NatsConn, 1));
};


/**
 * @param {?proto.protos.args.NatsConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsNats} returns this
*/
proto.protos.opts.ReadOptsNats.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsNats} returns this
 */
proto.protos.opts.ReadOptsNats.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsNats.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.NatsReadArgs args = 2;
 * @return {?proto.protos.args.NatsReadArgs}
 */
proto.protos.opts.ReadOptsNats.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.NatsReadArgs} */ (
    jspb.Message.getWrapperField(this, args_nats_pb.NatsReadArgs, 2));
};


/**
 * @param {?proto.protos.args.NatsReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsNats} returns this
*/
proto.protos.opts.ReadOptsNats.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsNats} returns this
 */
proto.protos.opts.ReadOptsNats.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsNats.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsNatsStreaming.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsNatsStreaming} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsNatsStreaming.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_nats$streaming_pb.NatsStreamingConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_nats$streaming_pb.NatsStreamingReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsNatsStreaming}
 */
proto.protos.opts.ReadOptsNatsStreaming.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsNatsStreaming;
  return proto.protos.opts.ReadOptsNatsStreaming.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsNatsStreaming} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsNatsStreaming}
 */
proto.protos.opts.ReadOptsNatsStreaming.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_nats$streaming_pb.NatsStreamingConn;
      reader.readMessage(value,args_nats$streaming_pb.NatsStreamingConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_nats$streaming_pb.NatsStreamingReadArgs;
      reader.readMessage(value,args_nats$streaming_pb.NatsStreamingReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsNatsStreaming.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsNatsStreaming} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsNatsStreaming.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_nats$streaming_pb.NatsStreamingConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_nats$streaming_pb.NatsStreamingReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.NatsStreamingConn _conn = 1;
 * @return {?proto.protos.args.NatsStreamingConn}
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.getConn = function() {
  return /** @type{?proto.protos.args.NatsStreamingConn} */ (
    jspb.Message.getWrapperField(this, args_nats$streaming_pb.NatsStreamingConn, 1));
};


/**
 * @param {?proto.protos.args.NatsStreamingConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsNatsStreaming} returns this
*/
proto.protos.opts.ReadOptsNatsStreaming.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsNatsStreaming} returns this
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.NatsStreamingReadArgs args = 2;
 * @return {?proto.protos.args.NatsStreamingReadArgs}
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.NatsStreamingReadArgs} */ (
    jspb.Message.getWrapperField(this, args_nats$streaming_pb.NatsStreamingReadArgs, 2));
};


/**
 * @param {?proto.protos.args.NatsStreamingReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsNatsStreaming} returns this
*/
proto.protos.opts.ReadOptsNatsStreaming.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsNatsStreaming} returns this
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsNatsStreaming.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsNSQ.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsNSQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsNSQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsNSQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_nsq_pb.NSQConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_nsq_pb.NSQReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsNSQ}
 */
proto.protos.opts.ReadOptsNSQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsNSQ;
  return proto.protos.opts.ReadOptsNSQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsNSQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsNSQ}
 */
proto.protos.opts.ReadOptsNSQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_nsq_pb.NSQConn;
      reader.readMessage(value,args_nsq_pb.NSQConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_nsq_pb.NSQReadArgs;
      reader.readMessage(value,args_nsq_pb.NSQReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsNSQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsNSQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsNSQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsNSQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_nsq_pb.NSQConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_nsq_pb.NSQReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.NSQConn _conn = 1;
 * @return {?proto.protos.args.NSQConn}
 */
proto.protos.opts.ReadOptsNSQ.prototype.getConn = function() {
  return /** @type{?proto.protos.args.NSQConn} */ (
    jspb.Message.getWrapperField(this, args_nsq_pb.NSQConn, 1));
};


/**
 * @param {?proto.protos.args.NSQConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsNSQ} returns this
*/
proto.protos.opts.ReadOptsNSQ.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsNSQ} returns this
 */
proto.protos.opts.ReadOptsNSQ.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsNSQ.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.NSQReadArgs args = 2;
 * @return {?proto.protos.args.NSQReadArgs}
 */
proto.protos.opts.ReadOptsNSQ.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.NSQReadArgs} */ (
    jspb.Message.getWrapperField(this, args_nsq_pb.NSQReadArgs, 2));
};


/**
 * @param {?proto.protos.args.NSQReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsNSQ} returns this
*/
proto.protos.opts.ReadOptsNSQ.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsNSQ} returns this
 */
proto.protos.opts.ReadOptsNSQ.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsNSQ.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsPostgres.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsPostgres.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsPostgres} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsPostgres.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_postgres_pb.PostgresConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_postgres_pb.PostgresReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsPostgres}
 */
proto.protos.opts.ReadOptsPostgres.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsPostgres;
  return proto.protos.opts.ReadOptsPostgres.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsPostgres} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsPostgres}
 */
proto.protos.opts.ReadOptsPostgres.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_postgres_pb.PostgresConn;
      reader.readMessage(value,args_postgres_pb.PostgresConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_postgres_pb.PostgresReadArgs;
      reader.readMessage(value,args_postgres_pb.PostgresReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsPostgres.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsPostgres.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsPostgres} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsPostgres.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_postgres_pb.PostgresConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_postgres_pb.PostgresReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.PostgresConn _conn = 1;
 * @return {?proto.protos.args.PostgresConn}
 */
proto.protos.opts.ReadOptsPostgres.prototype.getConn = function() {
  return /** @type{?proto.protos.args.PostgresConn} */ (
    jspb.Message.getWrapperField(this, args_postgres_pb.PostgresConn, 1));
};


/**
 * @param {?proto.protos.args.PostgresConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsPostgres} returns this
*/
proto.protos.opts.ReadOptsPostgres.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsPostgres} returns this
 */
proto.protos.opts.ReadOptsPostgres.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsPostgres.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.PostgresReadArgs args = 2;
 * @return {?proto.protos.args.PostgresReadArgs}
 */
proto.protos.opts.ReadOptsPostgres.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.PostgresReadArgs} */ (
    jspb.Message.getWrapperField(this, args_postgres_pb.PostgresReadArgs, 2));
};


/**
 * @param {?proto.protos.args.PostgresReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsPostgres} returns this
*/
proto.protos.opts.ReadOptsPostgres.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsPostgres} returns this
 */
proto.protos.opts.ReadOptsPostgres.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsPostgres.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsPulsar.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsPulsar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsPulsar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsPulsar.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_pulsar_pb.PulsarConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_pulsar_pb.PulsarReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsPulsar}
 */
proto.protos.opts.ReadOptsPulsar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsPulsar;
  return proto.protos.opts.ReadOptsPulsar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsPulsar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsPulsar}
 */
proto.protos.opts.ReadOptsPulsar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_pulsar_pb.PulsarConn;
      reader.readMessage(value,args_pulsar_pb.PulsarConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_pulsar_pb.PulsarReadArgs;
      reader.readMessage(value,args_pulsar_pb.PulsarReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsPulsar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsPulsar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsPulsar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsPulsar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_pulsar_pb.PulsarConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_pulsar_pb.PulsarReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.PulsarConn _conn = 1;
 * @return {?proto.protos.args.PulsarConn}
 */
proto.protos.opts.ReadOptsPulsar.prototype.getConn = function() {
  return /** @type{?proto.protos.args.PulsarConn} */ (
    jspb.Message.getWrapperField(this, args_pulsar_pb.PulsarConn, 1));
};


/**
 * @param {?proto.protos.args.PulsarConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsPulsar} returns this
*/
proto.protos.opts.ReadOptsPulsar.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsPulsar} returns this
 */
proto.protos.opts.ReadOptsPulsar.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsPulsar.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.PulsarReadArgs args = 2;
 * @return {?proto.protos.args.PulsarReadArgs}
 */
proto.protos.opts.ReadOptsPulsar.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.PulsarReadArgs} */ (
    jspb.Message.getWrapperField(this, args_pulsar_pb.PulsarReadArgs, 2));
};


/**
 * @param {?proto.protos.args.PulsarReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsPulsar} returns this
*/
proto.protos.opts.ReadOptsPulsar.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsPulsar} returns this
 */
proto.protos.opts.ReadOptsPulsar.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsPulsar.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsRabbit.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsRabbit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsRabbit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRabbit.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_rabbit_pb.RabbitConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_rabbit_pb.RabbitReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsRabbit}
 */
proto.protos.opts.ReadOptsRabbit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsRabbit;
  return proto.protos.opts.ReadOptsRabbit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsRabbit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsRabbit}
 */
proto.protos.opts.ReadOptsRabbit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_rabbit_pb.RabbitConn;
      reader.readMessage(value,args_rabbit_pb.RabbitConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_rabbit_pb.RabbitReadArgs;
      reader.readMessage(value,args_rabbit_pb.RabbitReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsRabbit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsRabbit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsRabbit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRabbit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_rabbit_pb.RabbitConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_rabbit_pb.RabbitReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.RabbitConn _conn = 1;
 * @return {?proto.protos.args.RabbitConn}
 */
proto.protos.opts.ReadOptsRabbit.prototype.getConn = function() {
  return /** @type{?proto.protos.args.RabbitConn} */ (
    jspb.Message.getWrapperField(this, args_rabbit_pb.RabbitConn, 1));
};


/**
 * @param {?proto.protos.args.RabbitConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsRabbit} returns this
*/
proto.protos.opts.ReadOptsRabbit.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRabbit} returns this
 */
proto.protos.opts.ReadOptsRabbit.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRabbit.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.RabbitReadArgs args = 2;
 * @return {?proto.protos.args.RabbitReadArgs}
 */
proto.protos.opts.ReadOptsRabbit.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.RabbitReadArgs} */ (
    jspb.Message.getWrapperField(this, args_rabbit_pb.RabbitReadArgs, 2));
};


/**
 * @param {?proto.protos.args.RabbitReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsRabbit} returns this
*/
proto.protos.opts.ReadOptsRabbit.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRabbit} returns this
 */
proto.protos.opts.ReadOptsRabbit.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRabbit.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsRabbitStreams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsRabbitStreams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRabbitStreams.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_rabbit$streams_pb.RabbitStreamsConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_rabbit$streams_pb.RabbitStreamsReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsRabbitStreams}
 */
proto.protos.opts.ReadOptsRabbitStreams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsRabbitStreams;
  return proto.protos.opts.ReadOptsRabbitStreams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsRabbitStreams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsRabbitStreams}
 */
proto.protos.opts.ReadOptsRabbitStreams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_rabbit$streams_pb.RabbitStreamsConn;
      reader.readMessage(value,args_rabbit$streams_pb.RabbitStreamsConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_rabbit$streams_pb.RabbitStreamsReadArgs;
      reader.readMessage(value,args_rabbit$streams_pb.RabbitStreamsReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsRabbitStreams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsRabbitStreams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRabbitStreams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_rabbit$streams_pb.RabbitStreamsConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_rabbit$streams_pb.RabbitStreamsReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.RabbitStreamsConn _conn = 1;
 * @return {?proto.protos.args.RabbitStreamsConn}
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.getConn = function() {
  return /** @type{?proto.protos.args.RabbitStreamsConn} */ (
    jspb.Message.getWrapperField(this, args_rabbit$streams_pb.RabbitStreamsConn, 1));
};


/**
 * @param {?proto.protos.args.RabbitStreamsConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsRabbitStreams} returns this
*/
proto.protos.opts.ReadOptsRabbitStreams.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRabbitStreams} returns this
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.RabbitStreamsReadArgs args = 2;
 * @return {?proto.protos.args.RabbitStreamsReadArgs}
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.RabbitStreamsReadArgs} */ (
    jspb.Message.getWrapperField(this, args_rabbit$streams_pb.RabbitStreamsReadArgs, 2));
};


/**
 * @param {?proto.protos.args.RabbitStreamsReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsRabbitStreams} returns this
*/
proto.protos.opts.ReadOptsRabbitStreams.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRabbitStreams} returns this
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRabbitStreams.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsRedisPubSub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsRedisPubSub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRedisPubSub.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_redis$pubsub_pb.RedisPubSubConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_redis$pubsub_pb.RedisPubSubReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsRedisPubSub}
 */
proto.protos.opts.ReadOptsRedisPubSub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsRedisPubSub;
  return proto.protos.opts.ReadOptsRedisPubSub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsRedisPubSub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsRedisPubSub}
 */
proto.protos.opts.ReadOptsRedisPubSub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_redis$pubsub_pb.RedisPubSubConn;
      reader.readMessage(value,args_redis$pubsub_pb.RedisPubSubConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_redis$pubsub_pb.RedisPubSubReadArgs;
      reader.readMessage(value,args_redis$pubsub_pb.RedisPubSubReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsRedisPubSub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsRedisPubSub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRedisPubSub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_redis$pubsub_pb.RedisPubSubConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_redis$pubsub_pb.RedisPubSubReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.RedisPubSubConn _conn = 1;
 * @return {?proto.protos.args.RedisPubSubConn}
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.getConn = function() {
  return /** @type{?proto.protos.args.RedisPubSubConn} */ (
    jspb.Message.getWrapperField(this, args_redis$pubsub_pb.RedisPubSubConn, 1));
};


/**
 * @param {?proto.protos.args.RedisPubSubConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsRedisPubSub} returns this
*/
proto.protos.opts.ReadOptsRedisPubSub.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRedisPubSub} returns this
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.RedisPubSubReadArgs args = 2;
 * @return {?proto.protos.args.RedisPubSubReadArgs}
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.RedisPubSubReadArgs} */ (
    jspb.Message.getWrapperField(this, args_redis$pubsub_pb.RedisPubSubReadArgs, 2));
};


/**
 * @param {?proto.protos.args.RedisPubSubReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsRedisPubSub} returns this
*/
proto.protos.opts.ReadOptsRedisPubSub.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRedisPubSub} returns this
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRedisPubSub.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsRedisStreams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsRedisStreams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRedisStreams.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_redis$streams_pb.RedisStreamsConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_redis$streams_pb.RedisStreamsReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsRedisStreams}
 */
proto.protos.opts.ReadOptsRedisStreams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsRedisStreams;
  return proto.protos.opts.ReadOptsRedisStreams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsRedisStreams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsRedisStreams}
 */
proto.protos.opts.ReadOptsRedisStreams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_redis$streams_pb.RedisStreamsConn;
      reader.readMessage(value,args_redis$streams_pb.RedisStreamsConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_redis$streams_pb.RedisStreamsReadArgs;
      reader.readMessage(value,args_redis$streams_pb.RedisStreamsReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsRedisStreams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsRedisStreams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsRedisStreams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_redis$streams_pb.RedisStreamsConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_redis$streams_pb.RedisStreamsReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.RedisStreamsConn _conn = 1;
 * @return {?proto.protos.args.RedisStreamsConn}
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.getConn = function() {
  return /** @type{?proto.protos.args.RedisStreamsConn} */ (
    jspb.Message.getWrapperField(this, args_redis$streams_pb.RedisStreamsConn, 1));
};


/**
 * @param {?proto.protos.args.RedisStreamsConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsRedisStreams} returns this
*/
proto.protos.opts.ReadOptsRedisStreams.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRedisStreams} returns this
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.RedisStreamsReadArgs args = 2;
 * @return {?proto.protos.args.RedisStreamsReadArgs}
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.RedisStreamsReadArgs} */ (
    jspb.Message.getWrapperField(this, args_redis$streams_pb.RedisStreamsReadArgs, 2));
};


/**
 * @param {?proto.protos.args.RedisStreamsReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsRedisStreams} returns this
*/
proto.protos.opts.ReadOptsRedisStreams.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsRedisStreams} returns this
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsRedisStreams.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsAzureEventHub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsAzureEventHub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsAzureEventHub.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_azure$event$hub_pb.AzureEventHubConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_azure$event$hub_pb.AzureEventHubReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsAzureEventHub}
 */
proto.protos.opts.ReadOptsAzureEventHub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsAzureEventHub;
  return proto.protos.opts.ReadOptsAzureEventHub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsAzureEventHub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsAzureEventHub}
 */
proto.protos.opts.ReadOptsAzureEventHub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_azure$event$hub_pb.AzureEventHubConn;
      reader.readMessage(value,args_azure$event$hub_pb.AzureEventHubConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_azure$event$hub_pb.AzureEventHubReadArgs;
      reader.readMessage(value,args_azure$event$hub_pb.AzureEventHubReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsAzureEventHub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsAzureEventHub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsAzureEventHub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_azure$event$hub_pb.AzureEventHubConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_azure$event$hub_pb.AzureEventHubReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.AzureEventHubConn _conn = 1;
 * @return {?proto.protos.args.AzureEventHubConn}
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.getConn = function() {
  return /** @type{?proto.protos.args.AzureEventHubConn} */ (
    jspb.Message.getWrapperField(this, args_azure$event$hub_pb.AzureEventHubConn, 1));
};


/**
 * @param {?proto.protos.args.AzureEventHubConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsAzureEventHub} returns this
*/
proto.protos.opts.ReadOptsAzureEventHub.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsAzureEventHub} returns this
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.AzureEventHubReadArgs args = 2;
 * @return {?proto.protos.args.AzureEventHubReadArgs}
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.AzureEventHubReadArgs} */ (
    jspb.Message.getWrapperField(this, args_azure$event$hub_pb.AzureEventHubReadArgs, 2));
};


/**
 * @param {?proto.protos.args.AzureEventHubReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsAzureEventHub} returns this
*/
proto.protos.opts.ReadOptsAzureEventHub.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsAzureEventHub} returns this
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsAzureEventHub.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsAzureServiceBus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsAzureServiceBus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsAzureServiceBus.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_azure$service$bus_pb.AzureServiceBusConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_azure$service$bus_pb.AzureServiceBusReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsAzureServiceBus}
 */
proto.protos.opts.ReadOptsAzureServiceBus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsAzureServiceBus;
  return proto.protos.opts.ReadOptsAzureServiceBus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsAzureServiceBus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsAzureServiceBus}
 */
proto.protos.opts.ReadOptsAzureServiceBus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_azure$service$bus_pb.AzureServiceBusConn;
      reader.readMessage(value,args_azure$service$bus_pb.AzureServiceBusConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_azure$service$bus_pb.AzureServiceBusReadArgs;
      reader.readMessage(value,args_azure$service$bus_pb.AzureServiceBusReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsAzureServiceBus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsAzureServiceBus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsAzureServiceBus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_azure$service$bus_pb.AzureServiceBusConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_azure$service$bus_pb.AzureServiceBusReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.AzureServiceBusConn _conn = 1;
 * @return {?proto.protos.args.AzureServiceBusConn}
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.getConn = function() {
  return /** @type{?proto.protos.args.AzureServiceBusConn} */ (
    jspb.Message.getWrapperField(this, args_azure$service$bus_pb.AzureServiceBusConn, 1));
};


/**
 * @param {?proto.protos.args.AzureServiceBusConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsAzureServiceBus} returns this
*/
proto.protos.opts.ReadOptsAzureServiceBus.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsAzureServiceBus} returns this
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.AzureServiceBusReadArgs args = 2;
 * @return {?proto.protos.args.AzureServiceBusReadArgs}
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.AzureServiceBusReadArgs} */ (
    jspb.Message.getWrapperField(this, args_azure$service$bus_pb.AzureServiceBusReadArgs, 2));
};


/**
 * @param {?proto.protos.args.AzureServiceBusReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsAzureServiceBus} returns this
*/
proto.protos.opts.ReadOptsAzureServiceBus.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsAzureServiceBus} returns this
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsAzureServiceBus.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsMQTT.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsMQTT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsMQTT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsMQTT.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_mqtt_pb.MQTTConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_mqtt_pb.MQTTReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsMQTT}
 */
proto.protos.opts.ReadOptsMQTT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsMQTT;
  return proto.protos.opts.ReadOptsMQTT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsMQTT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsMQTT}
 */
proto.protos.opts.ReadOptsMQTT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_mqtt_pb.MQTTConn;
      reader.readMessage(value,args_mqtt_pb.MQTTConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_mqtt_pb.MQTTReadArgs;
      reader.readMessage(value,args_mqtt_pb.MQTTReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsMQTT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsMQTT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsMQTT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsMQTT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_mqtt_pb.MQTTConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_mqtt_pb.MQTTReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.MQTTConn _conn = 1;
 * @return {?proto.protos.args.MQTTConn}
 */
proto.protos.opts.ReadOptsMQTT.prototype.getConn = function() {
  return /** @type{?proto.protos.args.MQTTConn} */ (
    jspb.Message.getWrapperField(this, args_mqtt_pb.MQTTConn, 1));
};


/**
 * @param {?proto.protos.args.MQTTConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsMQTT} returns this
*/
proto.protos.opts.ReadOptsMQTT.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsMQTT} returns this
 */
proto.protos.opts.ReadOptsMQTT.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsMQTT.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.MQTTReadArgs args = 2;
 * @return {?proto.protos.args.MQTTReadArgs}
 */
proto.protos.opts.ReadOptsMQTT.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.MQTTReadArgs} */ (
    jspb.Message.getWrapperField(this, args_mqtt_pb.MQTTReadArgs, 2));
};


/**
 * @param {?proto.protos.args.MQTTReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsMQTT} returns this
*/
proto.protos.opts.ReadOptsMQTT.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsMQTT} returns this
 */
proto.protos.opts.ReadOptsMQTT.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsMQTT.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsGCPPubSub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsGCPPubSub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsGCPPubSub.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_gcp$pubsub_pb.GCPPubSubConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_gcp$pubsub_pb.GCPPubSubReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsGCPPubSub}
 */
proto.protos.opts.ReadOptsGCPPubSub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsGCPPubSub;
  return proto.protos.opts.ReadOptsGCPPubSub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsGCPPubSub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsGCPPubSub}
 */
proto.protos.opts.ReadOptsGCPPubSub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_gcp$pubsub_pb.GCPPubSubConn;
      reader.readMessage(value,args_gcp$pubsub_pb.GCPPubSubConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_gcp$pubsub_pb.GCPPubSubReadArgs;
      reader.readMessage(value,args_gcp$pubsub_pb.GCPPubSubReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsGCPPubSub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsGCPPubSub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsGCPPubSub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_gcp$pubsub_pb.GCPPubSubConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_gcp$pubsub_pb.GCPPubSubReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.GCPPubSubConn _conn = 1;
 * @return {?proto.protos.args.GCPPubSubConn}
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.getConn = function() {
  return /** @type{?proto.protos.args.GCPPubSubConn} */ (
    jspb.Message.getWrapperField(this, args_gcp$pubsub_pb.GCPPubSubConn, 1));
};


/**
 * @param {?proto.protos.args.GCPPubSubConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsGCPPubSub} returns this
*/
proto.protos.opts.ReadOptsGCPPubSub.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsGCPPubSub} returns this
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.GCPPubSubReadArgs args = 2;
 * @return {?proto.protos.args.GCPPubSubReadArgs}
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.GCPPubSubReadArgs} */ (
    jspb.Message.getWrapperField(this, args_gcp$pubsub_pb.GCPPubSubReadArgs, 2));
};


/**
 * @param {?proto.protos.args.GCPPubSubReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsGCPPubSub} returns this
*/
proto.protos.opts.ReadOptsGCPPubSub.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsGCPPubSub} returns this
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsGCPPubSub.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.opts.ReadOptsKubeMQQueue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.opts.ReadOptsKubeMQQueue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsKubeMQQueue.toObject = function(includeInstance, msg) {
  var f, obj = {
    conn: (f = msg.getConn()) && args_kubemq$queue_pb.KubeMQQueueConn.toObject(includeInstance, f),
    args: (f = msg.getArgs()) && args_kubemq$queue_pb.KubeMQQueueReadArgs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.opts.ReadOptsKubeMQQueue}
 */
proto.protos.opts.ReadOptsKubeMQQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.opts.ReadOptsKubeMQQueue;
  return proto.protos.opts.ReadOptsKubeMQQueue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.opts.ReadOptsKubeMQQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.opts.ReadOptsKubeMQQueue}
 */
proto.protos.opts.ReadOptsKubeMQQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new args_kubemq$queue_pb.KubeMQQueueConn;
      reader.readMessage(value,args_kubemq$queue_pb.KubeMQQueueConn.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 2:
      var value = new args_kubemq$queue_pb.KubeMQQueueReadArgs;
      reader.readMessage(value,args_kubemq$queue_pb.KubeMQQueueReadArgs.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.opts.ReadOptsKubeMQQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.opts.ReadOptsKubeMQQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.opts.ReadOptsKubeMQQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      args_kubemq$queue_pb.KubeMQQueueConn.serializeBinaryToWriter
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      args_kubemq$queue_pb.KubeMQQueueReadArgs.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.args.KubeMQQueueConn _conn = 1;
 * @return {?proto.protos.args.KubeMQQueueConn}
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.getConn = function() {
  return /** @type{?proto.protos.args.KubeMQQueueConn} */ (
    jspb.Message.getWrapperField(this, args_kubemq$queue_pb.KubeMQQueueConn, 1));
};


/**
 * @param {?proto.protos.args.KubeMQQueueConn|undefined} value
 * @return {!proto.protos.opts.ReadOptsKubeMQQueue} returns this
*/
proto.protos.opts.ReadOptsKubeMQQueue.prototype.setConn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsKubeMQQueue} returns this
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.hasConn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protos.args.KubeMQQueueReadArgs args = 2;
 * @return {?proto.protos.args.KubeMQQueueReadArgs}
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.getArgs = function() {
  return /** @type{?proto.protos.args.KubeMQQueueReadArgs} */ (
    jspb.Message.getWrapperField(this, args_kubemq$queue_pb.KubeMQQueueReadArgs, 2));
};


/**
 * @param {?proto.protos.args.KubeMQQueueReadArgs|undefined} value
 * @return {!proto.protos.opts.ReadOptsKubeMQQueue} returns this
*/
proto.protos.opts.ReadOptsKubeMQQueue.prototype.setArgs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.opts.ReadOptsKubeMQQueue} returns this
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.clearArgs = function() {
  return this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.opts.ReadOptsKubeMQQueue.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.protos.opts);
