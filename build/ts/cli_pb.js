// source: cli.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var read_pb = require('./read_pb.js');
goog.object.extend(proto, read_pb);
var write_pb = require('./write_pb.js');
goog.object.extend(proto, write_pb);
var relay_pb = require('./relay_pb.js');
goog.object.extend(proto, relay_pb);
var server_pb = require('./server_pb.js');
goog.object.extend(proto, server_pb);
goog.exportSymbol('proto.protos.CLIOptions', null, global);
goog.exportSymbol('proto.protos.GlobalCLIOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.GlobalCLIOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.GlobalCLIOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.GlobalCLIOptions.displayName = 'proto.protos.GlobalCLIOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.CLIOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.CLIOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.CLIOptions.displayName = 'proto.protos.CLIOptions';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.GlobalCLIOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.GlobalCLIOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.GlobalCLIOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GlobalCLIOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    quiet: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.GlobalCLIOptions}
 */
proto.protos.GlobalCLIOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.GlobalCLIOptions;
  return proto.protos.GlobalCLIOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.GlobalCLIOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.GlobalCLIOptions}
 */
proto.protos.GlobalCLIOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuiet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.GlobalCLIOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.GlobalCLIOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.GlobalCLIOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.GlobalCLIOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getQuiet();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool debug = 1;
 * @return {boolean}
 */
proto.protos.GlobalCLIOptions.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.GlobalCLIOptions} returns this
 */
proto.protos.GlobalCLIOptions.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool quiet = 2;
 * @return {boolean}
 */
proto.protos.GlobalCLIOptions.prototype.getQuiet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.GlobalCLIOptions} returns this
 */
proto.protos.GlobalCLIOptions.prototype.setQuiet = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.CLIOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.CLIOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.CLIOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CLIOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    global: (f = msg.getGlobal()) && proto.protos.GlobalCLIOptions.toObject(includeInstance, f),
    read: (f = msg.getRead()) && read_pb.ReadConfig.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && write_pb.WriteConfig.toObject(includeInstance, f),
    relay: (f = msg.getRelay()) && relay_pb.RelayConfig.toObject(includeInstance, f),
    server: (f = msg.getServer()) && server_pb.ServerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.CLIOptions}
 */
proto.protos.CLIOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.CLIOptions;
  return proto.protos.CLIOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.CLIOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.CLIOptions}
 */
proto.protos.CLIOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.GlobalCLIOptions;
      reader.readMessage(value,proto.protos.GlobalCLIOptions.deserializeBinaryFromReader);
      msg.setGlobal(value);
      break;
    case 2:
      var value = new read_pb.ReadConfig;
      reader.readMessage(value,read_pb.ReadConfig.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 3:
      var value = new write_pb.WriteConfig;
      reader.readMessage(value,write_pb.WriteConfig.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    case 4:
      var value = new relay_pb.RelayConfig;
      reader.readMessage(value,relay_pb.RelayConfig.deserializeBinaryFromReader);
      msg.setRelay(value);
      break;
    case 5:
      var value = new server_pb.ServerConfig;
      reader.readMessage(value,server_pb.ServerConfig.deserializeBinaryFromReader);
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.CLIOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.CLIOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.CLIOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CLIOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlobal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.GlobalCLIOptions.serializeBinaryToWriter
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      read_pb.ReadConfig.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      write_pb.WriteConfig.serializeBinaryToWriter
    );
  }
  f = message.getRelay();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      relay_pb.RelayConfig.serializeBinaryToWriter
    );
  }
  f = message.getServer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      server_pb.ServerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional GlobalCLIOptions global = 1;
 * @return {?proto.protos.GlobalCLIOptions}
 */
proto.protos.CLIOptions.prototype.getGlobal = function() {
  return /** @type{?proto.protos.GlobalCLIOptions} */ (
    jspb.Message.getWrapperField(this, proto.protos.GlobalCLIOptions, 1));
};


/**
 * @param {?proto.protos.GlobalCLIOptions|undefined} value
 * @return {!proto.protos.CLIOptions} returns this
*/
proto.protos.CLIOptions.prototype.setGlobal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CLIOptions} returns this
 */
proto.protos.CLIOptions.prototype.clearGlobal = function() {
  return this.setGlobal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CLIOptions.prototype.hasGlobal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReadConfig read = 2;
 * @return {?proto.protos.ReadConfig}
 */
proto.protos.CLIOptions.prototype.getRead = function() {
  return /** @type{?proto.protos.ReadConfig} */ (
    jspb.Message.getWrapperField(this, read_pb.ReadConfig, 2));
};


/**
 * @param {?proto.protos.ReadConfig|undefined} value
 * @return {!proto.protos.CLIOptions} returns this
*/
proto.protos.CLIOptions.prototype.setRead = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CLIOptions} returns this
 */
proto.protos.CLIOptions.prototype.clearRead = function() {
  return this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CLIOptions.prototype.hasRead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WriteConfig write = 3;
 * @return {?proto.protos.WriteConfig}
 */
proto.protos.CLIOptions.prototype.getWrite = function() {
  return /** @type{?proto.protos.WriteConfig} */ (
    jspb.Message.getWrapperField(this, write_pb.WriteConfig, 3));
};


/**
 * @param {?proto.protos.WriteConfig|undefined} value
 * @return {!proto.protos.CLIOptions} returns this
*/
proto.protos.CLIOptions.prototype.setWrite = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CLIOptions} returns this
 */
proto.protos.CLIOptions.prototype.clearWrite = function() {
  return this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CLIOptions.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RelayConfig relay = 4;
 * @return {?proto.protos.RelayConfig}
 */
proto.protos.CLIOptions.prototype.getRelay = function() {
  return /** @type{?proto.protos.RelayConfig} */ (
    jspb.Message.getWrapperField(this, relay_pb.RelayConfig, 4));
};


/**
 * @param {?proto.protos.RelayConfig|undefined} value
 * @return {!proto.protos.CLIOptions} returns this
*/
proto.protos.CLIOptions.prototype.setRelay = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CLIOptions} returns this
 */
proto.protos.CLIOptions.prototype.clearRelay = function() {
  return this.setRelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CLIOptions.prototype.hasRelay = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ServerConfig server = 5;
 * @return {?proto.protos.ServerConfig}
 */
proto.protos.CLIOptions.prototype.getServer = function() {
  return /** @type{?proto.protos.ServerConfig} */ (
    jspb.Message.getWrapperField(this, server_pb.ServerConfig, 5));
};


/**
 * @param {?proto.protos.ServerConfig|undefined} value
 * @return {!proto.protos.CLIOptions} returns this
*/
proto.protos.CLIOptions.prototype.setServer = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.CLIOptions} returns this
 */
proto.protos.CLIOptions.prototype.clearServer = function() {
  return this.setServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.CLIOptions.prototype.hasServer = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.protos);
