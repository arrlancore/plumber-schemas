// source: records/base.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var records_kafka_pb = require('../records/kafka_pb.js');
goog.object.extend(proto, records_kafka_pb);
goog.exportSymbol('proto.protos.records.ReadRecord', null, global);
goog.exportSymbol('proto.protos.records.ReadRecord.RecordCase', null, global);
goog.exportSymbol('proto.protos.records.WriteRecord', null, global);
goog.exportSymbol('proto.protos.records.WriteRecord.RecordsCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.records.ReadRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.records.ReadRecord.oneofGroups_);
};
goog.inherits(proto.protos.records.ReadRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.records.ReadRecord.displayName = 'proto.protos.records.ReadRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.records.WriteRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.records.WriteRecord.oneofGroups_);
};
goog.inherits(proto.protos.records.WriteRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.records.WriteRecord.displayName = 'proto.protos.records.WriteRecord';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.records.ReadRecord.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.protos.records.ReadRecord.RecordCase = {
  RECORD_NOT_SET: 0,
  KAFKA: 100
};

/**
 * @return {proto.protos.records.ReadRecord.RecordCase}
 */
proto.protos.records.ReadRecord.prototype.getRecordCase = function() {
  return /** @type {proto.protos.records.ReadRecord.RecordCase} */(jspb.Message.computeOneofCase(this, proto.protos.records.ReadRecord.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.records.ReadRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.records.ReadRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.records.ReadRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.ReadRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plumberId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decoded: msg.getDecoded_asB64(),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    unixTimestampUtc: jspb.Message.getFieldWithDefault(msg, 99, 0),
    kafka: (f = msg.getKafka()) && records_kafka_pb.Kafka.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.records.ReadRecord}
 */
proto.protos.records.ReadRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.records.ReadRecord;
  return proto.protos.records.ReadRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.records.ReadRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.records.ReadRecord}
 */
proto.protos.records.ReadRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlumberId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDecoded(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 99:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnixTimestampUtc(value);
      break;
    case 100:
      var value = new records_kafka_pb.Kafka;
      reader.readMessage(value,records_kafka_pb.Kafka.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.records.ReadRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.records.ReadRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.records.ReadRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.ReadRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlumberId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecoded_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getUnixTimestampUtc();
  if (f !== 0) {
    writer.writeInt64(
      99,
      f
    );
  }
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      records_kafka_pb.Kafka.serializeBinaryToWriter
    );
  }
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.protos.records.ReadRecord.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.ReadRecord} returns this
 */
proto.protos.records.ReadRecord.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plumber_id = 2;
 * @return {string}
 */
proto.protos.records.ReadRecord.prototype.getPlumberId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.records.ReadRecord} returns this
 */
proto.protos.records.ReadRecord.prototype.setPlumberId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes _decoded = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protos.records.ReadRecord.prototype.getDecoded = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes _decoded = 3;
 * This is a type-conversion wrapper around `getDecoded()`
 * @return {string}
 */
proto.protos.records.ReadRecord.prototype.getDecoded_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDecoded()));
};


/**
 * optional bytes _decoded = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDecoded()`
 * @return {!Uint8Array}
 */
proto.protos.records.ReadRecord.prototype.getDecoded_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDecoded()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.records.ReadRecord} returns this
 */
proto.protos.records.ReadRecord.prototype.setDecoded = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * map<string, bytes> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.protos.records.ReadRecord.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.records.ReadRecord} returns this
 */
proto.protos.records.ReadRecord.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * optional int64 unix_timestamp_utc = 99;
 * @return {number}
 */
proto.protos.records.ReadRecord.prototype.getUnixTimestampUtc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 99, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.records.ReadRecord} returns this
 */
proto.protos.records.ReadRecord.prototype.setUnixTimestampUtc = function(value) {
  return jspb.Message.setProto3IntField(this, 99, value);
};


/**
 * optional Kafka kafka = 100;
 * @return {?proto.protos.records.Kafka}
 */
proto.protos.records.ReadRecord.prototype.getKafka = function() {
  return /** @type{?proto.protos.records.Kafka} */ (
    jspb.Message.getWrapperField(this, records_kafka_pb.Kafka, 100));
};


/**
 * @param {?proto.protos.records.Kafka|undefined} value
 * @return {!proto.protos.records.ReadRecord} returns this
*/
proto.protos.records.ReadRecord.prototype.setKafka = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.protos.records.ReadRecord.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.records.ReadRecord} returns this
 */
proto.protos.records.ReadRecord.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.records.ReadRecord.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.records.WriteRecord.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.protos.records.WriteRecord.RecordsCase = {
  RECORDS_NOT_SET: 0,
  KAFKA: 100
};

/**
 * @return {proto.protos.records.WriteRecord.RecordsCase}
 */
proto.protos.records.WriteRecord.prototype.getRecordsCase = function() {
  return /** @type {proto.protos.records.WriteRecord.RecordsCase} */(jspb.Message.computeOneofCase(this, proto.protos.records.WriteRecord.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.records.WriteRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.records.WriteRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.records.WriteRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.WriteRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoded: msg.getEncoded_asB64(),
    kafka: (f = msg.getKafka()) && records_kafka_pb.Kafka.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.records.WriteRecord}
 */
proto.protos.records.WriteRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.records.WriteRecord;
  return proto.protos.records.WriteRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.records.WriteRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.records.WriteRecord}
 */
proto.protos.records.WriteRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncoded(value);
      break;
    case 100:
      var value = new records_kafka_pb.Kafka;
      reader.readMessage(value,records_kafka_pb.Kafka.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.records.WriteRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.records.WriteRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.records.WriteRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.records.WriteRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoded_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      records_kafka_pb.Kafka.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes _encoded = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protos.records.WriteRecord.prototype.getEncoded = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes _encoded = 1;
 * This is a type-conversion wrapper around `getEncoded()`
 * @return {string}
 */
proto.protos.records.WriteRecord.prototype.getEncoded_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncoded()));
};


/**
 * optional bytes _encoded = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncoded()`
 * @return {!Uint8Array}
 */
proto.protos.records.WriteRecord.prototype.getEncoded_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncoded()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.records.WriteRecord} returns this
 */
proto.protos.records.WriteRecord.prototype.setEncoded = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Kafka kafka = 100;
 * @return {?proto.protos.records.Kafka}
 */
proto.protos.records.WriteRecord.prototype.getKafka = function() {
  return /** @type{?proto.protos.records.Kafka} */ (
    jspb.Message.getWrapperField(this, records_kafka_pb.Kafka, 100));
};


/**
 * @param {?proto.protos.records.Kafka|undefined} value
 * @return {!proto.protos.records.WriteRecord} returns this
*/
proto.protos.records.WriteRecord.prototype.setKafka = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.protos.records.WriteRecord.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.records.WriteRecord} returns this
 */
proto.protos.records.WriteRecord.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.records.WriteRecord.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 100) != null;
};


goog.object.extend(exports, proto.protos.records);
