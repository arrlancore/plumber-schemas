// source: args/ps_args_kafka.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.args.KafkaConn', null, global);
goog.exportSymbol('proto.protos.args.KafkaConn.SASLType', null, global);
goog.exportSymbol('proto.protos.args.KafkaReadArgs', null, global);
goog.exportSymbol('proto.protos.args.KafkaRelayArgs', null, global);
goog.exportSymbol('proto.protos.args.KafkaWriteArgs', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.KafkaConn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.args.KafkaConn.repeatedFields_, null);
};
goog.inherits(proto.protos.args.KafkaConn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.KafkaConn.displayName = 'proto.protos.args.KafkaConn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.KafkaReadArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.args.KafkaReadArgs.repeatedFields_, null);
};
goog.inherits(proto.protos.args.KafkaReadArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.KafkaReadArgs.displayName = 'proto.protos.args.KafkaReadArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.KafkaWriteArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.args.KafkaWriteArgs.repeatedFields_, null);
};
goog.inherits(proto.protos.args.KafkaWriteArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.KafkaWriteArgs.displayName = 'proto.protos.args.KafkaWriteArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.KafkaRelayArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.args.KafkaRelayArgs.repeatedFields_, null);
};
goog.inherits(proto.protos.args.KafkaRelayArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.KafkaRelayArgs.displayName = 'proto.protos.args.KafkaRelayArgs';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.args.KafkaConn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.KafkaConn.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.KafkaConn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.KafkaConn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaConn.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    timeoutSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    useTls: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    insecureTls: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    saslType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    saslUsername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    saslPassword: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.KafkaConn}
 */
proto.protos.args.KafkaConn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.KafkaConn;
  return proto.protos.args.KafkaConn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.KafkaConn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.KafkaConn}
 */
proto.protos.args.KafkaConn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoutSeconds(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTls(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInsecureTls(value);
      break;
    case 5:
      var value = /** @type {!proto.protos.args.KafkaConn.SASLType} */ (reader.readEnum());
      msg.setSaslType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaslUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaslPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.KafkaConn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.KafkaConn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.KafkaConn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaConn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getTimeoutSeconds();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUseTls();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInsecureTls();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSaslType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSaslUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSaslPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protos.args.KafkaConn.SASLType = {
  NONE: 0,
  PLAIN: 1,
  SCRAM: 2
};

/**
 * repeated string address = 1;
 * @return {!Array<string>}
 */
proto.protos.args.KafkaConn.prototype.getAddressList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setAddressList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.addAddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.clearAddressList = function() {
  return this.setAddressList([]);
};


/**
 * optional int32 timeout_seconds = 2;
 * @return {number}
 */
proto.protos.args.KafkaConn.prototype.getTimeoutSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setTimeoutSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool use_tls = 3;
 * @return {boolean}
 */
proto.protos.args.KafkaConn.prototype.getUseTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setUseTls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool insecure_tls = 4;
 * @return {boolean}
 */
proto.protos.args.KafkaConn.prototype.getInsecureTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setInsecureTls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional SASLType sasl_type = 5;
 * @return {!proto.protos.args.KafkaConn.SASLType}
 */
proto.protos.args.KafkaConn.prototype.getSaslType = function() {
  return /** @type {!proto.protos.args.KafkaConn.SASLType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.protos.args.KafkaConn.SASLType} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setSaslType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string sasl_username = 6;
 * @return {string}
 */
proto.protos.args.KafkaConn.prototype.getSaslUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setSaslUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string sasl_password = 7;
 * @return {string}
 */
proto.protos.args.KafkaConn.prototype.getSaslPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.KafkaConn} returns this
 */
proto.protos.args.KafkaConn.prototype.setSaslPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.args.KafkaReadArgs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.KafkaReadArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.KafkaReadArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.KafkaReadArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaReadArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    readOffset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    useConsumerGroup: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    consumerGroupName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxWaitSeconds: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxBytes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    commitIntervalSeconds: jspb.Message.getFieldWithDefault(msg, 8, 0),
    rebalanceTimeoutSeconds: jspb.Message.getFieldWithDefault(msg, 9, 0),
    queueCapacity: jspb.Message.getFieldWithDefault(msg, 10, 0),
    includeOffsetInfo: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    lag: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    lagConsumerGroup: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.KafkaReadArgs}
 */
proto.protos.args.KafkaReadArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.KafkaReadArgs;
  return proto.protos.args.KafkaReadArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.KafkaReadArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.KafkaReadArgs}
 */
proto.protos.args.KafkaReadArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadOffset(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseConsumerGroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerGroupName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxWaitSeconds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxBytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommitIntervalSeconds(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRebalanceTimeoutSeconds(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueueCapacity(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeOffsetInfo(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLag(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLagConsumerGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.KafkaReadArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.KafkaReadArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.KafkaReadArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaReadArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getReadOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUseConsumerGroup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getConsumerGroupName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxWaitSeconds();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMinBytes();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMaxBytes();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCommitIntervalSeconds();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getRebalanceTimeoutSeconds();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getQueueCapacity();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getIncludeOffsetInfo();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getLag();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getLagConsumerGroup();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * repeated string topics = 1;
 * @return {!Array<string>}
 */
proto.protos.args.KafkaReadArgs.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * optional int64 read_offset = 2;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getReadOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setReadOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool use_consumer_group = 3;
 * @return {boolean}
 */
proto.protos.args.KafkaReadArgs.prototype.getUseConsumerGroup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setUseConsumerGroup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string consumer_group_name = 4;
 * @return {string}
 */
proto.protos.args.KafkaReadArgs.prototype.getConsumerGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setConsumerGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 max_wait_seconds = 5;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getMaxWaitSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setMaxWaitSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 min_bytes = 6;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getMinBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setMinBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 max_bytes = 7;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getMaxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setMaxBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 commit_interval_seconds = 8;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getCommitIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setCommitIntervalSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 rebalance_timeout_seconds = 9;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getRebalanceTimeoutSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setRebalanceTimeoutSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 queue_capacity = 10;
 * @return {number}
 */
proto.protos.args.KafkaReadArgs.prototype.getQueueCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setQueueCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool include_offset_info = 11;
 * @return {boolean}
 */
proto.protos.args.KafkaReadArgs.prototype.getIncludeOffsetInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setIncludeOffsetInfo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool lag = 12;
 * @return {boolean}
 */
proto.protos.args.KafkaReadArgs.prototype.getLag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setLag = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string lag_consumer_group = 13;
 * @return {string}
 */
proto.protos.args.KafkaReadArgs.prototype.getLagConsumerGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.KafkaReadArgs} returns this
 */
proto.protos.args.KafkaReadArgs.prototype.setLagConsumerGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.args.KafkaWriteArgs.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.KafkaWriteArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.KafkaWriteArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.KafkaWriteArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaWriteArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    topicsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.KafkaWriteArgs}
 */
proto.protos.args.KafkaWriteArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.KafkaWriteArgs;
  return proto.protos.args.KafkaWriteArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.KafkaWriteArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.KafkaWriteArgs}
 */
proto.protos.args.KafkaWriteArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.KafkaWriteArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.KafkaWriteArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.KafkaWriteArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaWriteArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.protos.args.KafkaWriteArgs.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.KafkaWriteArgs} returns this
 */
proto.protos.args.KafkaWriteArgs.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> headers = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.args.KafkaWriteArgs.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.args.KafkaWriteArgs} returns this
 */
proto.protos.args.KafkaWriteArgs.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;};


/**
 * repeated string topics = 3;
 * @return {!Array<string>}
 */
proto.protos.args.KafkaWriteArgs.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protos.args.KafkaWriteArgs} returns this
 */
proto.protos.args.KafkaWriteArgs.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protos.args.KafkaWriteArgs} returns this
 */
proto.protos.args.KafkaWriteArgs.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.args.KafkaWriteArgs} returns this
 */
proto.protos.args.KafkaWriteArgs.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.args.KafkaRelayArgs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.KafkaRelayArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.KafkaRelayArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.KafkaRelayArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaRelayArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    readOffset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    useConsumerGroup: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    consumerGroupName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxWaitSeconds: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxBytes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    commitIntervalSeconds: jspb.Message.getFieldWithDefault(msg, 8, 0),
    rebalanceTimeoutSeconds: jspb.Message.getFieldWithDefault(msg, 9, 0),
    queueCapacity: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.KafkaRelayArgs}
 */
proto.protos.args.KafkaRelayArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.KafkaRelayArgs;
  return proto.protos.args.KafkaRelayArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.KafkaRelayArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.KafkaRelayArgs}
 */
proto.protos.args.KafkaRelayArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadOffset(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseConsumerGroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsumerGroupName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxWaitSeconds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxBytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommitIntervalSeconds(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRebalanceTimeoutSeconds(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueueCapacity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.KafkaRelayArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.KafkaRelayArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.KafkaRelayArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.KafkaRelayArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getReadOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUseConsumerGroup();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getConsumerGroupName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaxWaitSeconds();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMinBytes();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMaxBytes();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCommitIntervalSeconds();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getRebalanceTimeoutSeconds();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getQueueCapacity();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * repeated string topics = 1;
 * @return {!Array<string>}
 */
proto.protos.args.KafkaRelayArgs.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * optional int64 read_offset = 2;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getReadOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setReadOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool use_consumer_group = 3;
 * @return {boolean}
 */
proto.protos.args.KafkaRelayArgs.prototype.getUseConsumerGroup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setUseConsumerGroup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string consumer_group_name = 4;
 * @return {string}
 */
proto.protos.args.KafkaRelayArgs.prototype.getConsumerGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setConsumerGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 max_wait_seconds = 5;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getMaxWaitSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setMaxWaitSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 min_bytes = 6;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getMinBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setMinBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 max_bytes = 7;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getMaxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setMaxBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 commit_interval_seconds = 8;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getCommitIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setCommitIntervalSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 rebalance_timeout_seconds = 9;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getRebalanceTimeoutSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setRebalanceTimeoutSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 queue_capacity = 10;
 * @return {number}
 */
proto.protos.args.KafkaRelayArgs.prototype.getQueueCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.KafkaRelayArgs} returns this
 */
proto.protos.args.KafkaRelayArgs.prototype.setQueueCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


goog.object.extend(exports, proto.protos.args);
