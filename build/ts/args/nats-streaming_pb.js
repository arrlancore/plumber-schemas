// source: args/nats-streaming.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protos.args.NatsStreamingConn', null, global);
goog.exportSymbol('proto.protos.args.NatsStreamingReadOpts', null, global);
goog.exportSymbol('proto.protos.args.NatsStreamingWriteOpts', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.NatsStreamingConn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.args.NatsStreamingConn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.NatsStreamingConn.displayName = 'proto.protos.args.NatsStreamingConn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.NatsStreamingReadOpts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.args.NatsStreamingReadOpts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.NatsStreamingReadOpts.displayName = 'proto.protos.args.NatsStreamingReadOpts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.args.NatsStreamingWriteOpts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.args.NatsStreamingWriteOpts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.args.NatsStreamingWriteOpts.displayName = 'proto.protos.args.NatsStreamingWriteOpts';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.NatsStreamingConn.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.NatsStreamingConn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.NatsStreamingConn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.NatsStreamingConn.toObject = function(includeInstance, msg) {
  var f, obj = {
    dsn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    insecureTls: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    tlsCaCert: msg.getTlsCaCert_asB64(),
    tlsClientCert: msg.getTlsClientCert_asB64(),
    tlsClientKey: msg.getTlsClientKey_asB64(),
    userCredentials: msg.getUserCredentials_asB64(),
    clusterId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.NatsStreamingConn}
 */
proto.protos.args.NatsStreamingConn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.NatsStreamingConn;
  return proto.protos.args.NatsStreamingConn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.NatsStreamingConn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.NatsStreamingConn}
 */
proto.protos.args.NatsStreamingConn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsn(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInsecureTls(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTlsCaCert(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTlsClientCert(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTlsClientKey(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserCredentials(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingConn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.NatsStreamingConn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.NatsStreamingConn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.NatsStreamingConn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDsn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInsecureTls();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTlsCaCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTlsClientCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTlsClientKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getUserCredentials_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getClusterId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string dsn = 1;
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getDsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setDsn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool insecure_tls = 2;
 * @return {boolean}
 */
proto.protos.args.NatsStreamingConn.prototype.getInsecureTls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setInsecureTls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes tls_ca_cert = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsCaCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes tls_ca_cert = 3;
 * This is a type-conversion wrapper around `getTlsCaCert()`
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsCaCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTlsCaCert()));
};


/**
 * optional bytes tls_ca_cert = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsCaCert()`
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsCaCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTlsCaCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setTlsCaCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes tls_client_cert = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsClientCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes tls_client_cert = 4;
 * This is a type-conversion wrapper around `getTlsClientCert()`
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsClientCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTlsClientCert()));
};


/**
 * optional bytes tls_client_cert = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsClientCert()`
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsClientCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTlsClientCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setTlsClientCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes tls_client_key = 5;
 * @return {!(string|Uint8Array)}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsClientKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes tls_client_key = 5;
 * This is a type-conversion wrapper around `getTlsClientKey()`
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsClientKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTlsClientKey()));
};


/**
 * optional bytes tls_client_key = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsClientKey()`
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingConn.prototype.getTlsClientKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTlsClientKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setTlsClientKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes user_credentials = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protos.args.NatsStreamingConn.prototype.getUserCredentials = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes user_credentials = 6;
 * This is a type-conversion wrapper around `getUserCredentials()`
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getUserCredentials_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserCredentials()));
};


/**
 * optional bytes user_credentials = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserCredentials()`
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingConn.prototype.getUserCredentials_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserCredentials()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setUserCredentials = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string cluster_id = 7;
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getClusterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setClusterId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string client_id = 8;
 * @return {string}
 */
proto.protos.args.NatsStreamingConn.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingConn} returns this
 */
proto.protos.args.NatsStreamingConn.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.NatsStreamingReadOpts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.NatsStreamingReadOpts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.NatsStreamingReadOpts.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    durableName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    readLastAvailable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    readSequenceNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    readSince: jspb.Message.getFieldWithDefault(msg, 5, ""),
    readAll: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.NatsStreamingReadOpts}
 */
proto.protos.args.NatsStreamingReadOpts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.NatsStreamingReadOpts;
  return proto.protos.args.NatsStreamingReadOpts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.NatsStreamingReadOpts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.NatsStreamingReadOpts}
 */
proto.protos.args.NatsStreamingReadOpts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDurableName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadLastAvailable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReadSequenceNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadSince(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadAll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.NatsStreamingReadOpts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.NatsStreamingReadOpts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.NatsStreamingReadOpts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDurableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReadLastAvailable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getReadSequenceNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getReadSince();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReadAll();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingReadOpts} returns this
 */
proto.protos.args.NatsStreamingReadOpts.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string durable_name = 2;
 * @return {string}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.getDurableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingReadOpts} returns this
 */
proto.protos.args.NatsStreamingReadOpts.prototype.setDurableName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool read_last_available = 3;
 * @return {boolean}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.getReadLastAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.NatsStreamingReadOpts} returns this
 */
proto.protos.args.NatsStreamingReadOpts.prototype.setReadLastAvailable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 read_sequence_number = 4;
 * @return {number}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.getReadSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.args.NatsStreamingReadOpts} returns this
 */
proto.protos.args.NatsStreamingReadOpts.prototype.setReadSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string read_since = 5;
 * @return {string}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.getReadSince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingReadOpts} returns this
 */
proto.protos.args.NatsStreamingReadOpts.prototype.setReadSince = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool read_all = 6;
 * @return {boolean}
 */
proto.protos.args.NatsStreamingReadOpts.prototype.getReadAll = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.args.NatsStreamingReadOpts} returns this
 */
proto.protos.args.NatsStreamingReadOpts.prototype.setReadAll = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.args.NatsStreamingWriteOpts.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.args.NatsStreamingWriteOpts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.args.NatsStreamingWriteOpts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.NatsStreamingWriteOpts.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.args.NatsStreamingWriteOpts}
 */
proto.protos.args.NatsStreamingWriteOpts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.args.NatsStreamingWriteOpts;
  return proto.protos.args.NatsStreamingWriteOpts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.args.NatsStreamingWriteOpts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.args.NatsStreamingWriteOpts}
 */
proto.protos.args.NatsStreamingWriteOpts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.args.NatsStreamingWriteOpts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.args.NatsStreamingWriteOpts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.args.NatsStreamingWriteOpts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.args.NatsStreamingWriteOpts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.protos.args.NatsStreamingWriteOpts.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.args.NatsStreamingWriteOpts} returns this
 */
proto.protos.args.NatsStreamingWriteOpts.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.protos.args);
