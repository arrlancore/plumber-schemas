// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_base.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ps_base.proto", fileDescriptor_ef931efdbd582aee) }

var fileDescriptor_ef931efdbd582aee = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x96, 0xdb, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0xb5, 0x07, 0x10, 0x78, 0xec, 0x66, 0x98, 0xb6, 0x95, 0x8e, 0x8d, 0xfb, 0x13, 0xeb,
	0x04, 0x13, 0x4f, 0x20, 0xb1, 0x15, 0x56, 0x4d, 0x9a, 0x34, 0xd4, 0x6c, 0x30, 0xf1, 0x40, 0x95,
	0xa6, 0x47, 0x5b, 0xc0, 0x8d, 0x8d, 0xed, 0x16, 0xf5, 0xbf, 0xe6, 0x4f, 0x40, 0x89, 0xed, 0xfa,
	0x96, 0x6c, 0x4f, 0x55, 0xbe, 0xef, 0xe4, 0xe7, 0xe3, 0xcf, 0x8e, 0x6b, 0xb4, 0xc4, 0xc4, 0x60,
	0x98, 0x0a, 0xd8, 0x63, 0x9c, 0x4a, 0x8a, 0xef, 0x56, 0x3f, 0xa2, 0xb5, 0xca, 0xc4, 0x20, 0xa3,
	0x45, 0x01, 0x99, 0x54, 0x4e, 0xab, 0x2c, 0xe4, 0x90, 0x8e, 0xf4, 0xe3, 0x32, 0x13, 0x83, 0xbf,
	0x3c, 0x97, 0xe0, 0x3c, 0x73, 0x20, 0xe9, 0x4c, 0x3f, 0xaf, 0x30, 0x31, 0x10, 0xd9, 0x35, 0x8c,
	0x53, 0x2d, 0x94, 0x44, 0x01, 0x7c, 0x9a, 0x67, 0xe0, 0x96, 0x00, 0x9f, 0x02, 0xd7, 0x02, 0x66,
	0x62, 0x30, 0xcd, 0x6a, 0xb5, 0x8c, 0xe4, 0x50, 0xe8, 0x56, 0xde, 0xfe, 0x5b, 0x47, 0x4b, 0x5f,
	0xc9, 0x64, 0x3c, 0x04, 0x9e, 0x54, 0xb5, 0xf8, 0x12, 0xad, 0xf5, 0x40, 0x1e, 0x12, 0xd2, 0x55,
	0x3d, 0xe7, 0xb4, 0x10, 0x78, 0x57, 0x95, 0x8b, 0xbd, 0xc8, 0xea, 0xc3, 0x9f, 0x09, 0x08, 0xd9,
	0x7a, 0x7a, 0x43, 0x85, 0x60, 0xb4, 0x10, 0x80, 0x4f, 0xd1, 0x52, 0x0f, 0xa4, 0x75, 0x70, 0xdb,
	0x79, 0xc7, 0xca, 0x86, 0xb8, 0xdd, 0xe0, 0x6a, 0xda, 0x05, 0x5a, 0xed, 0x72, 0x48, 0x25, 0x38,
	0xc0, 0x1d, 0xf3, 0x4a, 0xe8, 0x18, 0xe6, 0x6e, 0x73, 0x81, 0xc6, 0x9e, 0xa1, 0xe5, 0x73, 0x10,
	0x6e, 0x97, 0xf3, 0x3e, 0x7c, 0xdd, 0x20, 0x9f, 0x34, 0xd9, 0xb6, 0xcf, 0x0b, 0x36, 0x6a, 0xe8,
	0x33, 0x74, 0xa2, 0x3e, 0xe3, 0x02, 0x8b, 0xfd, 0x0c, 0x04, 0xea, 0xb1, 0xa1, 0x13, 0x61, 0xe3,
	0x02, 0x8d, 0xed, 0x22, 0xa4, 0xa2, 0xe9, 0x43, 0x3a, 0xc2, 0x5b, 0x7e, 0x5c, 0xa5, 0x66, 0x50,
	0xad, 0x3a, 0x4b, 0x43, 0x8e, 0xd0, 0xfd, 0x44, 0xa6, 0x5c, 0x56, 0x8c, 0x4d, 0x53, 0x38, 0x97,
	0x0c, 0x62, 0xab, 0xc6, 0x51, 0x84, 0xfd, 0x05, 0x7c, 0x8c, 0x16, 0xd5, 0x4e, 0x2a, 0x75, 0x81,
	0x5b, 0xfe, 0xf6, 0xaa, 0x44, 0xc3, 0x79, 0x5c, 0xeb, 0xe9, 0x5e, 0x3e, 0xa2, 0x7b, 0x89, 0xa4,
	0xac, 0x6a, 0x65, 0xc3, 0x0e, 0xa8, 0x14, 0x43, 0xd8, 0x8c, 0x0d, 0x9b, 0x47, 0x1f, 0xc4, 0x64,
	0x1c, 0xe4, 0x61, 0xb5, 0x28, 0x0f, 0xd7, 0xb2, 0x10, 0x15, 0xb8, 0x0f, 0xb1, 0x5a, 0x04, 0x71,
	0x2d, 0x0d, 0x39, 0x40, 0x77, 0xbe, 0x97, 0x87, 0x04, 0x7e, 0x64, 0x8a, 0xaa, 0x47, 0xf3, 0xea,
	0x7a, 0xa0, 0xea, 0xb7, 0x8e, 0xd1, 0xa2, 0x59, 0x20, 0x92, 0xce, 0x70, 0xb4, 0x6a, 0x24, 0x9d,
	0x45, 0x31, 0x7a, 0x9e, 0xe5, 0xa8, 0xad, 0x18, 0x70, 0x1c, 0x31, 0xe2, 0x78, 0x9e, 0xe5, 0x98,
	0x80, 0x3c, 0x8e, 0x23, 0x46, 0x1c, 0xcf, 0xd3, 0x9c, 0x4f, 0xe5, 0x16, 0x2b, 0xd7, 0xaa, 0xa4,
	0x04, 0xcb, 0xe7, 0x30, 0xb6, 0x6a, 0x1c, 0x4d, 0x38, 0x41, 0x0f, 0xcc, 0x7e, 0x21, 0xe9, 0x4c,
	0xe0, 0x68, 0x17, 0x95, 0xaa, 0xe1, 0xb4, 0xeb, 0x4d, 0x3b, 0x29, 0xb3, 0x60, 0xde, 0xa4, 0x1c,
	0x31, 0x9a, 0x94, 0xe7, 0xd9, 0x49, 0xf5, 0x40, 0x26, 0xd5, 0x51, 0x6f, 0x27, 0x35, 0x97, 0xa2,
	0x49, 0x39, 0x8e, 0x77, 0xc4, 0x1e, 0x12, 0xa2, 0x74, 0x81, 0x83, 0xc6, 0xb5, 0x5c, 0x77, 0xc4,
	0xba, 0xae, 0x8d, 0xe8, 0x64, 0xcc, 0x28, 0x97, 0xbd, 0x5c, 0x5e, 0x4f, 0x86, 0x36, 0x22, 0x57,
	0x8d, 0x22, 0xf2, 0x4d, 0x1b, 0x91, 0xd2, 0x4f, 0x69, 0x96, 0x12, 0x1b, 0x91, 0x23, 0x46, 0x11,
	0x79, 0x9e, 0x6d, 0x49, 0x25, 0xa7, 0x53, 0x0a, 0xf2, 0xf4, 0x83, 0x6a, 0xd7, 0x9b, 0xf6, 0xab,
	0x2c, 0x03, 0x54, 0xff, 0xa3, 0xd8, 0x0b, 0x55, 0x69, 0xd1, 0x57, 0xe9, 0x5a, 0xf6, 0xef, 0x42,
	0x67, 0xa7, 0x0c, 0x81, 0xc3, 0x4c, 0xb5, 0x1e, 0xfd, 0x5d, 0x84, 0xb6, 0x5d, 0x41, 0xf5, 0xfd,
	0x99, 0xc6, 0xda, 0xfe, 0x67, 0x19, 0xf4, 0xb6, 0xdd, 0xe0, 0x5a, 0x9a, 0xfa, 0x0a, 0x23, 0x9a,
	0x27, 0x47, 0xb4, 0xc0, 0xb5, 0x34, 0x9d, 0x64, 0x48, 0xf3, 0xe4, 0x88, 0x16, 0xb8, 0x9a, 0xf6,
	0x13, 0x3d, 0x3c, 0xcd, 0x8b, 0xdf, 0x6a, 0x55, 0xce, 0xa9, 0x61, 0x3e, 0x33, 0x6f, 0xd5, 0x98,
	0x86, 0xfc, 0xfc, 0xc6, 0x1a, 0xcd, 0xff, 0x85, 0x36, 0x2e, 0x0a, 0x32, 0x2f, 0x38, 0xe6, 0x74,
	0x6c, 0xc6, 0x78, 0x35, 0x9f, 0x67, 0x7d, 0x81, 0x19, 0xe7, 0xf5, 0xad, 0x75, 0x7a, 0xac, 0x4b,
	0xb4, 0x56, 0xb6, 0xd2, 0x07, 0x46, 0xed, 0x4c, 0x76, 0xdd, 0x2e, 0x3d, 0x2b, 0xba, 0x34, 0xd5,
	0x54, 0x68, 0xf2, 0x08, 0xad, 0xab, 0xc1, 0x4b, 0xdb, 0x9d, 0xc3, 0x0b, 0xbf, 0xb7, 0xc0, 0x36,
	0x23, 0xbc, 0xbc, 0xa5, 0xca, 0xde, 0x26, 0xf4, 0xe6, 0x06, 0x7e, 0xc6, 0xd4, 0x9d, 0x6f, 0x27,
	0xd8, 0xf6, 0x73, 0x27, 0xba, 0x4d, 0xc4, 0x05, 0x16, 0x9b, 0x34, 0x62, 0x93, 0xdb, 0xb0, 0x49,
	0x13, 0xf6, 0x43, 0x75, 0x37, 0xf8, 0xd6, 0xfd, 0x32, 0x85, 0x42, 0xfa, 0x77, 0x03, 0x23, 0x1a,
	0xd8, 0x8a, 0xf1, 0xb4, 0xb1, 0xbf, 0x70, 0xf4, 0xfe, 0xc7, 0xc1, 0x55, 0x75, 0x38, 0xed, 0x65,
	0x74, 0xdc, 0x19, 0xa6, 0x32, 0xbb, 0xce, 0x28, 0x67, 0x1d, 0xa6, 0xae, 0xc1, 0x6f, 0xd4, 0x55,
	0x5b, 0x74, 0x86, 0x93, 0x9c, 0x8c, 0x3a, 0x57, 0xb4, 0xa3, 0x08, 0x43, 0x75, 0x9f, 0x7f, 0xf7,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x27, 0xdf, 0x72, 0xe7, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlumberServerClient is the client API for PlumberServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlumberServerClient interface {
	// List configured/known connections
	GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	// Start reading data from a connection
	CreateRead(ctx context.Context, in *CreateReadRequest, opts ...grpc.CallOption) (*CreateReadResponse, error)
	// Streams messages received off of a read
	StartRead(ctx context.Context, in *StartReadRequest, opts ...grpc.CallOption) (PlumberServer_StartReadClient, error)
	// List all reads that have been created
	GetAllReads(ctx context.Context, in *GetAllReadsRequest, opts ...grpc.CallOption) (*GetAllReadsResponse, error)
	// Stop reading data from a connection
	StopRead(ctx context.Context, in *StopReadRequest, opts ...grpc.CallOption) (*StopReadResponse, error)
	// Resume reading data from an existing read
	ResumeRead(ctx context.Context, in *ResumeReadRequest, opts ...grpc.CallOption) (*ResumeReadResponse, error)
	// Resume reading data from an existing read
	DeleteRead(ctx context.Context, in *DeleteReadRequest, opts ...grpc.CallOption) (*DeleteReadResponse, error)
	// Write data to a connection
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// Create a data relay from plumber server to the Batch platform
	CreateRelay(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error)
	// Update a relay (such as API token) - relay will be interrupted!
	UpdateRelay(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error)
	ResumeRelay(ctx context.Context, in *ResumeRelayRequest, opts ...grpc.CallOption) (*ResumeRelayResponse, error)
	StopRelay(ctx context.Context, in *StopRelayRequest, opts ...grpc.CallOption) (*StopRelayResponse, error)
	GetAllRelays(ctx context.Context, in *GetAllRelaysRequest, opts ...grpc.CallOption) (*GetAllRelaysResponse, error)
	// Delete an existing relay
	DeleteRelay(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error)
	// Retrieve a single schema
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	// Retrieve all schemas
	GetAllSchemas(ctx context.Context, in *GetAllSchemasRequest, opts ...grpc.CallOption) (*GetAllSchemasResponse, error)
	// Import a schema from github
	ImportGithub(ctx context.Context, in *ImportGithubRequest, opts ...grpc.CallOption) (*ImportGithubResponse, error)
	// Import a schema from the local file system
	ImportLocal(ctx context.Context, in *ImportLocalRequest, opts ...grpc.CallOption) (*ImportLocalResponse, error)
	// Delete a schema
	DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	GetAllServices(ctx context.Context, in *GetAllServicesRequest, opts ...grpc.CallOption) (*GetAllServicesResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	LinkSchemaToService(ctx context.Context, in *LinkSchemaToServiceRequest, opts ...grpc.CallOption) (*LinkSchemaToServiceResponse, error)
	UnlinkSchemaFromService(ctx context.Context, in *UnlinkSchemaFromServiceRequest, opts ...grpc.CallOption) (*UnlinkSchemaFromServiceResponse, error)
	LinkRepoToService(ctx context.Context, in *LinkRepoToServiceRequest, opts ...grpc.CallOption) (*LinkRepoToServiceResponse, error)
	UnlinkRepoFromService(ctx context.Context, in *UnlinkRepoFromServiceRequest, opts ...grpc.CallOption) (*UnlinkRepoFromServiceResponse, error)
	GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error)
	SetServerOptions(ctx context.Context, in *SetServerOptionsRequest, opts ...grpc.CallOption) (*SetServerOptionsResponse, error)
	// GetVCEvents connects to vc-service backend and returns a stream of events pushed from github/bitbucket/etc
	GetVCEvents(ctx context.Context, in *GetVCEventsRequest, opts ...grpc.CallOption) (PlumberServer_GetVCEventsClient, error)
}

type plumberServerClient struct {
	cc *grpc.ClientConn
}

func NewPlumberServerClient(cc *grpc.ClientConn) PlumberServerClient {
	return &plumberServerClient{cc}
}

func (c *plumberServerClient) GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error) {
	out := new(TestConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateRead(ctx context.Context, in *CreateReadRequest, opts ...grpc.CallOption) (*CreateReadResponse, error) {
	out := new(CreateReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StartRead(ctx context.Context, in *StartReadRequest, opts ...grpc.CallOption) (PlumberServer_StartReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PlumberServer_serviceDesc.Streams[0], "/protos.PlumberServer/StartRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &plumberServerStartReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlumberServer_StartReadClient interface {
	Recv() (*StartReadResponse, error)
	grpc.ClientStream
}

type plumberServerStartReadClient struct {
	grpc.ClientStream
}

func (x *plumberServerStartReadClient) Recv() (*StartReadResponse, error) {
	m := new(StartReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *plumberServerClient) GetAllReads(ctx context.Context, in *GetAllReadsRequest, opts ...grpc.CallOption) (*GetAllReadsResponse, error) {
	out := new(GetAllReadsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllReads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StopRead(ctx context.Context, in *StopReadRequest, opts ...grpc.CallOption) (*StopReadResponse, error) {
	out := new(StopReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/StopRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ResumeRead(ctx context.Context, in *ResumeReadRequest, opts ...grpc.CallOption) (*ResumeReadResponse, error) {
	out := new(ResumeReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ResumeRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteRead(ctx context.Context, in *DeleteReadRequest, opts ...grpc.CallOption) (*DeleteReadResponse, error) {
	out := new(DeleteReadResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateRelay(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error) {
	out := new(CreateRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateRelay(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error) {
	out := new(UpdateRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ResumeRelay(ctx context.Context, in *ResumeRelayRequest, opts ...grpc.CallOption) (*ResumeRelayResponse, error) {
	out := new(ResumeRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ResumeRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StopRelay(ctx context.Context, in *StopRelayRequest, opts ...grpc.CallOption) (*StopRelayResponse, error) {
	out := new(StopRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/StopRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllRelays(ctx context.Context, in *GetAllRelaysRequest, opts ...grpc.CallOption) (*GetAllRelaysResponse, error) {
	out := new(GetAllRelaysResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllRelays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteRelay(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error) {
	out := new(DeleteRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllSchemas(ctx context.Context, in *GetAllSchemasRequest, opts ...grpc.CallOption) (*GetAllSchemasResponse, error) {
	out := new(GetAllSchemasResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ImportGithub(ctx context.Context, in *ImportGithubRequest, opts ...grpc.CallOption) (*ImportGithubResponse, error) {
	out := new(ImportGithubResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ImportGithub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ImportLocal(ctx context.Context, in *ImportLocalRequest, opts ...grpc.CallOption) (*ImportLocalResponse, error) {
	out := new(ImportLocalResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ImportLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error) {
	out := new(DeleteSchemaResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllServices(ctx context.Context, in *GetAllServicesRequest, opts ...grpc.CallOption) (*GetAllServicesResponse, error) {
	out := new(GetAllServicesResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) LinkSchemaToService(ctx context.Context, in *LinkSchemaToServiceRequest, opts ...grpc.CallOption) (*LinkSchemaToServiceResponse, error) {
	out := new(LinkSchemaToServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/LinkSchemaToService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UnlinkSchemaFromService(ctx context.Context, in *UnlinkSchemaFromServiceRequest, opts ...grpc.CallOption) (*UnlinkSchemaFromServiceResponse, error) {
	out := new(UnlinkSchemaFromServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UnlinkSchemaFromService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) LinkRepoToService(ctx context.Context, in *LinkRepoToServiceRequest, opts ...grpc.CallOption) (*LinkRepoToServiceResponse, error) {
	out := new(LinkRepoToServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/LinkRepoToService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UnlinkRepoFromService(ctx context.Context, in *UnlinkRepoFromServiceRequest, opts ...grpc.CallOption) (*UnlinkRepoFromServiceResponse, error) {
	out := new(UnlinkRepoFromServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UnlinkRepoFromService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error) {
	out := new(GetServerOptionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetServerOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) SetServerOptions(ctx context.Context, in *SetServerOptionsRequest, opts ...grpc.CallOption) (*SetServerOptionsResponse, error) {
	out := new(SetServerOptionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/SetServerOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetVCEvents(ctx context.Context, in *GetVCEventsRequest, opts ...grpc.CallOption) (PlumberServer_GetVCEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PlumberServer_serviceDesc.Streams[1], "/protos.PlumberServer/GetVCEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &plumberServerGetVCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlumberServer_GetVCEventsClient interface {
	Recv() (*VCEvent, error)
	grpc.ClientStream
}

type plumberServerGetVCEventsClient struct {
	grpc.ClientStream
}

func (x *plumberServerGetVCEventsClient) Recv() (*VCEvent, error) {
	m := new(VCEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlumberServerServer is the server API for PlumberServer service.
type PlumberServerServer interface {
	// List configured/known connections
	GetAllConnections(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	// Start reading data from a connection
	CreateRead(context.Context, *CreateReadRequest) (*CreateReadResponse, error)
	// Streams messages received off of a read
	StartRead(*StartReadRequest, PlumberServer_StartReadServer) error
	// List all reads that have been created
	GetAllReads(context.Context, *GetAllReadsRequest) (*GetAllReadsResponse, error)
	// Stop reading data from a connection
	StopRead(context.Context, *StopReadRequest) (*StopReadResponse, error)
	// Resume reading data from an existing read
	ResumeRead(context.Context, *ResumeReadRequest) (*ResumeReadResponse, error)
	// Resume reading data from an existing read
	DeleteRead(context.Context, *DeleteReadRequest) (*DeleteReadResponse, error)
	// Write data to a connection
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// Create a data relay from plumber server to the Batch platform
	CreateRelay(context.Context, *CreateRelayRequest) (*CreateRelayResponse, error)
	// Update a relay (such as API token) - relay will be interrupted!
	UpdateRelay(context.Context, *UpdateRelayRequest) (*UpdateRelayResponse, error)
	ResumeRelay(context.Context, *ResumeRelayRequest) (*ResumeRelayResponse, error)
	StopRelay(context.Context, *StopRelayRequest) (*StopRelayResponse, error)
	GetAllRelays(context.Context, *GetAllRelaysRequest) (*GetAllRelaysResponse, error)
	// Delete an existing relay
	DeleteRelay(context.Context, *DeleteRelayRequest) (*DeleteRelayResponse, error)
	// Retrieve a single schema
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	// Retrieve all schemas
	GetAllSchemas(context.Context, *GetAllSchemasRequest) (*GetAllSchemasResponse, error)
	// Import a schema from github
	ImportGithub(context.Context, *ImportGithubRequest) (*ImportGithubResponse, error)
	// Import a schema from the local file system
	ImportLocal(context.Context, *ImportLocalRequest) (*ImportLocalResponse, error)
	// Delete a schema
	DeleteSchema(context.Context, *DeleteSchemaRequest) (*DeleteSchemaResponse, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	GetAllServices(context.Context, *GetAllServicesRequest) (*GetAllServicesResponse, error)
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
	LinkSchemaToService(context.Context, *LinkSchemaToServiceRequest) (*LinkSchemaToServiceResponse, error)
	UnlinkSchemaFromService(context.Context, *UnlinkSchemaFromServiceRequest) (*UnlinkSchemaFromServiceResponse, error)
	LinkRepoToService(context.Context, *LinkRepoToServiceRequest) (*LinkRepoToServiceResponse, error)
	UnlinkRepoFromService(context.Context, *UnlinkRepoFromServiceRequest) (*UnlinkRepoFromServiceResponse, error)
	GetServerOptions(context.Context, *GetServerOptionsRequest) (*GetServerOptionsResponse, error)
	SetServerOptions(context.Context, *SetServerOptionsRequest) (*SetServerOptionsResponse, error)
	// GetVCEvents connects to vc-service backend and returns a stream of events pushed from github/bitbucket/etc
	GetVCEvents(*GetVCEventsRequest, PlumberServer_GetVCEventsServer) error
}

// UnimplementedPlumberServerServer can be embedded to have forward compatible implementations.
type UnimplementedPlumberServerServer struct {
}

func (*UnimplementedPlumberServerServer) GetAllConnections(ctx context.Context, req *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnections not implemented")
}
func (*UnimplementedPlumberServerServer) GetConnection(ctx context.Context, req *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (*UnimplementedPlumberServerServer) CreateConnection(ctx context.Context, req *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (*UnimplementedPlumberServerServer) TestConnection(ctx context.Context, req *TestConnectionRequest) (*TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateConnection(ctx context.Context, req *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteConnection(ctx context.Context, req *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (*UnimplementedPlumberServerServer) CreateRead(ctx context.Context, req *CreateReadRequest) (*CreateReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRead not implemented")
}
func (*UnimplementedPlumberServerServer) StartRead(req *StartReadRequest, srv PlumberServer_StartReadServer) error {
	return status.Errorf(codes.Unimplemented, "method StartRead not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllReads(ctx context.Context, req *GetAllReadsRequest) (*GetAllReadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReads not implemented")
}
func (*UnimplementedPlumberServerServer) StopRead(ctx context.Context, req *StopReadRequest) (*StopReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRead not implemented")
}
func (*UnimplementedPlumberServerServer) ResumeRead(ctx context.Context, req *ResumeReadRequest) (*ResumeReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRead not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteRead(ctx context.Context, req *DeleteReadRequest) (*DeleteReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRead not implemented")
}
func (*UnimplementedPlumberServerServer) Write(ctx context.Context, req *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedPlumberServerServer) CreateRelay(ctx context.Context, req *CreateRelayRequest) (*CreateRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelay not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateRelay(ctx context.Context, req *UpdateRelayRequest) (*UpdateRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelay not implemented")
}
func (*UnimplementedPlumberServerServer) ResumeRelay(ctx context.Context, req *ResumeRelayRequest) (*ResumeRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRelay not implemented")
}
func (*UnimplementedPlumberServerServer) StopRelay(ctx context.Context, req *StopRelayRequest) (*StopRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRelay not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllRelays(ctx context.Context, req *GetAllRelaysRequest) (*GetAllRelaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRelays not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteRelay(ctx context.Context, req *DeleteRelayRequest) (*DeleteRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelay not implemented")
}
func (*UnimplementedPlumberServerServer) GetSchema(ctx context.Context, req *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllSchemas(ctx context.Context, req *GetAllSchemasRequest) (*GetAllSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSchemas not implemented")
}
func (*UnimplementedPlumberServerServer) ImportGithub(ctx context.Context, req *ImportGithubRequest) (*ImportGithubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportGithub not implemented")
}
func (*UnimplementedPlumberServerServer) ImportLocal(ctx context.Context, req *ImportLocalRequest) (*ImportLocalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocal not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteSchema(ctx context.Context, req *DeleteSchemaRequest) (*DeleteSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (*UnimplementedPlumberServerServer) GetService(ctx context.Context, req *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedPlumberServerServer) GetAllServices(ctx context.Context, req *GetAllServicesRequest) (*GetAllServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServices not implemented")
}
func (*UnimplementedPlumberServerServer) CreateService(ctx context.Context, req *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedPlumberServerServer) UpdateService(ctx context.Context, req *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (*UnimplementedPlumberServerServer) DeleteService(ctx context.Context, req *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (*UnimplementedPlumberServerServer) LinkSchemaToService(ctx context.Context, req *LinkSchemaToServiceRequest) (*LinkSchemaToServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkSchemaToService not implemented")
}
func (*UnimplementedPlumberServerServer) UnlinkSchemaFromService(ctx context.Context, req *UnlinkSchemaFromServiceRequest) (*UnlinkSchemaFromServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkSchemaFromService not implemented")
}
func (*UnimplementedPlumberServerServer) LinkRepoToService(ctx context.Context, req *LinkRepoToServiceRequest) (*LinkRepoToServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkRepoToService not implemented")
}
func (*UnimplementedPlumberServerServer) UnlinkRepoFromService(ctx context.Context, req *UnlinkRepoFromServiceRequest) (*UnlinkRepoFromServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkRepoFromService not implemented")
}
func (*UnimplementedPlumberServerServer) GetServerOptions(ctx context.Context, req *GetServerOptionsRequest) (*GetServerOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerOptions not implemented")
}
func (*UnimplementedPlumberServerServer) SetServerOptions(ctx context.Context, req *SetServerOptionsRequest) (*SetServerOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerOptions not implemented")
}
func (*UnimplementedPlumberServerServer) GetVCEvents(req *GetVCEventsRequest, srv PlumberServer_GetVCEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVCEvents not implemented")
}

func RegisterPlumberServerServer(s *grpc.Server, srv PlumberServerServer) {
	s.RegisterService(&_PlumberServer_serviceDesc, srv)
}

func _PlumberServer_GetAllConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllConnections(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateRead(ctx, req.(*CreateReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StartRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlumberServerServer).StartRead(m, &plumberServerStartReadServer{stream})
}

type PlumberServer_StartReadServer interface {
	Send(*StartReadResponse) error
	grpc.ServerStream
}

type plumberServerStartReadServer struct {
	grpc.ServerStream
}

func (x *plumberServerStartReadServer) Send(m *StartReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PlumberServer_GetAllReads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllReads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllReads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllReads(ctx, req.(*GetAllReadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StopRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).StopRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/StopRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).StopRead(ctx, req.(*StopReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ResumeRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ResumeRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ResumeRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ResumeRead(ctx, req.(*ResumeReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteRead(ctx, req.(*DeleteReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateRelay(ctx, req.(*CreateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateRelay(ctx, req.(*UpdateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ResumeRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ResumeRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ResumeRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ResumeRelay(ctx, req.(*ResumeRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StopRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).StopRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/StopRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).StopRelay(ctx, req.(*StopRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllRelays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRelaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllRelays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllRelays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllRelays(ctx, req.(*GetAllRelaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteRelay(ctx, req.(*DeleteRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllSchemas(ctx, req.(*GetAllSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ImportGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ImportGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ImportGithub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ImportGithub(ctx, req.(*ImportGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ImportLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ImportLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ImportLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ImportLocal(ctx, req.(*ImportLocalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteSchema(ctx, req.(*DeleteSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllServices(ctx, req.(*GetAllServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_LinkSchemaToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkSchemaToServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).LinkSchemaToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/LinkSchemaToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).LinkSchemaToService(ctx, req.(*LinkSchemaToServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UnlinkSchemaFromService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkSchemaFromServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UnlinkSchemaFromService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UnlinkSchemaFromService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UnlinkSchemaFromService(ctx, req.(*UnlinkSchemaFromServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_LinkRepoToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRepoToServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).LinkRepoToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/LinkRepoToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).LinkRepoToService(ctx, req.(*LinkRepoToServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UnlinkRepoFromService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRepoFromServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UnlinkRepoFromService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UnlinkRepoFromService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UnlinkRepoFromService(ctx, req.(*UnlinkRepoFromServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetServerOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetServerOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetServerOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetServerOptions(ctx, req.(*GetServerOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_SetServerOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).SetServerOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/SetServerOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).SetServerOptions(ctx, req.(*SetServerOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetVCEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVCEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlumberServerServer).GetVCEvents(m, &plumberServerGetVCEventsServer{stream})
}

type PlumberServer_GetVCEventsServer interface {
	Send(*VCEvent) error
	grpc.ServerStream
}

type plumberServerGetVCEventsServer struct {
	grpc.ServerStream
}

func (x *plumberServerGetVCEventsServer) Send(m *VCEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _PlumberServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PlumberServer",
	HandlerType: (*PlumberServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllConnections",
			Handler:    _PlumberServer_GetAllConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _PlumberServer_GetConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _PlumberServer_CreateConnection_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _PlumberServer_TestConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _PlumberServer_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _PlumberServer_DeleteConnection_Handler,
		},
		{
			MethodName: "CreateRead",
			Handler:    _PlumberServer_CreateRead_Handler,
		},
		{
			MethodName: "GetAllReads",
			Handler:    _PlumberServer_GetAllReads_Handler,
		},
		{
			MethodName: "StopRead",
			Handler:    _PlumberServer_StopRead_Handler,
		},
		{
			MethodName: "ResumeRead",
			Handler:    _PlumberServer_ResumeRead_Handler,
		},
		{
			MethodName: "DeleteRead",
			Handler:    _PlumberServer_DeleteRead_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _PlumberServer_Write_Handler,
		},
		{
			MethodName: "CreateRelay",
			Handler:    _PlumberServer_CreateRelay_Handler,
		},
		{
			MethodName: "UpdateRelay",
			Handler:    _PlumberServer_UpdateRelay_Handler,
		},
		{
			MethodName: "ResumeRelay",
			Handler:    _PlumberServer_ResumeRelay_Handler,
		},
		{
			MethodName: "StopRelay",
			Handler:    _PlumberServer_StopRelay_Handler,
		},
		{
			MethodName: "GetAllRelays",
			Handler:    _PlumberServer_GetAllRelays_Handler,
		},
		{
			MethodName: "DeleteRelay",
			Handler:    _PlumberServer_DeleteRelay_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _PlumberServer_GetSchema_Handler,
		},
		{
			MethodName: "GetAllSchemas",
			Handler:    _PlumberServer_GetAllSchemas_Handler,
		},
		{
			MethodName: "ImportGithub",
			Handler:    _PlumberServer_ImportGithub_Handler,
		},
		{
			MethodName: "ImportLocal",
			Handler:    _PlumberServer_ImportLocal_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _PlumberServer_DeleteSchema_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _PlumberServer_GetService_Handler,
		},
		{
			MethodName: "GetAllServices",
			Handler:    _PlumberServer_GetAllServices_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _PlumberServer_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _PlumberServer_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _PlumberServer_DeleteService_Handler,
		},
		{
			MethodName: "LinkSchemaToService",
			Handler:    _PlumberServer_LinkSchemaToService_Handler,
		},
		{
			MethodName: "UnlinkSchemaFromService",
			Handler:    _PlumberServer_UnlinkSchemaFromService_Handler,
		},
		{
			MethodName: "LinkRepoToService",
			Handler:    _PlumberServer_LinkRepoToService_Handler,
		},
		{
			MethodName: "UnlinkRepoFromService",
			Handler:    _PlumberServer_UnlinkRepoFromService_Handler,
		},
		{
			MethodName: "GetServerOptions",
			Handler:    _PlumberServer_GetServerOptions_Handler,
		},
		{
			MethodName: "SetServerOptions",
			Handler:    _PlumberServer_SetServerOptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartRead",
			Handler:       _PlumberServer_StartRead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVCEvents",
			Handler:       _PlumberServer_GetVCEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ps_base.proto",
}
