// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/batch.proto

package opts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BatchOutputType int32

const (
	BatchOutputType_TABLE BatchOutputType = 0
	BatchOutputType_JSON  BatchOutputType = 1
)

var BatchOutputType_name = map[int32]string{
	0: "TABLE",
	1: "JSON",
}

var BatchOutputType_value = map[string]int32{
	"TABLE": 0,
	"JSON":  1,
}

func (x BatchOutputType) String() string {
	return proto.EnumName(BatchOutputType_name, int32(x))
}

func (BatchOutputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{0}
}

type BatchReplayType int32

const (
	BatchReplayType_SINGLE     BatchReplayType = 0
	BatchReplayType_CONTINUOUS BatchReplayType = 1
)

var BatchReplayType_name = map[int32]string{
	0: "SINGLE",
	1: "CONTINUOUS",
}

var BatchReplayType_value = map[string]int32{
	"SINGLE":     0,
	"CONTINUOUS": 1,
}

func (x BatchReplayType) String() string {
	return proto.EnumName(BatchReplayType_name, int32(x))
}

func (BatchReplayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{1}
}

type BatchOptions struct {
	// @gotags: kong:"help='How to output results (0: table, 1: JSON)',default=0"
	OutputType BatchOutputType `protobuf:"varint,1,opt,name=output_type,json=outputType,proto3,enum=protos.opts.BatchOutputType" json:"output_type,omitempty" kong:"help='How to output results (0: table, 1: JSON)',default=0"`
	// @gotags: kong:"help='Alternative URL to use for Batch API',default='https://api.batch.sh'"
	ApiUrl string `protobuf:"bytes,2,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty" kong:"help='Alternative URL to use for Batch API',default='https://api.batch.sh'"`
	// @gotags: kong:"embed,cmd,help='Login to the Batch platform'"
	Login *BatchLoginOptions `protobuf:"bytes,3,opt,name=login,proto3" json:"login,omitempty" kong:"embed,cmd,help='Login to the Batch platform'"`
	// @gotags: kong:"embed,cmd,help='Login to Batch'"
	Logout *BatchLogoutOptions `protobuf:"bytes,4,opt,name=logout,proto3" json:"logout,omitempty" kong:"embed,cmd,help='Login to Batch'"`
	// @gotags: kong:"embed,cmd,help='List Batch resources'"
	List *BatchListOptions `protobuf:"bytes,5,opt,name=list,proto3" json:"list,omitempty" kong:"embed,cmd,help='List Batch resources'"`
	// @gotags: kong:"embed,cmd,help='Create operations'"
	Create *BatchCreateOptions `protobuf:"bytes,6,opt,name=create,proto3" json:"create,omitempty" kong:"embed,cmd,help='Create operations'"`
	// @gotags: kong:"embed,cmd,help='Search operations'"
	Search *BatchSearchOptions `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty" kong:"embed,cmd,help='Search operations'"`
	// @gotags: kong:"embed,cmd,help='Archive a resource'"
	Archive              *BatchArchiveOptions `protobuf:"bytes,8,opt,name=archive,proto3" json:"archive,omitempty" kong:"embed,cmd,help='Archive a resource'"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BatchOptions) Reset()         { *m = BatchOptions{} }
func (m *BatchOptions) String() string { return proto.CompactTextString(m) }
func (*BatchOptions) ProtoMessage()    {}
func (*BatchOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{0}
}

func (m *BatchOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchOptions.Unmarshal(m, b)
}
func (m *BatchOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchOptions.Marshal(b, m, deterministic)
}
func (m *BatchOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOptions.Merge(m, src)
}
func (m *BatchOptions) XXX_Size() int {
	return xxx_messageInfo_BatchOptions.Size(m)
}
func (m *BatchOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOptions proto.InternalMessageInfo

func (m *BatchOptions) GetOutputType() BatchOutputType {
	if m != nil {
		return m.OutputType
	}
	return BatchOutputType_TABLE
}

func (m *BatchOptions) GetApiUrl() string {
	if m != nil {
		return m.ApiUrl
	}
	return ""
}

func (m *BatchOptions) GetLogin() *BatchLoginOptions {
	if m != nil {
		return m.Login
	}
	return nil
}

func (m *BatchOptions) GetLogout() *BatchLogoutOptions {
	if m != nil {
		return m.Logout
	}
	return nil
}

func (m *BatchOptions) GetList() *BatchListOptions {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BatchOptions) GetCreate() *BatchCreateOptions {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *BatchOptions) GetSearch() *BatchSearchOptions {
	if m != nil {
		return m.Search
	}
	return nil
}

func (m *BatchOptions) GetArchive() *BatchArchiveOptions {
	if m != nil {
		return m.Archive
	}
	return nil
}

type BatchLoginOptions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchLoginOptions) Reset()         { *m = BatchLoginOptions{} }
func (m *BatchLoginOptions) String() string { return proto.CompactTextString(m) }
func (*BatchLoginOptions) ProtoMessage()    {}
func (*BatchLoginOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{1}
}

func (m *BatchLoginOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchLoginOptions.Unmarshal(m, b)
}
func (m *BatchLoginOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchLoginOptions.Marshal(b, m, deterministic)
}
func (m *BatchLoginOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchLoginOptions.Merge(m, src)
}
func (m *BatchLoginOptions) XXX_Size() int {
	return xxx_messageInfo_BatchLoginOptions.Size(m)
}
func (m *BatchLoginOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchLoginOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchLoginOptions proto.InternalMessageInfo

type BatchLogoutOptions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchLogoutOptions) Reset()         { *m = BatchLogoutOptions{} }
func (m *BatchLogoutOptions) String() string { return proto.CompactTextString(m) }
func (*BatchLogoutOptions) ProtoMessage()    {}
func (*BatchLogoutOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{2}
}

func (m *BatchLogoutOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchLogoutOptions.Unmarshal(m, b)
}
func (m *BatchLogoutOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchLogoutOptions.Marshal(b, m, deterministic)
}
func (m *BatchLogoutOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchLogoutOptions.Merge(m, src)
}
func (m *BatchLogoutOptions) XXX_Size() int {
	return xxx_messageInfo_BatchLogoutOptions.Size(m)
}
func (m *BatchLogoutOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchLogoutOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchLogoutOptions proto.InternalMessageInfo

type BatchArchiveOptions struct {
	// @gotags: kong:"embed,cmd,help='Archive a replay'"
	Replay               *BatchArchiveReplayOptions `protobuf:"bytes,1,opt,name=replay,proto3" json:"replay,omitempty" kong:"embed,cmd,help='Archive a replay'"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *BatchArchiveOptions) Reset()         { *m = BatchArchiveOptions{} }
func (m *BatchArchiveOptions) String() string { return proto.CompactTextString(m) }
func (*BatchArchiveOptions) ProtoMessage()    {}
func (*BatchArchiveOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{3}
}

func (m *BatchArchiveOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchArchiveOptions.Unmarshal(m, b)
}
func (m *BatchArchiveOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchArchiveOptions.Marshal(b, m, deterministic)
}
func (m *BatchArchiveOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchArchiveOptions.Merge(m, src)
}
func (m *BatchArchiveOptions) XXX_Size() int {
	return xxx_messageInfo_BatchArchiveOptions.Size(m)
}
func (m *BatchArchiveOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchArchiveOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchArchiveOptions proto.InternalMessageInfo

func (m *BatchArchiveOptions) GetReplay() *BatchArchiveReplayOptions {
	if m != nil {
		return m.Replay
	}
	return nil
}

type BatchArchiveReplayOptions struct {
	// @gotags: kong:"help='Replay ID to archive',required"
	ReplayId             string   `protobuf:"bytes,1,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty" kong:"help='Replay ID to archive',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchArchiveReplayOptions) Reset()         { *m = BatchArchiveReplayOptions{} }
func (m *BatchArchiveReplayOptions) String() string { return proto.CompactTextString(m) }
func (*BatchArchiveReplayOptions) ProtoMessage()    {}
func (*BatchArchiveReplayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{4}
}

func (m *BatchArchiveReplayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchArchiveReplayOptions.Unmarshal(m, b)
}
func (m *BatchArchiveReplayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchArchiveReplayOptions.Marshal(b, m, deterministic)
}
func (m *BatchArchiveReplayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchArchiveReplayOptions.Merge(m, src)
}
func (m *BatchArchiveReplayOptions) XXX_Size() int {
	return xxx_messageInfo_BatchArchiveReplayOptions.Size(m)
}
func (m *BatchArchiveReplayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchArchiveReplayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchArchiveReplayOptions proto.InternalMessageInfo

func (m *BatchArchiveReplayOptions) GetReplayId() string {
	if m != nil {
		return m.ReplayId
	}
	return ""
}

type BatchListOptions struct {
	// @gotags: kong:"cmd,help='List all collections'"
	Collection bool `protobuf:"varint,1,opt,name=collection,proto3" json:"collection,omitempty" kong:"cmd,help='List all collections'"`
	// @gotags: kong:"cmd,help='List all destinations'"
	Destination bool `protobuf:"varint,2,opt,name=destination,proto3" json:"destination,omitempty" kong:"cmd,help='List all destinations'"`
	// @gotags: kong:"cmd,help='List all replays'"
	Replay bool `protobuf:"varint,3,opt,name=replay,proto3" json:"replay,omitempty" kong:"cmd,help='List all replays'"`
	// @gotags: kong:"cmd,help='List all schemas'"
	Schema               bool     `protobuf:"varint,4,opt,name=schema,proto3" json:"schema,omitempty" kong:"cmd,help='List all schemas'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchListOptions) Reset()         { *m = BatchListOptions{} }
func (m *BatchListOptions) String() string { return proto.CompactTextString(m) }
func (*BatchListOptions) ProtoMessage()    {}
func (*BatchListOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{5}
}

func (m *BatchListOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchListOptions.Unmarshal(m, b)
}
func (m *BatchListOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchListOptions.Marshal(b, m, deterministic)
}
func (m *BatchListOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchListOptions.Merge(m, src)
}
func (m *BatchListOptions) XXX_Size() int {
	return xxx_messageInfo_BatchListOptions.Size(m)
}
func (m *BatchListOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchListOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchListOptions proto.InternalMessageInfo

func (m *BatchListOptions) GetCollection() bool {
	if m != nil {
		return m.Collection
	}
	return false
}

func (m *BatchListOptions) GetDestination() bool {
	if m != nil {
		return m.Destination
	}
	return false
}

func (m *BatchListOptions) GetReplay() bool {
	if m != nil {
		return m.Replay
	}
	return false
}

func (m *BatchListOptions) GetSchema() bool {
	if m != nil {
		return m.Schema
	}
	return false
}

type BatchCreateOptions struct {
	// @gotags: kong:"embed,cmd,help='Create a collection'"
	Collection *BatchCreateCollectionOptions `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty" kong:"embed,cmd,help='Create a collection'"`
	// @gotags: kong:"embed,cmd,help='Create a replay'"
	Replay *BatchCreateReplayOptions `protobuf:"bytes,2,opt,name=replay,proto3" json:"replay,omitempty" kong:"embed,cmd,help='Create a replay'"`
	// @gotags: kong:"embed,cmd,help='Create a destination'"
	Destination          *BatchCreateDestinationOptions `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty" kong:"embed,cmd,help='Create a destination'"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *BatchCreateOptions) Reset()         { *m = BatchCreateOptions{} }
func (m *BatchCreateOptions) String() string { return proto.CompactTextString(m) }
func (*BatchCreateOptions) ProtoMessage()    {}
func (*BatchCreateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{6}
}

func (m *BatchCreateOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateOptions.Unmarshal(m, b)
}
func (m *BatchCreateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateOptions.Marshal(b, m, deterministic)
}
func (m *BatchCreateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateOptions.Merge(m, src)
}
func (m *BatchCreateOptions) XXX_Size() int {
	return xxx_messageInfo_BatchCreateOptions.Size(m)
}
func (m *BatchCreateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateOptions proto.InternalMessageInfo

func (m *BatchCreateOptions) GetCollection() *BatchCreateCollectionOptions {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *BatchCreateOptions) GetReplay() *BatchCreateReplayOptions {
	if m != nil {
		return m.Replay
	}
	return nil
}

func (m *BatchCreateOptions) GetDestination() *BatchCreateDestinationOptions {
	if m != nil {
		return m.Destination
	}
	return nil
}

type BatchSearchOptions struct {
	// @gotags: kong:"help='Query to perform',default='*'"
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" kong:"help='Query to perform',default='*'"`
	// @gotags: kong:"help='Collection id to query',required"
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty" kong:"help='Collection id to query',required"`
	// @gotags: kong:"help='How many results to display',default=25"
	PageSize             int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" kong:"help='How many results to display',default=25"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchSearchOptions) Reset()         { *m = BatchSearchOptions{} }
func (m *BatchSearchOptions) String() string { return proto.CompactTextString(m) }
func (*BatchSearchOptions) ProtoMessage()    {}
func (*BatchSearchOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{7}
}

func (m *BatchSearchOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchSearchOptions.Unmarshal(m, b)
}
func (m *BatchSearchOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchSearchOptions.Marshal(b, m, deterministic)
}
func (m *BatchSearchOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSearchOptions.Merge(m, src)
}
func (m *BatchSearchOptions) XXX_Size() int {
	return xxx_messageInfo_BatchSearchOptions.Size(m)
}
func (m *BatchSearchOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSearchOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSearchOptions proto.InternalMessageInfo

func (m *BatchSearchOptions) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *BatchSearchOptions) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *BatchSearchOptions) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type BatchCreateCollectionOptions struct {
	// @gotags: kong:"help='Friendly name for the collection',required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name for the collection',required"`
	// @gotags: kong:"help='Schema the collection will use (can be obtained running _plumber batch list schema_)',required"
	SchemaId string `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty" kong:"help='Schema the collection will use (can be obtained running _plumber batch list schema_)',required"`
	// @gotags: kong:"help='Optional notes for the collection'"
	Notes                string   `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Optional notes for the collection'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCreateCollectionOptions) Reset()         { *m = BatchCreateCollectionOptions{} }
func (m *BatchCreateCollectionOptions) String() string { return proto.CompactTextString(m) }
func (*BatchCreateCollectionOptions) ProtoMessage()    {}
func (*BatchCreateCollectionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{8}
}

func (m *BatchCreateCollectionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateCollectionOptions.Unmarshal(m, b)
}
func (m *BatchCreateCollectionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateCollectionOptions.Marshal(b, m, deterministic)
}
func (m *BatchCreateCollectionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateCollectionOptions.Merge(m, src)
}
func (m *BatchCreateCollectionOptions) XXX_Size() int {
	return xxx_messageInfo_BatchCreateCollectionOptions.Size(m)
}
func (m *BatchCreateCollectionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateCollectionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateCollectionOptions proto.InternalMessageInfo

func (m *BatchCreateCollectionOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BatchCreateCollectionOptions) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

func (m *BatchCreateCollectionOptions) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type BatchCreateReplayOptions struct {
	// @gotags: kong:"help='Friendly name to assign to the replay',required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name to assign to the replay',required"`
	// @gotags: kong:"help='One-time or continuous replay (default: one-time; 0: ONE_TIME, 1: CONTINUOUS)',default=0"
	Type BatchReplayType `protobuf:"varint,2,opt,name=type,proto3,enum=protos.opts.BatchReplayType" json:"type,omitempty" kong:"help='One-time or continuous replay (default: one-time; 0: ONE_TIME, 1: CONTINUOUS)',default=0"`
	// @gotags: kong:"help='Notes to attach to the replay'"
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Notes to attach to the replay'"`
	// @gotags: kong:"help='Collection ID to replay from',required"
	CollectionId string `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty" kong:"help='Collection ID to replay from',required"`
	// @gotags: kong:"help='Destination ID to replay to',required"
	DestinationId string `protobuf:"bytes,5,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty" kong:"help='Destination ID to replay to',required"`
	// @gotags: kong:"help='Search query',default='*'"
	Query string `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty" kong:"help='Search query',default='*'"`
	// @gotags: kong:"help='Where to begin search (RFC3339 timestamp)',required"
	FromTimestamp string `protobuf:"bytes,7,opt,name=from_timestamp,json=fromTimestamp,proto3" json:"from_timestamp,omitempty" kong:"help='Where to begin search (RFC3339 timestamp)',required"`
	// @gotags: kong:"help='Where to end search (RFC3339 timestamp)',required"
	ToTimestamp          string   `protobuf:"bytes,8,opt,name=to_timestamp,json=toTimestamp,proto3" json:"to_timestamp,omitempty" kong:"help='Where to end search (RFC3339 timestamp)',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCreateReplayOptions) Reset()         { *m = BatchCreateReplayOptions{} }
func (m *BatchCreateReplayOptions) String() string { return proto.CompactTextString(m) }
func (*BatchCreateReplayOptions) ProtoMessage()    {}
func (*BatchCreateReplayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{9}
}

func (m *BatchCreateReplayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateReplayOptions.Unmarshal(m, b)
}
func (m *BatchCreateReplayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateReplayOptions.Marshal(b, m, deterministic)
}
func (m *BatchCreateReplayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateReplayOptions.Merge(m, src)
}
func (m *BatchCreateReplayOptions) XXX_Size() int {
	return xxx_messageInfo_BatchCreateReplayOptions.Size(m)
}
func (m *BatchCreateReplayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateReplayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateReplayOptions proto.InternalMessageInfo

func (m *BatchCreateReplayOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BatchCreateReplayOptions) GetType() BatchReplayType {
	if m != nil {
		return m.Type
	}
	return BatchReplayType_SINGLE
}

func (m *BatchCreateReplayOptions) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *BatchCreateReplayOptions) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *BatchCreateReplayOptions) GetDestinationId() string {
	if m != nil {
		return m.DestinationId
	}
	return ""
}

func (m *BatchCreateReplayOptions) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *BatchCreateReplayOptions) GetFromTimestamp() string {
	if m != nil {
		return m.FromTimestamp
	}
	return ""
}

func (m *BatchCreateReplayOptions) GetToTimestamp() string {
	if m != nil {
		return m.ToTimestamp
	}
	return ""
}

type BatchCreateDestinationOptions struct {
	// @gotags: kong:"help='Friendly name to assign to the destination',required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name to assign to the destination',required"`
	// @gotags: kong:"help='Any notes to include with the destination'"
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Any notes to include with the destination'"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *WriteGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *WriteGroupRabbitOptions `protobuf:"bytes,101,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *WriteGroupKubeMQQueueOptions `protobuf:"bytes,102,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	Awssqs *WriteGroupAWSSQSOptions `protobuf:"bytes,103,opt,name=awssqs,proto3" json:"awssqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='HTTP Destination (POST)'"
	Http                 *HTTPDestination `protobuf:"bytes,104,opt,name=http,proto3" json:"http,omitempty" kong:"cmd,help='HTTP Destination (POST)'"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BatchCreateDestinationOptions) Reset()         { *m = BatchCreateDestinationOptions{} }
func (m *BatchCreateDestinationOptions) String() string { return proto.CompactTextString(m) }
func (*BatchCreateDestinationOptions) ProtoMessage()    {}
func (*BatchCreateDestinationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{10}
}

func (m *BatchCreateDestinationOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateDestinationOptions.Unmarshal(m, b)
}
func (m *BatchCreateDestinationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateDestinationOptions.Marshal(b, m, deterministic)
}
func (m *BatchCreateDestinationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateDestinationOptions.Merge(m, src)
}
func (m *BatchCreateDestinationOptions) XXX_Size() int {
	return xxx_messageInfo_BatchCreateDestinationOptions.Size(m)
}
func (m *BatchCreateDestinationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateDestinationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateDestinationOptions proto.InternalMessageInfo

func (m *BatchCreateDestinationOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BatchCreateDestinationOptions) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *BatchCreateDestinationOptions) GetKafka() *WriteGroupKafkaOptions {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *BatchCreateDestinationOptions) GetRabbit() *WriteGroupRabbitOptions {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *BatchCreateDestinationOptions) GetKubemqQueue() *WriteGroupKubeMQQueueOptions {
	if m != nil {
		return m.KubemqQueue
	}
	return nil
}

func (m *BatchCreateDestinationOptions) GetAwssqs() *WriteGroupAWSSQSOptions {
	if m != nil {
		return m.Awssqs
	}
	return nil
}

func (m *BatchCreateDestinationOptions) GetHttp() *HTTPDestination {
	if m != nil {
		return m.Http
	}
	return nil
}

type HTTPDestination struct {
	// @gotags: kong:"help='Full URL to HTTP server (ex: https://example.com/some/path)',required"
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" kong:"help='Full URL to HTTP server (ex: https://example.com/some/path)',required"`
	// @gotags: kong:"help='Optional map of headers to pass on replay (--headers key1:value1,key2:value2..)'"
	Headers              map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" kong:"help='Optional map of headers to pass on replay (--headers key1:value1,key2:value2..)'"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HTTPDestination) Reset()         { *m = HTTPDestination{} }
func (m *HTTPDestination) String() string { return proto.CompactTextString(m) }
func (*HTTPDestination) ProtoMessage()    {}
func (*HTTPDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_967a5fd002f4e9f3, []int{11}
}

func (m *HTTPDestination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPDestination.Unmarshal(m, b)
}
func (m *HTTPDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPDestination.Marshal(b, m, deterministic)
}
func (m *HTTPDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPDestination.Merge(m, src)
}
func (m *HTTPDestination) XXX_Size() int {
	return xxx_messageInfo_HTTPDestination.Size(m)
}
func (m *HTTPDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPDestination.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPDestination proto.InternalMessageInfo

func (m *HTTPDestination) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPDestination) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterEnum("protos.opts.BatchOutputType", BatchOutputType_name, BatchOutputType_value)
	proto.RegisterEnum("protos.opts.BatchReplayType", BatchReplayType_name, BatchReplayType_value)
	proto.RegisterType((*BatchOptions)(nil), "protos.opts.BatchOptions")
	proto.RegisterType((*BatchLoginOptions)(nil), "protos.opts.BatchLoginOptions")
	proto.RegisterType((*BatchLogoutOptions)(nil), "protos.opts.BatchLogoutOptions")
	proto.RegisterType((*BatchArchiveOptions)(nil), "protos.opts.BatchArchiveOptions")
	proto.RegisterType((*BatchArchiveReplayOptions)(nil), "protos.opts.BatchArchiveReplayOptions")
	proto.RegisterType((*BatchListOptions)(nil), "protos.opts.BatchListOptions")
	proto.RegisterType((*BatchCreateOptions)(nil), "protos.opts.BatchCreateOptions")
	proto.RegisterType((*BatchSearchOptions)(nil), "protos.opts.BatchSearchOptions")
	proto.RegisterType((*BatchCreateCollectionOptions)(nil), "protos.opts.BatchCreateCollectionOptions")
	proto.RegisterType((*BatchCreateReplayOptions)(nil), "protos.opts.BatchCreateReplayOptions")
	proto.RegisterType((*BatchCreateDestinationOptions)(nil), "protos.opts.BatchCreateDestinationOptions")
	proto.RegisterType((*HTTPDestination)(nil), "protos.opts.HTTPDestination")
	proto.RegisterMapType((map[string]string)(nil), "protos.opts.HTTPDestination.HeadersEntry")
}

func init() { proto.RegisterFile("opts/batch.proto", fileDescriptor_967a5fd002f4e9f3) }

var fileDescriptor_967a5fd002f4e9f3 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x46, 0xfe, 0x8b, 0x7d, 0xec, 0xa4, 0x66, 0xdb, 0x01, 0x51, 0xda, 0x62, 0x54, 0xd2, 0x09,
	0x99, 0xa9, 0x0d, 0x81, 0x19, 0xda, 0x40, 0x99, 0x49, 0x42, 0xa7, 0x35, 0x84, 0x84, 0xc8, 0xce,
	0x74, 0x86, 0x1b, 0xcf, 0xca, 0xde, 0xd8, 0x3b, 0x91, 0xbc, 0x8a, 0xb4, 0x6a, 0xc7, 0xbd, 0xe2,
	0x82, 0x27, 0x61, 0x78, 0x06, 0x9e, 0x8a, 0x87, 0xe8, 0xec, 0x59, 0x49, 0x96, 0x6d, 0x29, 0x57,
	0xde, 0x73, 0xce, 0xf7, 0x9d, 0xdf, 0x3d, 0x2b, 0x43, 0x5b, 0xf8, 0x32, 0xec, 0x39, 0x54, 0x8e,
	0x67, 0x5d, 0x3f, 0x10, 0x52, 0x90, 0x26, 0xfe, 0x84, 0x5d, 0x65, 0xb8, 0xaf, 0xcd, 0xef, 0x02,
	0x2e, 0x99, 0x36, 0x5b, 0xff, 0x95, 0xa1, 0x75, 0xac, 0xe0, 0xe7, 0xbe, 0xe4, 0x62, 0x1e, 0x92,
	0x17, 0xd0, 0x14, 0x91, 0xf4, 0x23, 0x39, 0x92, 0x0b, 0x9f, 0x99, 0x46, 0xc7, 0xd8, 0xdb, 0x39,
	0x78, 0xd0, 0xcd, 0x78, 0xe9, 0x6a, 0x3c, 0x82, 0x86, 0x0b, 0x9f, 0xd9, 0x20, 0xd2, 0x33, 0xf9,
	0x14, 0xb6, 0xa8, 0xcf, 0x47, 0x51, 0xe0, 0x9a, 0xa5, 0x8e, 0xb1, 0xd7, 0xb0, 0x6b, 0xd4, 0xe7,
	0x97, 0x81, 0x4b, 0xbe, 0x87, 0xaa, 0x2b, 0xa6, 0x7c, 0x6e, 0x96, 0x3b, 0xc6, 0x5e, 0xf3, 0xe0,
	0xd1, 0xa6, 0xc7, 0x53, 0x65, 0x8e, 0xd3, 0xb0, 0x35, 0x98, 0xfc, 0x00, 0x35, 0x57, 0x4c, 0x45,
	0x24, 0xcd, 0x0a, 0xd2, 0xbe, 0xc8, 0xa5, 0x89, 0x48, 0x26, 0xbc, 0x18, 0x4e, 0xbe, 0x85, 0x8a,
	0xcb, 0x43, 0x69, 0x56, 0x91, 0xf6, 0x30, 0x87, 0xc6, 0xc3, 0x94, 0x84, 0x50, 0x15, 0x6b, 0x1c,
	0x30, 0x2a, 0x99, 0x59, 0x2b, 0x8a, 0x75, 0x82, 0xf6, 0x34, 0x96, 0x86, 0x2b, 0x62, 0xc8, 0x68,
	0x30, 0x9e, 0x99, 0x5b, 0x45, 0xc4, 0x01, 0xda, 0x53, 0xa2, 0x86, 0x93, 0x43, 0xd8, 0x52, 0xbf,
	0xfc, 0x2d, 0x33, 0xeb, 0xc8, 0xec, 0x6c, 0x32, 0x8f, 0x34, 0x20, 0xa1, 0x26, 0x04, 0xeb, 0x2e,
	0x7c, 0xbc, 0xd1, 0x35, 0xeb, 0x1e, 0x90, 0xcd, 0x9e, 0x58, 0x97, 0x70, 0x37, 0xc7, 0x15, 0xf9,
	0x19, 0x6a, 0x01, 0xf3, 0x5d, 0xba, 0xc0, 0x21, 0x37, 0x0f, 0x9e, 0x14, 0x06, 0xb7, 0x11, 0x96,
	0x66, 0xaf, 0x59, 0xd6, 0x33, 0xf8, 0xac, 0x10, 0x44, 0x3e, 0x87, 0x86, 0x86, 0x8d, 0xf8, 0x04,
	0xfd, 0x37, 0xec, 0xba, 0x56, 0xf4, 0x27, 0xd6, 0xdf, 0x06, 0xb4, 0xd7, 0x87, 0x40, 0x1e, 0x01,
	0x8c, 0x85, 0xeb, 0xb2, 0xb1, 0x12, 0x91, 0x52, 0xb7, 0x33, 0x1a, 0xd2, 0x81, 0xe6, 0x84, 0x85,
	0x92, 0xcf, 0x29, 0x02, 0x4a, 0x08, 0xc8, 0xaa, 0xc8, 0x27, 0x69, 0x41, 0x65, 0x34, 0xc6, 0x92,
	0xd2, 0x87, 0xe3, 0x19, 0xf3, 0x28, 0x5e, 0xa2, 0xba, 0x1d, 0x4b, 0xd6, 0xff, 0x46, 0xdc, 0xae,
	0x95, 0xb1, 0x92, 0xfe, 0x46, 0x22, 0xcd, 0x83, 0xaf, 0x8b, 0xee, 0xc2, 0x49, 0x8a, 0x4c, 0xda,
	0x93, 0xcd, 0xf9, 0x45, 0x9a, 0x51, 0x09, 0xdd, 0xec, 0x16, 0xb9, 0xc9, 0xed, 0x30, 0x39, 0x5d,
	0x2d, 0x59, 0x6f, 0xce, 0x7e, 0x91, 0x8f, 0x5f, 0x96, 0xd0, 0xc4, 0x51, 0x96, 0x6e, 0xb9, 0x71,
	0xb5, 0x2b, 0x77, 0x91, 0xdc, 0x83, 0xea, 0x4d, 0xc4, 0x82, 0x45, 0x3c, 0x24, 0x2d, 0x90, 0xc7,
	0xb0, 0xbd, 0x2c, 0x43, 0x8d, 0x50, 0x2f, 0x73, 0x6b, 0xa9, 0xec, 0x4f, 0xd4, 0x8c, 0x7d, 0x3a,
	0x65, 0xa3, 0x90, 0xbf, 0x67, 0x98, 0x5c, 0xd5, 0xae, 0x2b, 0xc5, 0x80, 0xbf, 0x67, 0x16, 0x83,
	0x07, 0xb7, 0xb5, 0x89, 0x10, 0xa8, 0xcc, 0xa9, 0xc7, 0xe2, 0xb0, 0x78, 0x56, 0x0e, 0xf5, 0x68,
	0x96, 0x11, 0xeb, 0x5a, 0xd1, 0x9f, 0xa8, 0x44, 0xe7, 0x42, 0xb2, 0x10, 0x23, 0x35, 0x6c, 0x2d,
	0x58, 0xff, 0x94, 0xc0, 0x2c, 0xea, 0x63, 0x6e, 0x8c, 0x6f, 0xa0, 0x82, 0x0f, 0x5b, 0xa9, 0xe8,
	0x61, 0xd3, 0x2e, 0xf0, 0x61, 0x43, 0x64, 0x7e, 0xe0, 0xcd, 0x0e, 0x55, 0x72, 0x3a, 0xb4, 0x0b,
	0x3b, 0x99, 0x09, 0x28, 0x54, 0x15, 0x51, 0xdb, 0x19, 0xad, 0x2e, 0x4d, 0xcf, 0xa0, 0x96, 0x9d,
	0xc1, 0x2e, 0xec, 0x5c, 0x05, 0xc2, 0x1b, 0x49, 0xee, 0xb1, 0x50, 0x52, 0xcf, 0xc7, 0xe7, 0xa5,
	0x61, 0x6f, 0x2b, 0xed, 0x30, 0x51, 0x92, 0x2f, 0xa1, 0x25, 0x45, 0x06, 0x54, 0x47, 0x50, 0x53,
	0x8a, 0x14, 0x62, 0xfd, 0x55, 0x86, 0x87, 0xb7, 0x5e, 0x94, 0xdc, 0x4e, 0xa5, 0x75, 0x97, 0xb2,
	0x75, 0x3f, 0x87, 0xea, 0x35, 0xbd, 0xba, 0xa6, 0xe6, 0x04, 0x6f, 0xe3, 0xe3, 0x95, 0x06, 0xbe,
	0x51, 0x5f, 0x96, 0x57, 0x81, 0x88, 0xfc, 0xdf, 0x14, 0x26, 0x7d, 0xcc, 0x91, 0x41, 0x7e, 0x82,
	0x5a, 0x40, 0x1d, 0x87, 0x4b, 0x93, 0x21, 0xf7, 0xab, 0x02, 0xae, 0x8d, 0xa0, 0xe5, 0x32, 0xa0,
	0x48, 0x4e, 0xa1, 0x75, 0x1d, 0x39, 0xcc, 0xbb, 0x19, 0xdd, 0x44, 0x2c, 0x62, 0xe6, 0x55, 0xce,
	0x62, 0x66, 0xe2, 0x47, 0x0e, 0xfb, 0xfd, 0xe2, 0x42, 0x21, 0xd3, 0x65, 0xd0, 0x74, 0xd4, 0xa9,
	0x5c, 0xe8, 0xbb, 0x30, 0xbc, 0x09, 0xcd, 0xe9, 0xad, 0xb9, 0x1c, 0xbd, 0x19, 0x0c, 0x2e, 0x06,
	0x69, 0x2e, 0x9a, 0xa3, 0x2e, 0xd1, 0x4c, 0x4a, 0xdf, 0x9c, 0x21, 0x77, 0xf5, 0x12, 0xbd, 0x1e,
	0x0e, 0xff, 0xc8, 0x74, 0xd8, 0x46, 0xa4, 0xf5, 0xaf, 0x01, 0x77, 0xd6, 0x2c, 0xa4, 0x0d, 0x65,
	0xf5, 0x9d, 0xd4, 0x3d, 0x57, 0x47, 0x72, 0x02, 0x5b, 0x33, 0x46, 0x27, 0x2c, 0x50, 0x4d, 0x2f,
	0x6f, 0x94, 0xb7, 0xe6, 0xa0, 0xfb, 0x5a, 0x63, 0x5f, 0xce, 0x65, 0xb0, 0xb0, 0x13, 0xe6, 0xfd,
	0x43, 0x68, 0x65, 0x0d, 0x2a, 0xcc, 0x35, 0x4b, 0xf6, 0x5b, 0x1d, 0xd5, 0x64, 0xdf, 0x52, 0x37,
	0x62, 0xc9, 0x64, 0x51, 0x38, 0x2c, 0x3d, 0x33, 0xf6, 0x9f, 0xc0, 0x9d, 0xb5, 0xaf, 0x3b, 0x69,
	0x40, 0x75, 0x78, 0x74, 0x7c, 0xfa, 0xb2, 0xfd, 0x11, 0xa9, 0x43, 0xe5, 0xd7, 0xc1, 0xf9, 0x59,
	0xdb, 0xd8, 0x7f, 0x1a, 0xe3, 0x96, 0xcb, 0x42, 0x00, 0x6a, 0x83, 0xfe, 0xd9, 0x2b, 0x04, 0xee,
	0x00, 0x9c, 0x9c, 0x9f, 0x0d, 0xfb, 0x67, 0x97, 0xe7, 0x97, 0x83, 0xb6, 0x71, 0xfc, 0xe3, 0x9f,
	0xcf, 0xa7, 0x5c, 0xce, 0x22, 0xa7, 0x3b, 0x16, 0x9e, 0xfe, 0x7b, 0x32, 0x16, 0x81, 0xdf, 0xf3,
	0xdd, 0xc8, 0x73, 0x58, 0xf0, 0x54, 0x2f, 0x79, 0xd8, 0x73, 0x22, 0xee, 0x4e, 0x7a, 0x53, 0xd1,
	0xd3, 0x55, 0xf7, 0x54, 0xd5, 0x4e, 0x0d, 0x85, 0xef, 0x3e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x81,
	0xf3, 0x7f, 0x00, 0xdc, 0x08, 0x00, 0x00,
}
