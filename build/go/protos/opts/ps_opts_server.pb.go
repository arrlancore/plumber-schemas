// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_server.proto

package opts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerOptions struct {
	// @gotags: kong:"default=plumber1,help='Unique ID that identifies this plumber node',env='PLUMBER_SERVER_NODE_ID',required"
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" kong:"default=plumber1,help='Unique ID that identifies this plumber node',env='PLUMBER_SERVER_NODE_ID',required"`
	// @gotags: kong:"default=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa,help='ID of the plumber cluster (has to be the same across all nodes)',env='PLUMBER_SERVER_CLUSTER_ID',required"
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" kong:"default=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa,help='ID of the plumber cluster (has to be the same across all nodes)',env='PLUMBER_SERVER_CLUSTER_ID',required"`
	// @gotags: kong:"help='Host:port that the gRPC server will bind to',env='PLUMBER_SERVER_GRPC_LISTEN_ADDRESS',default=127.0.0.1:9000"
	GrpcListenAddress string `protobuf:"bytes,3,opt,name=grpc_listen_address,json=grpcListenAddress,proto3" json:"grpc_listen_address,omitempty" kong:"help='Host:port that the gRPC server will bind to',env='PLUMBER_SERVER_GRPC_LISTEN_ADDRESS',default=127.0.0.1:9000"`
	// @gotags: kong:"default=batchcorp,help='All gRPC requests require this auth token to be set',env='PLUMBER_SERVER_AUTH_TOKEN',required"
	AuthToken string `protobuf:"bytes,4,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty" kong:"default=batchcorp,help='All gRPC requests require this auth token to be set',env='PLUMBER_SERVER_AUTH_TOKEN',required"`
	// @gotags: kong:"default=plumber1=http://127.0.0.1:2380,help='InitialCluster should contain comma separated list of key=value pairs of host:port entries for ALL peers in the cluster. (Example: server1=http://192.168.1.10:2380,server2=http://192.168.1.11:2380,server3=http://192.168.1.12:2380). IMPORTANT! The list should include the address of _this_ instance.',env='PLUMBER_SERVER_INITIAL_CLUSTER',required"
	InitialCluster string `protobuf:"bytes,5,opt,name=initial_cluster,json=initialCluster,proto3" json:"initial_cluster,omitempty" kong:"default=plumber1=http://127.0.0.1:2380,help='InitialCluster should contain comma separated list of key=value pairs of host:port entries for ALL peers in the cluster. (Example: server1=http://192.168.1.10:2380,server2=http://192.168.1.11:2380,server3=http://192.168.1.12:2380). IMPORTANT! The list should include the address of _this_ instance.',env='PLUMBER_SERVER_INITIAL_CLUSTER',required"`
	// @gotags: kong:"default=http://127.0.0.1:2380,help='Address of _this_ plumber instance etcd server interface. Example: http://local-ip:2380',env='PLUMBER_SERVER_ADVERTISE_PEER_URL'"
	AdvertisePeerUrl string `protobuf:"bytes,6,opt,name=advertise_peer_url,json=advertisePeerUrl,proto3" json:"advertise_peer_url,omitempty" kong:"default=http://127.0.0.1:2380,help='Address of _this_ plumber instance etcd server interface. Example: http://local-ip:2380',env='PLUMBER_SERVER_ADVERTISE_PEER_URL'"`
	// @gotags: kong:"default=http://127.0.0.1:2379,help='Address of _this_ plumber instance etcd client interface. Example: http://local-ip:2379',env='PLUMBER_SERVER_ADVERTISE_CLIENT_URL',required"
	AdvertiseClientUrl string `protobuf:"bytes,7,opt,name=advertise_client_url,json=advertiseClientUrl,proto3" json:"advertise_client_url,omitempty" kong:"default=http://127.0.0.1:2379,help='Address of _this_ plumber instance etcd client interface. Example: http://local-ip:2379',env='PLUMBER_SERVER_ADVERTISE_CLIENT_URL',required"`
	// @gotags: kong:"default=http://127.0.0.1:2380,help='Address that _this_ plumber instance etcd server should listen on. Example: http://local-ip:2380',env='PLUMBER_SERVER_LISTENER_PEER_URL'"
	ListenerPeerUrl string `protobuf:"bytes,8,opt,name=listener_peer_url,json=listenerPeerUrl,proto3" json:"listener_peer_url,omitempty" kong:"default=http://127.0.0.1:2380,help='Address that _this_ plumber instance etcd server should listen on. Example: http://local-ip:2380',env='PLUMBER_SERVER_LISTENER_PEER_URL'"`
	// @gotags: kong:"default=http://127.0.0.1:2379,help='Address that _this_ plumber instance etcd client should listen on. Example: http://local-ip:2379',env='PLUMBER_SERVER_LISTENER_CLIENT_URL'"
	ListenerClientUrl string `protobuf:"bytes,9,opt,name=listener_client_url,json=listenerClientUrl,proto3" json:"listener_client_url,omitempty" kong:"default=http://127.0.0.1:2379,help='Address that _this_ plumber instance etcd client should listen on. Example: http://local-ip:2379',env='PLUMBER_SERVER_LISTENER_CLIENT_URL'"`
	// @gotags: kong:"default=secret,help='Secret token that ALL cluster members should use/share. If this token does not match on one of the plumber instances, this node will NOT be able to join the cluster.',env='PLUMBER_SERVER_PEER_TOKEN'"
	PeerToken string `protobuf:"bytes,10,opt,name=peer_token,json=peerToken,proto3" json:"peer_token,omitempty" kong:"default=secret,help='Secret token that ALL cluster members should use/share. If this token does not match on one of the plumber instances, this node will NOT be able to join the cluster.',env='PLUMBER_SERVER_PEER_TOKEN'"`
	// @gotags: kong:"help='VC-Service gRPC server address',default='https://vc-service.batch.sh'"
	VcserviceGrpcAddress string `protobuf:"bytes,11,opt,name=vcservice_grpc_address,json=vcserviceGrpcAddress,proto3" json:"vcservice_grpc_address,omitempty" kong:"help='VC-Service gRPC server address',default='https://vc-service.batch.sh'"`
	// @gotags: kong:"help='VC-Service gRPC  server initial connection timeout',default=5"
	VcserviceGrpcTimeoutSeconds uint32 `protobuf:"varint,12,opt,name=vcservice_grpc_timeout_seconds,json=vcserviceGrpcTimeoutSeconds,proto3" json:"vcservice_grpc_timeout_seconds,omitempty" kong:"help='VC-Service gRPC  server initial connection timeout',default=5"`
	// @gotags: kong:"help='Use gRPC insecure mode when talking to VC-Service'"
	VcserviceGrpcInsecure bool     `protobuf:"varint,13,opt,name=vcservice_grpc_insecure,json=vcserviceGrpcInsecure,proto3" json:"vcservice_grpc_insecure,omitempty" kong:"help='Use gRPC insecure mode when talking to VC-Service'"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ServerOptions) Reset()         { *m = ServerOptions{} }
func (m *ServerOptions) String() string { return proto.CompactTextString(m) }
func (*ServerOptions) ProtoMessage()    {}
func (*ServerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_72fba0b7ae2941aa, []int{0}
}

func (m *ServerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerOptions.Unmarshal(m, b)
}
func (m *ServerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerOptions.Marshal(b, m, deterministic)
}
func (m *ServerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerOptions.Merge(m, src)
}
func (m *ServerOptions) XXX_Size() int {
	return xxx_messageInfo_ServerOptions.Size(m)
}
func (m *ServerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ServerOptions proto.InternalMessageInfo

func (m *ServerOptions) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ServerOptions) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ServerOptions) GetGrpcListenAddress() string {
	if m != nil {
		return m.GrpcListenAddress
	}
	return ""
}

func (m *ServerOptions) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *ServerOptions) GetInitialCluster() string {
	if m != nil {
		return m.InitialCluster
	}
	return ""
}

func (m *ServerOptions) GetAdvertisePeerUrl() string {
	if m != nil {
		return m.AdvertisePeerUrl
	}
	return ""
}

func (m *ServerOptions) GetAdvertiseClientUrl() string {
	if m != nil {
		return m.AdvertiseClientUrl
	}
	return ""
}

func (m *ServerOptions) GetListenerPeerUrl() string {
	if m != nil {
		return m.ListenerPeerUrl
	}
	return ""
}

func (m *ServerOptions) GetListenerClientUrl() string {
	if m != nil {
		return m.ListenerClientUrl
	}
	return ""
}

func (m *ServerOptions) GetPeerToken() string {
	if m != nil {
		return m.PeerToken
	}
	return ""
}

func (m *ServerOptions) GetVcserviceGrpcAddress() string {
	if m != nil {
		return m.VcserviceGrpcAddress
	}
	return ""
}

func (m *ServerOptions) GetVcserviceGrpcTimeoutSeconds() uint32 {
	if m != nil {
		return m.VcserviceGrpcTimeoutSeconds
	}
	return 0
}

func (m *ServerOptions) GetVcserviceGrpcInsecure() bool {
	if m != nil {
		return m.VcserviceGrpcInsecure
	}
	return false
}

func init() {
	proto.RegisterType((*ServerOptions)(nil), "protos.opts.ServerOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_server.proto", fileDescriptor_72fba0b7ae2941aa) }

var fileDescriptor_72fba0b7ae2941aa = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x51, 0x6b, 0x53, 0x31,
	0x14, 0xc7, 0xa9, 0xce, 0x6e, 0x3d, 0xb3, 0xce, 0x65, 0xd3, 0x5d, 0x91, 0x49, 0xf1, 0xc5, 0x22,
	0x7a, 0xaf, 0xa0, 0x08, 0xe2, 0x93, 0xf6, 0x41, 0x0a, 0x82, 0xd2, 0xcd, 0x17, 0x5f, 0xc2, 0xbd,
	0xc9, 0xa1, 0x0d, 0xa6, 0x49, 0x38, 0x49, 0xfa, 0x2d, 0xfd, 0x4e, 0x92, 0xa4, 0xb7, 0x75, 0x7d,
	0x0a, 0x39, 0xbf, 0xdf, 0xf9, 0x97, 0xfe, 0x6f, 0xe0, 0x99, 0x75, 0xc1, 0x37, 0xce, 0xf3, 0x74,
	0x72, 0x8f, 0xb4, 0x41, 0xaa, 0x1d, 0xd9, 0x60, 0xd9, 0x69, 0x3e, 0x7c, 0x9d, 0xc8, 0xcb, 0xbf,
	0x47, 0x30, 0xbe, 0xc9, 0xf4, 0x87, 0x0b, 0xca, 0x1a, 0xcf, 0xae, 0xe0, 0xd8, 0x58, 0x89, 0x5c,
	0xc9, 0x6a, 0x30, 0x19, 0x4c, 0x47, 0x8b, 0x61, 0xba, 0xce, 0x25, 0xbb, 0x06, 0x10, 0x3a, 0xfa,
	0x80, 0x94, 0xd8, 0xbd, 0xcc, 0x46, 0xdb, 0xc9, 0x5c, 0xb2, 0x1a, 0x2e, 0x96, 0xe4, 0x04, 0xd7,
	0xca, 0x07, 0x34, 0xbc, 0x95, 0x92, 0xd0, 0xfb, 0xea, 0x7e, 0xf6, 0xce, 0x13, 0xfa, 0x9e, 0xc9,
	0x97, 0x02, 0x52, 0x5c, 0x1b, 0xc3, 0x8a, 0x07, 0xfb, 0x07, 0x4d, 0x75, 0x54, 0xe2, 0xd2, 0xe4,
	0x36, 0x0d, 0xd8, 0x2b, 0x38, 0x53, 0x46, 0x05, 0xd5, 0x6a, 0xbe, 0xfd, 0x8d, 0xea, 0x41, 0x76,
	0x1e, 0x6d, 0xc7, 0xb3, 0x32, 0x65, 0x6f, 0x80, 0xb5, 0x72, 0x83, 0x14, 0x94, 0x47, 0xee, 0x10,
	0x89, 0x47, 0xd2, 0xd5, 0x30, 0xbb, 0x8f, 0x77, 0xe4, 0x27, 0x22, 0xfd, 0x22, 0xcd, 0xde, 0xc1,
	0xe5, 0xde, 0x16, 0x5a, 0xa1, 0x09, 0xd9, 0x3f, 0xce, 0xfe, 0x3e, 0x69, 0x96, 0x51, 0xda, 0x78,
	0x0d, 0xe7, 0xe5, 0x2f, 0x21, 0xed, 0xe3, 0x4f, 0xb2, 0x7e, 0xd6, 0x83, 0x3e, 0xbd, 0x86, 0x8b,
	0x9d, 0xfb, 0x5f, 0xf8, 0xa8, 0x74, 0xd0, 0xa3, 0x7d, 0xf6, 0x35, 0x40, 0x8e, 0x2c, 0x1d, 0x40,
	0xe9, 0x20, 0x4d, 0x4a, 0x07, 0x1f, 0xe0, 0xe9, 0x46, 0xa4, 0x6f, 0xa7, 0x04, 0xf2, 0x5c, 0x6e,
	0xdf, 0xea, 0x69, 0x56, 0x2f, 0x77, 0xf4, 0x1b, 0x39, 0xd1, 0x17, 0x3b, 0x83, 0x17, 0x07, 0x5b,
	0x41, 0xad, 0xd1, 0xc6, 0xc0, 0x3d, 0x0a, 0x6b, 0xa4, 0xaf, 0x1e, 0x4e, 0x06, 0xd3, 0xf1, 0xe2,
	0xf9, 0x9d, 0xed, 0xdb, 0xe2, 0xdc, 0x14, 0x85, 0x7d, 0x84, 0xab, 0x83, 0x10, 0x65, 0x3c, 0x8a,
	0x48, 0x58, 0x8d, 0x27, 0x83, 0xe9, 0xc9, 0xe2, 0xc9, 0x9d, 0xed, 0xf9, 0x16, 0x7e, 0xfd, 0xfc,
	0xfb, 0xd3, 0x52, 0x85, 0x55, 0xec, 0x6a, 0x61, 0xd7, 0x4d, 0xd7, 0x06, 0xb1, 0x12, 0x96, 0x5c,
	0xe3, 0x74, 0x5c, 0x77, 0x48, 0x6f, 0xbd, 0x58, 0xe1, 0xba, 0xf5, 0x4d, 0x17, 0x95, 0x96, 0xcd,
	0xd2, 0x36, 0xe5, 0x31, 0x36, 0xe9, 0x31, 0x76, 0xc3, 0x7c, 0x79, 0xff, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0x6b, 0x85, 0x9c, 0xbd, 0x02, 0x00, 0x00,
}
