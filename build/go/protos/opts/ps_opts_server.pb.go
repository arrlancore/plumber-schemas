// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_server.proto

package opts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerOptions struct {
	// @gotags: kong:"default=plumber1,help='Unique ID that identifies this plumber node',env='PLUMBER_SERVER_NODE_ID',required"
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" kong:"default=plumber1,help='Unique ID that identifies this plumber node',env='PLUMBER_SERVER_NODE_ID',required"`
	// @gotags: kong:"default=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa,help='ID of the plumber cluster (has to be the same across all nodes)',env='PLUMBER_SERVER_CLUSTER_ID',required"
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" kong:"default=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa,help='ID of the plumber cluster (has to be the same across all nodes)',env='PLUMBER_SERVER_CLUSTER_ID',required"`
	// @gotags: kong:"help='Host:port that the gRPC server will bind to',env='PLUMBER_SERVER_GRPC_LISTEN_ADDRESS',default=0.0.0.0:9090"
	GrpcListenAddress string `protobuf:"bytes,3,opt,name=grpc_listen_address,json=grpcListenAddress,proto3" json:"grpc_listen_address,omitempty" kong:"help='Host:port that the gRPC server will bind to',env='PLUMBER_SERVER_GRPC_LISTEN_ADDRESS',default=0.0.0.0:9090"`
	// @gotags: kong:"default=batchcorp,help='All gRPC requests require this auth token to be set',env='PLUMBER_SERVER_AUTH_TOKEN',required"
	AuthToken string `protobuf:"bytes,4,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty" kong:"default=batchcorp,help='All gRPC requests require this auth token to be set',env='PLUMBER_SERVER_AUTH_TOKEN',required"`
	// @gotags: kong:"help='Comma separated list of NATS server URLs (can contain user:password if using auth; only used if --enable-cluster is true)',env='PLUMBER_SERVER_NATS_URL',default='nats://localhost:4222'"
	NatsUrl []string `protobuf:"bytes,5,rep,name=nats_url,json=natsUrl,proto3" json:"nats_url,omitempty" kong:"help='Comma separated list of NATS server URLs (can contain user:password if using auth; only used if --enable-cluster is true)',env='PLUMBER_SERVER_NATS_URL',default='nats://localhost:4222'"`
	// @gotags: kong:"help='Whether to use TLS (only used if --enable-cluster is true)',env='PLUMBER_SERVER_USE_TLS'"
	UseTls bool `protobuf:"varint,500,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" kong:"help='Whether to use TLS (only used if --enable-cluster is true)',env='PLUMBER_SERVER_USE_TLS'"`
	// @gotags: kong:"help='TLS client cert file (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_CERT_FILE'"
	TlsCertFile string `protobuf:"bytes,6,opt,name=tls_cert_file,json=tlsCertFile,proto3" json:"tls_cert_file,omitempty" kong:"help='TLS client cert file (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_CERT_FILE'"`
	// @gotags: kong:"help='TLS client key file (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_KEY_FILE'"
	TlsKeyFile string `protobuf:"bytes,7,opt,name=tls_key_file,json=tlsKeyFile,proto3" json:"tls_key_file,omitempty" kong:"help='TLS client key file (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_KEY_FILE'"`
	// @gotags: kong:"help='TLS CA certificate file (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_CA_FILE'"
	TlsCaFile string `protobuf:"bytes,8,opt,name=tls_ca_file,json=tlsCaFile,proto3" json:"tls_ca_file,omitempty" kong:"help='TLS CA certificate file (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_CA_FILE'"`
	// @gotags: kong:"help='Skip server cert verification (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_SKIP_VERIFY',default=false"
	TlsSkipVerify bool `protobuf:"varint,9,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Skip server cert verification (only used if --enable-cluster is true)',env='PLUMBER_SERVER_TLS_SKIP_VERIFY',default=false"`
	// @gotags: kong:"help='Run plumber in cluster mode (will use NATS)',env='PLUMBER_SERVER_ENABLE_CLUSTER',default=false"
	EnableCluster bool `protobuf:"varint,10,opt,name=enable_cluster,json=enableCluster,proto3" json:"enable_cluster,omitempty" kong:"help='Run plumber in cluster mode (will use NATS)',env='PLUMBER_SERVER_ENABLE_CLUSTER',default=false"`
	// @gotags: kong:"help='VC-Service gRPC server address',default='https://vc-service.batch.sh'"
	VcserviceGrpcAddress string `protobuf:"bytes,11,opt,name=vcservice_grpc_address,json=vcserviceGrpcAddress,proto3" json:"vcservice_grpc_address,omitempty" kong:"help='VC-Service gRPC server address',default='https://vc-service.batch.sh'"`
	// @gotags: kong:"help='VC-Service gRPC  server initial connection timeout',default=5"
	VcserviceGrpcTimeoutSeconds uint32 `protobuf:"varint,12,opt,name=vcservice_grpc_timeout_seconds,json=vcserviceGrpcTimeoutSeconds,proto3" json:"vcservice_grpc_timeout_seconds,omitempty" kong:"help='VC-Service gRPC  server initial connection timeout',default=5"`
	// @gotags: kong:"help='Use gRPC insecure mode when talking to VC-Service'"
	VcserviceGrpcInsecure bool `protobuf:"varint,13,opt,name=vcservice_grpc_insecure,json=vcserviceGrpcInsecure,proto3" json:"vcservice_grpc_insecure,omitempty" kong:"help='Use gRPC insecure mode when talking to VC-Service'"`
	// @gotags: kong:"help='Location to store time-series data for counters',default='./.tsdata'"
	StatsDatabasePath string `protobuf:"bytes,14,opt,name=stats_database_path,json=statsDatabasePath,proto3" json:"stats_database_path,omitempty" kong:"help='Location to store time-series data for counters',default='./.tsdata'"`
	// @gotags: kong:"help='How often to flush time-series data (in seconds) from memory to storage',default='60'"
	StatsFlushIntervalSeconds int32 `protobuf:"varint,15,opt,name=stats_flush_interval_seconds,json=statsFlushIntervalSeconds,proto3" json:"stats_flush_interval_seconds,omitempty" kong:"help='How often to flush time-series data (in seconds) from memory to storage',default='60'"`
	// @gotags: kong:"help='What address to bind the built-in HTTP server to',default='0.0.0.0:9191'"
	HttpListenAddress string `protobuf:"bytes,16,opt,name=http_listen_address,json=httpListenAddress,proto3" json:"http_listen_address,omitempty" kong:"help='What address to bind the built-in HTTP server to',default='0.0.0.0:9191'"`
	// @gotags: kong:"help='Allow plumber to be controlled from https://console.batch.sh',env='PLUMBER_REMOTE_CONTROL_ENABLED',default=false"
	RemoteControlEnabled bool `protobuf:"varint,17,opt,name=remote_control_enabled,json=remoteControlEnabled,proto3" json:"remote_control_enabled,omitempty" kong:"help='Allow plumber to be controlled from https://console.batch.sh',env='PLUMBER_REMOTE_CONTROL_ENABLED',default=false"`
	// @gotags: kong:"help='Address of Batch.sh Plumber remote control service',env='PLUMBER_REMOTE_CONTROL_ADDRESS',default='0.0.0.0:9897'"
	RemoteControlAddress string   `protobuf:"bytes,18,opt,name=remote_control_address,json=remoteControlAddress,proto3" json:"remote_control_address,omitempty" kong:"help='Address of Batch.sh Plumber remote control service',env='PLUMBER_REMOTE_CONTROL_ADDRESS',default='0.0.0.0:9897'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerOptions) Reset()         { *m = ServerOptions{} }
func (m *ServerOptions) String() string { return proto.CompactTextString(m) }
func (*ServerOptions) ProtoMessage()    {}
func (*ServerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_72fba0b7ae2941aa, []int{0}
}

func (m *ServerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerOptions.Unmarshal(m, b)
}
func (m *ServerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerOptions.Marshal(b, m, deterministic)
}
func (m *ServerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerOptions.Merge(m, src)
}
func (m *ServerOptions) XXX_Size() int {
	return xxx_messageInfo_ServerOptions.Size(m)
}
func (m *ServerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ServerOptions proto.InternalMessageInfo

func (m *ServerOptions) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ServerOptions) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ServerOptions) GetGrpcListenAddress() string {
	if m != nil {
		return m.GrpcListenAddress
	}
	return ""
}

func (m *ServerOptions) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *ServerOptions) GetNatsUrl() []string {
	if m != nil {
		return m.NatsUrl
	}
	return nil
}

func (m *ServerOptions) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *ServerOptions) GetTlsCertFile() string {
	if m != nil {
		return m.TlsCertFile
	}
	return ""
}

func (m *ServerOptions) GetTlsKeyFile() string {
	if m != nil {
		return m.TlsKeyFile
	}
	return ""
}

func (m *ServerOptions) GetTlsCaFile() string {
	if m != nil {
		return m.TlsCaFile
	}
	return ""
}

func (m *ServerOptions) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

func (m *ServerOptions) GetEnableCluster() bool {
	if m != nil {
		return m.EnableCluster
	}
	return false
}

func (m *ServerOptions) GetVcserviceGrpcAddress() string {
	if m != nil {
		return m.VcserviceGrpcAddress
	}
	return ""
}

func (m *ServerOptions) GetVcserviceGrpcTimeoutSeconds() uint32 {
	if m != nil {
		return m.VcserviceGrpcTimeoutSeconds
	}
	return 0
}

func (m *ServerOptions) GetVcserviceGrpcInsecure() bool {
	if m != nil {
		return m.VcserviceGrpcInsecure
	}
	return false
}

func (m *ServerOptions) GetStatsDatabasePath() string {
	if m != nil {
		return m.StatsDatabasePath
	}
	return ""
}

func (m *ServerOptions) GetStatsFlushIntervalSeconds() int32 {
	if m != nil {
		return m.StatsFlushIntervalSeconds
	}
	return 0
}

func (m *ServerOptions) GetHttpListenAddress() string {
	if m != nil {
		return m.HttpListenAddress
	}
	return ""
}

func (m *ServerOptions) GetRemoteControlEnabled() bool {
	if m != nil {
		return m.RemoteControlEnabled
	}
	return false
}

func (m *ServerOptions) GetRemoteControlAddress() string {
	if m != nil {
		return m.RemoteControlAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerOptions)(nil), "protos.opts.ServerOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_server.proto", fileDescriptor_72fba0b7ae2941aa) }

var fileDescriptor_72fba0b7ae2941aa = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xc1, 0x6e, 0x13, 0x3d,
	0x10, 0xc7, 0x95, 0xaf, 0x5f, 0x93, 0xc6, 0x69, 0x5a, 0xea, 0x96, 0xd6, 0x15, 0x50, 0x45, 0x95,
	0x40, 0xb9, 0x90, 0x3d, 0x50, 0x21, 0x21, 0x0e, 0x08, 0x02, 0x45, 0x11, 0x48, 0xa0, 0xb4, 0x70,
	0xe0, 0x62, 0x79, 0xbd, 0xd3, 0xae, 0x15, 0x67, 0xbd, 0xf2, 0xcc, 0x46, 0xea, 0xdb, 0xf1, 0x50,
	0x3c, 0x00, 0xb2, 0xbd, 0xa9, 0x94, 0x8a, 0xd3, 0xca, 0xf3, 0xfb, 0xcf, 0x7f, 0x66, 0x67, 0x6c,
	0x76, 0xea, 0x6a, 0xc2, 0xac, 0x46, 0x19, 0xbe, 0x12, 0xc1, 0xaf, 0xc0, 0x4f, 0x6a, 0xef, 0xc8,
	0xf1, 0x41, 0xfc, 0xe0, 0x24, 0x90, 0xf3, 0xdf, 0x5d, 0x36, 0xbc, 0x8a, 0xf4, 0x5b, 0x4d, 0xc6,
	0x55, 0xc8, 0x4f, 0x58, 0xaf, 0x72, 0x05, 0x48, 0x53, 0x88, 0xce, 0xa8, 0x33, 0xee, 0xcf, 0xbb,
	0xe1, 0x38, 0x2b, 0xf8, 0x33, 0xc6, 0xb4, 0x6d, 0x90, 0xc0, 0x07, 0xf6, 0x5f, 0x64, 0xfd, 0x36,
	0x32, 0x2b, 0xf8, 0x84, 0x1d, 0xde, 0xfa, 0x5a, 0x4b, 0x6b, 0x90, 0xa0, 0x92, 0xaa, 0x28, 0x3c,
	0x20, 0x8a, 0xad, 0xa8, 0x3b, 0x08, 0xe8, 0x6b, 0x24, 0xef, 0x13, 0x08, 0x76, 0xaa, 0xa1, 0x52,
	0x92, 0x5b, 0x40, 0x25, 0xfe, 0x4f, 0x76, 0x21, 0x72, 0x1d, 0x02, 0xfc, 0x94, 0xed, 0x54, 0x8a,
	0x50, 0x36, 0xde, 0x8a, 0xed, 0xd1, 0xd6, 0xb8, 0x3f, 0xef, 0x85, 0xf3, 0x0f, 0x6f, 0xb9, 0x60,
	0xbd, 0x06, 0x41, 0x92, 0x45, 0xf1, 0x27, 0xd8, 0xef, 0xcc, 0xbb, 0x0d, 0xc2, 0xb5, 0x45, 0x7e,
	0xce, 0x86, 0x64, 0x51, 0x6a, 0xf0, 0x24, 0x6f, 0x8c, 0x05, 0xd1, 0x8d, 0xb6, 0x03, 0xb2, 0x38,
	0x05, 0x4f, 0x97, 0xc6, 0x02, 0x1f, 0xb1, 0xdd, 0xa0, 0x59, 0xc0, 0x5d, 0x92, 0xf4, 0xa2, 0x84,
	0x91, 0xc5, 0x2f, 0x70, 0x17, 0x15, 0x67, 0x6c, 0x10, 0x5d, 0x54, 0x12, 0xec, 0xa4, 0xd6, 0x82,
	0x87, 0x8a, 0xfc, 0x05, 0xdb, 0x0f, 0x1c, 0x17, 0xa6, 0x96, 0x2b, 0xf0, 0xe6, 0xe6, 0x4e, 0xf4,
	0x63, 0x1b, 0xa1, 0xf8, 0xd5, 0xc2, 0xd4, 0x3f, 0x63, 0x90, 0x3f, 0x67, 0x7b, 0x50, 0xa9, 0xdc,
	0x82, 0x6c, 0xa7, 0x24, 0x58, 0x92, 0xa5, 0xe8, 0x34, 0x05, 0xf9, 0x05, 0x3b, 0x5e, 0xe9, 0xb0,
	0x21, 0xa3, 0x41, 0xc6, 0x11, 0xae, 0x67, 0x37, 0x88, 0x95, 0x8f, 0xee, 0xe9, 0x67, 0x5f, 0xeb,
	0xf5, 0xf8, 0xa6, 0xec, 0xec, 0x41, 0x16, 0x99, 0x25, 0xb8, 0x86, 0x24, 0x82, 0x76, 0x55, 0x81,
	0x62, 0x77, 0xd4, 0x19, 0x0f, 0xe7, 0x4f, 0x36, 0xb2, 0xaf, 0x93, 0xe6, 0x2a, 0x49, 0xf8, 0x6b,
	0x76, 0xf2, 0xc0, 0xc4, 0x54, 0x08, 0xba, 0xf1, 0x20, 0x86, 0xb1, 0xd5, 0xc7, 0x1b, 0xd9, 0xb3,
	0x16, 0x86, 0x5d, 0x23, 0x85, 0xed, 0x14, 0x8a, 0x54, 0xae, 0x10, 0x64, 0xad, 0xa8, 0x14, 0x7b,
	0x69, 0xd7, 0x11, 0x7d, 0x6c, 0xc9, 0x77, 0x45, 0x25, 0x7f, 0xc7, 0x9e, 0x26, 0xfd, 0x8d, 0x6d,
	0xb0, 0x94, 0xa6, 0x22, 0xf0, 0x2b, 0x65, 0xef, 0x5b, 0xdd, 0x1f, 0x75, 0xc6, 0xdb, 0xf3, 0xd3,
	0xa8, 0xb9, 0x0c, 0x92, 0x59, 0xab, 0x58, 0x37, 0x3a, 0x61, 0x87, 0x25, 0x51, 0xfd, 0xf0, 0x72,
	0x3d, 0x4a, 0x05, 0x03, 0xda, 0xbc, 0x5c, 0x17, 0xec, 0xd8, 0xc3, 0xd2, 0x11, 0x48, 0xed, 0x2a,
	0xf2, 0xce, 0xca, 0x34, 0xf3, 0x42, 0x1c, 0xc4, 0xff, 0x3a, 0x4a, 0x74, 0x9a, 0xe0, 0xa7, 0xc4,
	0xfe, 0x91, 0xb5, 0x2e, 0xc4, 0xd3, 0x26, 0x36, 0xb2, 0xda, 0x5a, 0x1f, 0xde, 0xfe, 0x7a, 0x73,
	0x6b, 0xa8, 0x6c, 0xf2, 0x89, 0x76, 0xcb, 0x2c, 0x57, 0xa4, 0x4b, 0xed, 0x7c, 0x9d, 0xd5, 0xb6,
	0x59, 0xe6, 0xe0, 0x5f, 0xa2, 0x2e, 0x61, 0xa9, 0x30, 0xcb, 0x1b, 0x63, 0x8b, 0xec, 0xd6, 0x65,
	0xe9, 0xfd, 0x65, 0xe1, 0xfd, 0xe5, 0xdd, 0x78, 0x78, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb9,
	0xd8, 0x25, 0x92, 0xb0, 0x03, 0x00, 0x00,
}
