// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/relay.proto

package opts

import (
	fmt "fmt"
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RelayCLIOptions struct {
	// @gotags: kong:"help='What address to bind the built-in HTTP server to',default='http://localhost:9191'"
	HttpListenAddress    string   `protobuf:"bytes,1,opt,name=http_listen_address,json=httpListenAddress,proto3" json:"http_listen_address,omitempty" kong:"help='What address to bind the built-in HTTP server to',default='http://localhost:9191'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelayCLIOptions) Reset()         { *m = RelayCLIOptions{} }
func (m *RelayCLIOptions) String() string { return proto.CompactTextString(m) }
func (*RelayCLIOptions) ProtoMessage()    {}
func (*RelayCLIOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{0}
}

func (m *RelayCLIOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayCLIOptions.Unmarshal(m, b)
}
func (m *RelayCLIOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayCLIOptions.Marshal(b, m, deterministic)
}
func (m *RelayCLIOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayCLIOptions.Merge(m, src)
}
func (m *RelayCLIOptions) XXX_Size() int {
	return xxx_messageInfo_RelayCLIOptions.Size(m)
}
func (m *RelayCLIOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayCLIOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayCLIOptions proto.InternalMessageInfo

func (m *RelayCLIOptions) GetHttpListenAddress() string {
	if m != nil {
		return m.HttpListenAddress
	}
	return ""
}

// Relay is the structure that backends accept for facilitating a relay.
// NOTE: _conn is only used by the CLI - desktop does not need to set it.
type RelayOptions struct {
	// @gotags: kong:"help='Secret collection token',name=token,required"
	CollectionToken string `protobuf:"bytes,1,opt,name=collection_token,json=collectionToken,proto3" json:"collection_token,omitempty" kong:"help='Secret collection token',name=token,required"`
	// @gotags: kong:"help='How many messages to send in a single batch',default=1000"
	BatchSize int32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty" kong:"help='How many messages to send in a single batch',default=1000"`
	// @gotags: kong:"help='How many times plumber will try re-sending a batch',default=3"
	BatchMaxRetry int32 `protobuf:"varint,3,opt,name=batch_max_retry,json=batchMaxRetry,proto3" json:"batch_max_retry,omitempty" kong:"help='How many times plumber will try re-sending a batch',default=3"`
	// Required for desktop; ignored in CLI.
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// @gotags: kong:"name='How many workers to launch per relay',default=10"
	NumWorkers int32 `protobuf:"varint,5,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty" kong:"name='How many workers to launch per relay',default=10"`
	// @gotags: kong:"help='Alternative collector to relay events to',name='grpc-address',default='grpc-collector.batch.sh:9000'"
	XBatchshGrpcAddress string `protobuf:"bytes,1000,opt,name=_batchsh_grpc_address,json=BatchshGrpcAddress,proto3" json:"_batchsh_grpc_address,omitempty" kong:"help='Alternative collector to relay events to',name='grpc-address',default='grpc-collector.batch.sh:9000'"`
	// @gotags: kong:"help='Whether to use TLS with collector',name=grpc-disable-tls,default=true"
	XBatchshGrpcDisableTls bool `protobuf:"varint,1001,opt,name=_batchsh_grpc_disable_tls,json=BatchshGrpcDisableTls,proto3" json:"_batchsh_grpc_disable_tls,omitempty" kong:"help='Whether to use TLS with collector',name=grpc-disable-tls,default=true"`
	// @gotags: kong:"help='How long to wait before giving up talking to the gRPC collector',name='grpc-timeout-seconds'"
	XBatchshGrpcTimeoutSeconds int32 `protobuf:"varint,1002,opt,name=_batchsh_grpc_timeout_seconds,json=BatchshGrpcTimeoutSeconds,proto3" json:"_batchsh_grpc_timeout_seconds,omitempty" kong:"help='How long to wait before giving up talking to the gRPC collector',name='grpc-timeout-seconds'"`
	// ID of the created relay entry; populated by plumber.
	// @gotags: kong:"-"
	XRelayId string `protobuf:"bytes,1003,opt,name=_relay_id,json=RelayId,proto3" json:"_relay_id,omitempty" kong:"-"`
	// @gotags: kong:"embed"
	XCliOptions *RelayCLIOptions `protobuf:"bytes,1004,opt,name=_cli_options,json=CliOptions,proto3" json:"_cli_options,omitempty" kong:"embed"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *RelayGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	Awssqs *RelayGroupAWSSQSOptions `protobuf:"bytes,101,opt,name=awssqs,proto3" json:"awssqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='MongoDB (CDC)'"
	Mongo *RelayGroupMongoOptions `protobuf:"bytes,102,opt,name=mongo,proto3" json:"mongo,omitempty" kong:"cmd,help='MongoDB (CDC)'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *RelayGroupNSQOptions `protobuf:"bytes,103,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Rabbit *RelayGroupRabbitOptions `protobuf:"bytes,104,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *RelayGroupMQTTOptions `protobuf:"bytes,105,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *RelayGroupAzureServiceBusOptions `protobuf:"bytes,106,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *RelayGroupGCPPubSubOptions `protobuf:"bytes,107,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *RelayGroupKubeMQQueueOptions `protobuf:"bytes,108,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *RelayGroupRedisPubSubOptions `protobuf:"bytes,109,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *RelayGroupRedisStreamsOptions `protobuf:"bytes,111,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='PostgreSQL (CDC)'"
	Postgres             *RelayGroupPostgresOptions `protobuf:"bytes,112,opt,name=postgres,proto3" json:"postgres,omitempty" kong:"cmd,help='PostgreSQL (CDC)'"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RelayOptions) Reset()         { *m = RelayOptions{} }
func (m *RelayOptions) String() string { return proto.CompactTextString(m) }
func (*RelayOptions) ProtoMessage()    {}
func (*RelayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{1}
}

func (m *RelayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayOptions.Unmarshal(m, b)
}
func (m *RelayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayOptions.Marshal(b, m, deterministic)
}
func (m *RelayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayOptions.Merge(m, src)
}
func (m *RelayOptions) XXX_Size() int {
	return xxx_messageInfo_RelayOptions.Size(m)
}
func (m *RelayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayOptions proto.InternalMessageInfo

func (m *RelayOptions) GetCollectionToken() string {
	if m != nil {
		return m.CollectionToken
	}
	return ""
}

func (m *RelayOptions) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *RelayOptions) GetBatchMaxRetry() int32 {
	if m != nil {
		return m.BatchMaxRetry
	}
	return 0
}

func (m *RelayOptions) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *RelayOptions) GetNumWorkers() int32 {
	if m != nil {
		return m.NumWorkers
	}
	return 0
}

func (m *RelayOptions) GetXBatchshGrpcAddress() string {
	if m != nil {
		return m.XBatchshGrpcAddress
	}
	return ""
}

func (m *RelayOptions) GetXBatchshGrpcDisableTls() bool {
	if m != nil {
		return m.XBatchshGrpcDisableTls
	}
	return false
}

func (m *RelayOptions) GetXBatchshGrpcTimeoutSeconds() int32 {
	if m != nil {
		return m.XBatchshGrpcTimeoutSeconds
	}
	return 0
}

func (m *RelayOptions) GetXRelayId() string {
	if m != nil {
		return m.XRelayId
	}
	return ""
}

func (m *RelayOptions) GetXCliOptions() *RelayCLIOptions {
	if m != nil {
		return m.XCliOptions
	}
	return nil
}

func (m *RelayOptions) GetKafka() *RelayGroupKafkaOptions {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *RelayOptions) GetAwssqs() *RelayGroupAWSSQSOptions {
	if m != nil {
		return m.Awssqs
	}
	return nil
}

func (m *RelayOptions) GetMongo() *RelayGroupMongoOptions {
	if m != nil {
		return m.Mongo
	}
	return nil
}

func (m *RelayOptions) GetNsq() *RelayGroupNSQOptions {
	if m != nil {
		return m.Nsq
	}
	return nil
}

func (m *RelayOptions) GetRabbit() *RelayGroupRabbitOptions {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *RelayOptions) GetMqtt() *RelayGroupMQTTOptions {
	if m != nil {
		return m.Mqtt
	}
	return nil
}

func (m *RelayOptions) GetAzureServiceBus() *RelayGroupAzureServiceBusOptions {
	if m != nil {
		return m.AzureServiceBus
	}
	return nil
}

func (m *RelayOptions) GetGcpPubsub() *RelayGroupGCPPubSubOptions {
	if m != nil {
		return m.GcpPubsub
	}
	return nil
}

func (m *RelayOptions) GetKubemqQueue() *RelayGroupKubeMQQueueOptions {
	if m != nil {
		return m.KubemqQueue
	}
	return nil
}

func (m *RelayOptions) GetRedisPubsub() *RelayGroupRedisPubSubOptions {
	if m != nil {
		return m.RedisPubsub
	}
	return nil
}

func (m *RelayOptions) GetRedisStreams() *RelayGroupRedisStreamsOptions {
	if m != nil {
		return m.RedisStreams
	}
	return nil
}

func (m *RelayOptions) GetPostgres() *RelayGroupPostgresOptions {
	if m != nil {
		return m.Postgres
	}
	return nil
}

type RelayGroupKafkaOptions struct {
	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.KafkaRelayArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RelayGroupKafkaOptions) Reset()         { *m = RelayGroupKafkaOptions{} }
func (m *RelayGroupKafkaOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupKafkaOptions) ProtoMessage()    {}
func (*RelayGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{2}
}

func (m *RelayGroupKafkaOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupKafkaOptions.Unmarshal(m, b)
}
func (m *RelayGroupKafkaOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupKafkaOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupKafkaOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupKafkaOptions.Merge(m, src)
}
func (m *RelayGroupKafkaOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupKafkaOptions.Size(m)
}
func (m *RelayGroupKafkaOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupKafkaOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupKafkaOptions proto.InternalMessageInfo

func (m *RelayGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupKafkaOptions) GetArgs() *args.KafkaRelayArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupAWSSQSOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AWSSQSRelayArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RelayGroupAWSSQSOptions) Reset()         { *m = RelayGroupAWSSQSOptions{} }
func (m *RelayGroupAWSSQSOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupAWSSQSOptions) ProtoMessage()    {}
func (*RelayGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{3}
}

func (m *RelayGroupAWSSQSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupAWSSQSOptions.Unmarshal(m, b)
}
func (m *RelayGroupAWSSQSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupAWSSQSOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupAWSSQSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupAWSSQSOptions.Merge(m, src)
}
func (m *RelayGroupAWSSQSOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupAWSSQSOptions.Size(m)
}
func (m *RelayGroupAWSSQSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupAWSSQSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupAWSSQSOptions proto.InternalMessageInfo

func (m *RelayGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupAWSSQSOptions) GetArgs() *args.AWSSQSRelayArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupMongoOptions struct {
	// @gotags: kong:"embed"
	XConn *args.MongoConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.MongoReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RelayGroupMongoOptions) Reset()         { *m = RelayGroupMongoOptions{} }
func (m *RelayGroupMongoOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupMongoOptions) ProtoMessage()    {}
func (*RelayGroupMongoOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{4}
}

func (m *RelayGroupMongoOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupMongoOptions.Unmarshal(m, b)
}
func (m *RelayGroupMongoOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupMongoOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupMongoOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupMongoOptions.Merge(m, src)
}
func (m *RelayGroupMongoOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupMongoOptions.Size(m)
}
func (m *RelayGroupMongoOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupMongoOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupMongoOptions proto.InternalMessageInfo

func (m *RelayGroupMongoOptions) GetXConn() *args.MongoConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupMongoOptions) GetArgs() *args.MongoReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupNSQOptions struct {
	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.NSQReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RelayGroupNSQOptions) Reset()         { *m = RelayGroupNSQOptions{} }
func (m *RelayGroupNSQOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupNSQOptions) ProtoMessage()    {}
func (*RelayGroupNSQOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{5}
}

func (m *RelayGroupNSQOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupNSQOptions.Unmarshal(m, b)
}
func (m *RelayGroupNSQOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupNSQOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupNSQOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupNSQOptions.Merge(m, src)
}
func (m *RelayGroupNSQOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupNSQOptions.Size(m)
}
func (m *RelayGroupNSQOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupNSQOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupNSQOptions proto.InternalMessageInfo

func (m *RelayGroupNSQOptions) GetXConn() *args.NSQConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupNSQOptions) GetArgs() *args.NSQReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupPostgresOptions struct {
	// @gotags: kong:"embed"
	XConn *args.PostgresConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.PostgresReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RelayGroupPostgresOptions) Reset()         { *m = RelayGroupPostgresOptions{} }
func (m *RelayGroupPostgresOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupPostgresOptions) ProtoMessage()    {}
func (*RelayGroupPostgresOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{6}
}

func (m *RelayGroupPostgresOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupPostgresOptions.Unmarshal(m, b)
}
func (m *RelayGroupPostgresOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupPostgresOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupPostgresOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupPostgresOptions.Merge(m, src)
}
func (m *RelayGroupPostgresOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupPostgresOptions.Size(m)
}
func (m *RelayGroupPostgresOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupPostgresOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupPostgresOptions proto.InternalMessageInfo

func (m *RelayGroupPostgresOptions) GetXConn() *args.PostgresConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupPostgresOptions) GetArgs() *args.PostgresReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupRabbitOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RabbitReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RelayGroupRabbitOptions) Reset()         { *m = RelayGroupRabbitOptions{} }
func (m *RelayGroupRabbitOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupRabbitOptions) ProtoMessage()    {}
func (*RelayGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{7}
}

func (m *RelayGroupRabbitOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupRabbitOptions.Unmarshal(m, b)
}
func (m *RelayGroupRabbitOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupRabbitOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupRabbitOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupRabbitOptions.Merge(m, src)
}
func (m *RelayGroupRabbitOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupRabbitOptions.Size(m)
}
func (m *RelayGroupRabbitOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupRabbitOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupRabbitOptions proto.InternalMessageInfo

func (m *RelayGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupRabbitOptions) GetArgs() *args.RabbitReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupRedisPubSubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RedisPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RelayGroupRedisPubSubOptions) Reset()         { *m = RelayGroupRedisPubSubOptions{} }
func (m *RelayGroupRedisPubSubOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupRedisPubSubOptions) ProtoMessage()    {}
func (*RelayGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{8}
}

func (m *RelayGroupRedisPubSubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupRedisPubSubOptions.Unmarshal(m, b)
}
func (m *RelayGroupRedisPubSubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupRedisPubSubOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupRedisPubSubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupRedisPubSubOptions.Merge(m, src)
}
func (m *RelayGroupRedisPubSubOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupRedisPubSubOptions.Size(m)
}
func (m *RelayGroupRedisPubSubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupRedisPubSubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupRedisPubSubOptions proto.InternalMessageInfo

func (m *RelayGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupRedisStreamsOptions struct {
	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.RedisStreamsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RelayGroupRedisStreamsOptions) Reset()         { *m = RelayGroupRedisStreamsOptions{} }
func (m *RelayGroupRedisStreamsOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupRedisStreamsOptions) ProtoMessage()    {}
func (*RelayGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{9}
}

func (m *RelayGroupRedisStreamsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupRedisStreamsOptions.Unmarshal(m, b)
}
func (m *RelayGroupRedisStreamsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupRedisStreamsOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupRedisStreamsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupRedisStreamsOptions.Merge(m, src)
}
func (m *RelayGroupRedisStreamsOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupRedisStreamsOptions.Size(m)
}
func (m *RelayGroupRedisStreamsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupRedisStreamsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupRedisStreamsOptions proto.InternalMessageInfo

func (m *RelayGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupAzureServiceBusOptions struct {
	// @gotags: kong:"embed"
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.AzureServiceBusReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RelayGroupAzureServiceBusOptions) Reset()         { *m = RelayGroupAzureServiceBusOptions{} }
func (m *RelayGroupAzureServiceBusOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupAzureServiceBusOptions) ProtoMessage()    {}
func (*RelayGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{10}
}

func (m *RelayGroupAzureServiceBusOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupAzureServiceBusOptions.Unmarshal(m, b)
}
func (m *RelayGroupAzureServiceBusOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupAzureServiceBusOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupAzureServiceBusOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupAzureServiceBusOptions.Merge(m, src)
}
func (m *RelayGroupAzureServiceBusOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupAzureServiceBusOptions.Size(m)
}
func (m *RelayGroupAzureServiceBusOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupAzureServiceBusOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupAzureServiceBusOptions proto.InternalMessageInfo

func (m *RelayGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupMQTTOptions struct {
	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.MQTTReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RelayGroupMQTTOptions) Reset()         { *m = RelayGroupMQTTOptions{} }
func (m *RelayGroupMQTTOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupMQTTOptions) ProtoMessage()    {}
func (*RelayGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{11}
}

func (m *RelayGroupMQTTOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupMQTTOptions.Unmarshal(m, b)
}
func (m *RelayGroupMQTTOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupMQTTOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupMQTTOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupMQTTOptions.Merge(m, src)
}
func (m *RelayGroupMQTTOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupMQTTOptions.Size(m)
}
func (m *RelayGroupMQTTOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupMQTTOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupMQTTOptions proto.InternalMessageInfo

func (m *RelayGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupMQTTOptions) GetArgs() *args.MQTTReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupGCPPubSubOptions struct {
	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.GCPPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RelayGroupGCPPubSubOptions) Reset()         { *m = RelayGroupGCPPubSubOptions{} }
func (m *RelayGroupGCPPubSubOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupGCPPubSubOptions) ProtoMessage()    {}
func (*RelayGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{12}
}

func (m *RelayGroupGCPPubSubOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupGCPPubSubOptions.Unmarshal(m, b)
}
func (m *RelayGroupGCPPubSubOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupGCPPubSubOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupGCPPubSubOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupGCPPubSubOptions.Merge(m, src)
}
func (m *RelayGroupGCPPubSubOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupGCPPubSubOptions.Size(m)
}
func (m *RelayGroupGCPPubSubOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupGCPPubSubOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupGCPPubSubOptions proto.InternalMessageInfo

func (m *RelayGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

type RelayGroupKubeMQQueueOptions struct {
	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args                 *args.KubeMQQueueReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RelayGroupKubeMQQueueOptions) Reset()         { *m = RelayGroupKubeMQQueueOptions{} }
func (m *RelayGroupKubeMQQueueOptions) String() string { return proto.CompactTextString(m) }
func (*RelayGroupKubeMQQueueOptions) ProtoMessage()    {}
func (*RelayGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6e20d64ef3ed132, []int{13}
}

func (m *RelayGroupKubeMQQueueOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayGroupKubeMQQueueOptions.Unmarshal(m, b)
}
func (m *RelayGroupKubeMQQueueOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayGroupKubeMQQueueOptions.Marshal(b, m, deterministic)
}
func (m *RelayGroupKubeMQQueueOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayGroupKubeMQQueueOptions.Merge(m, src)
}
func (m *RelayGroupKubeMQQueueOptions) XXX_Size() int {
	return xxx_messageInfo_RelayGroupKubeMQQueueOptions.Size(m)
}
func (m *RelayGroupKubeMQQueueOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayGroupKubeMQQueueOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RelayGroupKubeMQQueueOptions proto.InternalMessageInfo

func (m *RelayGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if m != nil {
		return m.XConn
	}
	return nil
}

func (m *RelayGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueReadArgs {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*RelayCLIOptions)(nil), "protos.opts.RelayCLIOptions")
	proto.RegisterType((*RelayOptions)(nil), "protos.opts.RelayOptions")
	proto.RegisterType((*RelayGroupKafkaOptions)(nil), "protos.opts.RelayGroupKafkaOptions")
	proto.RegisterType((*RelayGroupAWSSQSOptions)(nil), "protos.opts.RelayGroupAWSSQSOptions")
	proto.RegisterType((*RelayGroupMongoOptions)(nil), "protos.opts.RelayGroupMongoOptions")
	proto.RegisterType((*RelayGroupNSQOptions)(nil), "protos.opts.RelayGroupNSQOptions")
	proto.RegisterType((*RelayGroupPostgresOptions)(nil), "protos.opts.RelayGroupPostgresOptions")
	proto.RegisterType((*RelayGroupRabbitOptions)(nil), "protos.opts.RelayGroupRabbitOptions")
	proto.RegisterType((*RelayGroupRedisPubSubOptions)(nil), "protos.opts.RelayGroupRedisPubSubOptions")
	proto.RegisterType((*RelayGroupRedisStreamsOptions)(nil), "protos.opts.RelayGroupRedisStreamsOptions")
	proto.RegisterType((*RelayGroupAzureServiceBusOptions)(nil), "protos.opts.RelayGroupAzureServiceBusOptions")
	proto.RegisterType((*RelayGroupMQTTOptions)(nil), "protos.opts.RelayGroupMQTTOptions")
	proto.RegisterType((*RelayGroupGCPPubSubOptions)(nil), "protos.opts.RelayGroupGCPPubSubOptions")
	proto.RegisterType((*RelayGroupKubeMQQueueOptions)(nil), "protos.opts.RelayGroupKubeMQQueueOptions")
}

func init() { proto.RegisterFile("opts/relay.proto", fileDescriptor_d6e20d64ef3ed132) }

var fileDescriptor_d6e20d64ef3ed132 = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x6d, 0x4f, 0xdb, 0x46,
	0x1c, 0x57, 0x56, 0x28, 0xe5, 0x02, 0x03, 0xae, 0xa5, 0x1c, 0x14, 0x36, 0x4a, 0xab, 0xae, 0x74,
	0x4d, 0xb2, 0xa6, 0xeb, 0x34, 0xb4, 0x49, 0x13, 0x30, 0x0d, 0xa1, 0x41, 0x4b, 0x9c, 0x48, 0xd5,
	0xf6, 0xc6, 0xf2, 0xc3, 0xd5, 0xf1, 0xb0, 0x7d, 0xce, 0x9d, 0x5d, 0x1e, 0x5e, 0x4c, 0xda, 0xab,
	0x69, 0x7b, 0xbb, 0x2f, 0xb9, 0xa7, 0x0f, 0x31, 0xdd, 0xff, 0xec, 0xd4, 0xe7, 0xc4, 0x5e, 0xdf,
	0xb4, 0xf2, 0xef, 0x7e, 0x4f, 0xce, 0xdd, 0xfd, 0x0d, 0x5a, 0x66, 0x71, 0x22, 0x3a, 0x9c, 0x06,
	0xd6, 0x55, 0x3b, 0xe6, 0x2c, 0x61, 0xb8, 0x09, 0xff, 0x89, 0xb6, 0x5c, 0xd8, 0xd8, 0xb4, 0xb8,
	0x27, 0x3a, 0xd6, 0x75, 0xca, 0x69, 0x4b, 0x50, 0xfe, 0xd6, 0x77, 0x68, 0xcb, 0x4e, 0x85, 0xa2,
	0x6e, 0x60, 0xb5, 0x7a, 0x21, 0x5a, 0x62, 0x94, 0x63, 0xab, 0x80, 0x79, 0x4e, 0xdc, 0x8a, 0x53,
	0x5b, 0xa4, 0x76, 0x06, 0x2f, 0x03, 0x7c, 0x6e, 0xbd, 0x39, 0xb7, 0x32, 0x64, 0x4d, 0x21, 0xa9,
	0x4d, 0xc3, 0x51, 0x6b, 0x94, 0xd2, 0x94, 0x6a, 0xd4, 0x90, 0x45, 0x1e, 0xcb, 0x90, 0x25, 0x85,
	0x8c, 0x92, 0x24, 0x03, 0x3e, 0x04, 0x20, 0x12, 0xa3, 0xec, 0xf9, 0x36, 0x3c, 0xc7, 0x4c, 0x24,
	0x1e, 0xa7, 0x79, 0x93, 0x15, 0x00, 0xb9, 0x65, 0xdb, 0x7e, 0xa2, 0x65, 0x72, 0xea, 0xfa, 0x42,
	0xaf, 0x47, 0x0a, 0x0b, 0x22, 0xe1, 0xd4, 0x0a, 0x33, 0x97, 0x9d, 0x7d, 0xb4, 0x64, 0xc8, 0x5f,
	0xe7, 0xf0, 0xe4, 0xf8, 0x55, 0x9c, 0xf8, 0x2c, 0x12, 0xb8, 0x8d, 0x6e, 0x0f, 0x93, 0x24, 0x36,
	0x03, 0x5f, 0x24, 0x34, 0x32, 0x2d, 0xd7, 0xe5, 0x54, 0x08, 0xd2, 0xd8, 0x6e, 0x3c, 0x9e, 0x37,
	0x56, 0xe4, 0xd2, 0x09, 0xac, 0xec, 0xab, 0x85, 0x9d, 0xdf, 0x10, 0x5a, 0x00, 0x8f, 0xdc, 0x60,
	0x17, 0x2d, 0x3b, 0x2c, 0x08, 0xa8, 0x23, 0x1f, 0xcd, 0x84, 0x9d, 0xd3, 0x28, 0x53, 0x2f, 0xbd,
	0xc3, 0x07, 0x12, 0xc6, 0x5b, 0x08, 0xd9, 0x56, 0xe2, 0x0c, 0x4d, 0xe1, 0x5f, 0x53, 0xf2, 0xc1,
	0x76, 0xe3, 0xf1, 0xac, 0x31, 0x0f, 0x48, 0xdf, 0xbf, 0xa6, 0xf8, 0x11, 0x5a, 0x52, 0xcb, 0xa1,
	0x75, 0x69, 0x72, 0x9a, 0xf0, 0x2b, 0x72, 0x03, 0x38, 0x8b, 0x00, 0x9f, 0x5a, 0x97, 0x86, 0x04,
	0xf1, 0x03, 0xb4, 0xe8, 0xb0, 0x28, 0xca, 0x12, 0x7d, 0x97, 0xcc, 0x40, 0xdc, 0xc2, 0x3b, 0xf0,
	0xd8, 0xc5, 0x1f, 0xa3, 0x66, 0x94, 0x86, 0xe6, 0x05, 0xe3, 0xe7, 0x94, 0x0b, 0x32, 0x0b, 0x46,
	0x28, 0x4a, 0xc3, 0xd7, 0x0a, 0xc1, 0x5d, 0xb4, 0x6a, 0x82, 0xaf, 0x18, 0x9a, 0x1e, 0x8f, 0x9d,
	0xf1, 0xab, 0xff, 0x39, 0x07, 0x76, 0xf8, 0x40, 0x2d, 0x1e, 0xf1, 0xd8, 0xc9, 0x5e, 0x1e, 0xef,
	0xa1, 0x75, 0x5d, 0xe3, 0xfa, 0xc2, 0xb2, 0x03, 0x6a, 0x26, 0x81, 0x20, 0x7f, 0x49, 0xdd, 0x2d,
	0x63, 0xb5, 0xa0, 0xfb, 0x56, 0x2d, 0x0f, 0x02, 0x81, 0xf7, 0xd1, 0x96, 0x2e, 0x4d, 0xfc, 0x90,
	0xb2, 0x34, 0x31, 0x05, 0x75, 0x58, 0xe4, 0x0a, 0xf2, 0xf7, 0x1c, 0x54, 0x5c, 0x2f, 0xc8, 0x07,
	0x8a, 0xd2, 0x57, 0x0c, 0x7c, 0x0f, 0xcd, 0x9b, 0x70, 0xb8, 0xe5, 0x3b, 0xff, 0xa3, 0x5a, 0xce,
	0xc1, 0x5e, 0x1c, 0xbb, 0xf8, 0x1b, 0xb4, 0x60, 0x3a, 0x81, 0x6f, 0x32, 0xb5, 0x2d, 0xe4, 0x5f,
	0xb9, 0xde, 0xec, 0x6e, 0xb6, 0x0b, 0x37, 0xa0, 0x5d, 0xda, 0x7c, 0x03, 0x1d, 0x06, 0x7e, 0xbe,
	0x8f, 0x7b, 0x68, 0x16, 0x4e, 0x34, 0x71, 0x41, 0xf8, 0x60, 0x52, 0x78, 0xc4, 0x59, 0x1a, 0x7f,
	0x2f, 0x39, 0xb9, 0x5e, 0x29, 0xf0, 0xd7, 0xe8, 0xa6, 0x75, 0x21, 0xc4, 0x48, 0x10, 0x0a, 0xda,
	0x87, 0x15, 0xda, 0xfd, 0xd7, 0xfd, 0x7e, 0xaf, 0x9f, 0x8b, 0x33, 0x8d, 0x0c, 0x86, 0xfb, 0x41,
	0xde, 0xd4, 0x06, 0x9f, 0x4a, 0xce, 0x38, 0x18, 0x14, 0xf8, 0x39, 0xba, 0x11, 0x89, 0x11, 0xf1,
	0x40, 0x78, 0xbf, 0x42, 0xf8, 0xb2, 0xdf, 0xcb, 0x65, 0x92, 0x2d, 0xdb, 0xaa, 0x7b, 0x44, 0x86,
	0xb5, 0x6d, 0x0d, 0x20, 0x8d, 0xdb, 0x2a, 0x0d, 0xfe, 0x02, 0xcd, 0xc8, 0xbb, 0x4b, 0x7c, 0xd0,
	0xee, 0x54, 0x95, 0xed, 0x0d, 0x06, 0xb9, 0x12, 0xf8, 0xf8, 0x07, 0xb4, 0x02, 0x93, 0xc7, 0xcc,
	0x26, 0x8f, 0x69, 0xa7, 0x82, 0xfc, 0x04, 0x26, 0xad, 0xaa, 0x9f, 0x4b, 0xf2, 0xfb, 0x8a, 0x7e,
	0x90, 0x8a, 0xdc, 0x6f, 0xc9, 0xd2, 0x71, 0xfc, 0x1d, 0x42, 0x9e, 0x13, 0x9b, 0x6a, 0x06, 0x90,
	0x73, 0xf0, 0xfc, 0xa4, 0xc2, 0xf3, 0xe8, 0xf0, 0xec, 0x2c, 0xb5, 0xfb, 0xa9, 0x9d, 0xbb, 0xcd,
	0x7b, 0x4e, 0x7c, 0x06, 0x4a, 0x7c, 0x82, 0x16, 0xd4, 0x04, 0x33, 0x61, 0x82, 0x91, 0x00, 0x9c,
	0x76, 0xab, 0x0e, 0x42, 0x6a, 0xd3, 0xd3, 0x5e, 0x4f, 0x32, 0x73, 0xaf, 0xa6, 0x92, 0x03, 0x26,
	0xdd, 0x60, 0x04, 0xe5, 0xbd, 0xc2, 0x5a, 0x37, 0x43, 0x52, 0xf5, 0x66, 0x4d, 0x9e, 0x61, 0xb2,
	0xdb, 0x2b, 0xb4, 0xa8, 0xdc, 0xb2, 0x81, 0x46, 0x18, 0xd8, 0x3d, 0xa9, 0xb3, 0xeb, 0x2b, 0x6a,
	0xee, 0xa7, 0xea, 0x64, 0x20, 0x3e, 0x40, 0xb7, 0xf2, 0x11, 0x4b, 0x62, 0xf0, 0x7a, 0x54, 0xe1,
	0x75, 0x96, 0xd1, 0x72, 0x9f, 0xb1, 0x6e, 0xe7, 0x2d, 0xba, 0x3b, 0xfd, 0x62, 0xe0, 0x4f, 0xd1,
	0xac, 0x29, 0xc7, 0x11, 0x4c, 0xc2, 0x66, 0xf7, 0x6e, 0x6e, 0x2d, 0x27, 0x73, 0x1b, 0x98, 0x87,
	0x2c, 0x8a, 0x8c, 0x19, 0xf9, 0x2f, 0xee, 0xa0, 0x19, 0x89, 0xc3, 0x40, 0x6c, 0x76, 0xef, 0x4d,
	0x72, 0x21, 0x64, 0x9f, 0x7b, 0xc2, 0x00, 0xe2, 0xce, 0x15, 0x5a, 0xab, 0xb8, 0x54, 0xf8, 0xa9,
	0x1e, 0xbc, 0xa6, 0x99, 0x29, 0x6a, 0x21, 0xf9, 0x33, 0x2d, 0x79, 0x73, 0x0a, 0xb9, 0x1c, 0x9d,
	0x16, 0x5f, 0xb9, 0x78, 0x25, 0xeb, 0x5f, 0x19, 0x98, 0x85, 0xe0, 0xb6, 0x16, 0xbc, 0x31, 0xc9,
	0x35, 0xa8, 0xe5, 0x16, 0x62, 0x19, 0xba, 0x33, 0xed, 0x42, 0xe3, 0x5d, 0x3d, 0xf4, 0x8e, 0x66,
	0xf4, 0xb2, 0xdf, 0x2b, 0x44, 0x3e, 0xd5, 0x22, 0x49, 0x99, 0x59, 0x0a, 0xfc, 0x19, 0xad, 0x57,
	0x9e, 0x00, 0xdc, 0xd6, 0x53, 0xd7, 0x35, 0xaf, 0x9c, 0x5c, 0x88, 0x7e, 0xa6, 0x45, 0x6f, 0x4d,
	0xa5, 0x97, 0xf2, 0x2f, 0x8b, 0x5b, 0xac, 0x4d, 0xa2, 0xfa, 0x2d, 0x56, 0xd4, 0xf7, 0x3c, 0x5c,
	0x8a, 0x5c, 0x4a, 0xfe, 0xb5, 0x81, 0x36, 0xeb, 0xee, 0x25, 0x7e, 0xa6, 0xe7, 0xeb, 0xa7, 0xa6,
	0xc0, 0x2f, 0x94, 0xf8, 0x5c, 0x2b, 0xb1, 0x5d, 0xa5, 0x28, 0x35, 0xf9, 0xbd, 0x81, 0xb6, 0x6a,
	0xaf, 0x34, 0xee, 0xea, 0x55, 0xb6, 0x26, 0x8d, 0x33, 0x41, 0xa1, 0xcb, 0x0b, 0xad, 0xcb, 0xfd,
	0x4a, 0x49, 0xa9, 0xcc, 0x1f, 0x0d, 0xb4, 0xfd, 0x7f, 0xa3, 0x19, 0xbf, 0xd0, 0xfb, 0xe8, 0x2f,
	0x5a, 0xd2, 0x14, 0x2a, 0x7d, 0xa9, 0x55, 0x7a, 0x58, 0xa7, 0x2a, 0xb5, 0xe2, 0x68, 0x75, 0xea,
	0x47, 0x07, 0x3f, 0xd1, 0x9b, 0xac, 0xea, 0x37, 0xac, 0x37, 0x18, 0x14, 0xe2, 0x5b, 0x5a, 0xfc,
	0xfa, 0x04, 0xb5, 0x94, 0xf9, 0x4b, 0x03, 0x6d, 0x54, 0x7f, 0x50, 0x70, 0x47, 0x4f, 0xd6, 0xef,
	0xf6, 0x98, 0x5d, 0x88, 0xef, 0x6a, 0xf1, 0x1f, 0x4d, 0xe7, 0xd7, 0x1e, 0xd2, 0xc9, 0x4f, 0x51,
	0xfd, 0x21, 0x2d, 0xf0, 0xdf, 0xf3, 0x90, 0x16, 0x14, 0x7a, 0x93, 0x83, 0xaf, 0x7e, 0xdc, 0xf3,
	0xfc, 0x64, 0x98, 0xda, 0x6d, 0x87, 0x85, 0x1d, 0xf8, 0x0b, 0xcf, 0x61, 0x3c, 0xee, 0xc4, 0x41,
	0x1a, 0xda, 0x94, 0xb7, 0x84, 0x33, 0xa4, 0xa1, 0x25, 0x3a, 0x76, 0xea, 0x07, 0x6e, 0xc7, 0x63,
	0x1d, 0x65, 0xdb, 0x91, 0x1f, 0x19, 0xfb, 0x26, 0x3c, 0x3c, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xb0, 0xc0, 0xcd, 0x8a, 0xb9, 0x0c, 0x00, 0x00,
}
