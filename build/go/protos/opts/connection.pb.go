// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/connection.proto

package opts

import (
	fmt "fmt"
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ConnectionConfig is used for creating a new backend. CLI creates an instance
// of this structure by injecting the conn struct it receives via *Args.
type ConnectionOptions struct {
	// Friendly name to identify this connection by (used in plumber-server logs)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Any notes associated with this connection (stored plumber-server side)
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// Used internally by plumber
	XId string `protobuf:"bytes,3,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	// Types that are valid to be assigned to Conn:
	//	*ConnectionOptions_Kafka
	//	*ConnectionOptions_ActiveMq
	//	*ConnectionOptions_Awssqs
	//	*ConnectionOptions_Awssns
	//	*ConnectionOptions_Mongo
	//	*ConnectionOptions_Nats
	//	*ConnectionOptions_NatsStreaming
	//	*ConnectionOptions_Nsq
	//	*ConnectionOptions_Postgres
	//	*ConnectionOptions_Pulsar
	//	*ConnectionOptions_Rabbit
	//	*ConnectionOptions_RabbitStreams
	//	*ConnectionOptions_RedisPubsub
	//	*ConnectionOptions_RedisStreams
	//	*ConnectionOptions_AzureEventHub
	//	*ConnectionOptions_AzureServiceBus
	//	*ConnectionOptions_Mqtt
	//	*ConnectionOptions_KubemqQueue
	//	*ConnectionOptions_GcpPubsub
	Conn                 isConnectionOptions_Conn `protobuf_oneof:"conn"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ConnectionOptions) Reset()         { *m = ConnectionOptions{} }
func (m *ConnectionOptions) String() string { return proto.CompactTextString(m) }
func (*ConnectionOptions) ProtoMessage()    {}
func (*ConnectionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad26dff0dde4bf7, []int{0}
}

func (m *ConnectionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionOptions.Unmarshal(m, b)
}
func (m *ConnectionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionOptions.Marshal(b, m, deterministic)
}
func (m *ConnectionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOptions.Merge(m, src)
}
func (m *ConnectionOptions) XXX_Size() int {
	return xxx_messageInfo_ConnectionOptions.Size(m)
}
func (m *ConnectionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOptions proto.InternalMessageInfo

func (m *ConnectionOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConnectionOptions) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *ConnectionOptions) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

type isConnectionOptions_Conn interface {
	isConnectionOptions_Conn()
}

type ConnectionOptions_Kafka struct {
	Kafka *args.KafkaConn `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type ConnectionOptions_ActiveMq struct {
	ActiveMq *args.ActiveMQConn `protobuf:"bytes,101,opt,name=active_mq,json=activeMq,proto3,oneof"`
}

type ConnectionOptions_Awssqs struct {
	Awssqs *args.AWSSQSConn `protobuf:"bytes,102,opt,name=awssqs,proto3,oneof"`
}

type ConnectionOptions_Awssns struct {
	Awssns *args.AWSSNSConn `protobuf:"bytes,103,opt,name=awssns,proto3,oneof"`
}

type ConnectionOptions_Mongo struct {
	Mongo *args.MongoConn `protobuf:"bytes,104,opt,name=mongo,proto3,oneof"`
}

type ConnectionOptions_Nats struct {
	Nats *args.NatsConn `protobuf:"bytes,105,opt,name=nats,proto3,oneof"`
}

type ConnectionOptions_NatsStreaming struct {
	NatsStreaming *args.NatsStreamingConn `protobuf:"bytes,106,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type ConnectionOptions_Nsq struct {
	Nsq *args.NSQConn `protobuf:"bytes,107,opt,name=nsq,proto3,oneof"`
}

type ConnectionOptions_Postgres struct {
	Postgres *args.PostgresConn `protobuf:"bytes,108,opt,name=postgres,proto3,oneof"`
}

type ConnectionOptions_Pulsar struct {
	Pulsar *args.PulsarConn `protobuf:"bytes,109,opt,name=pulsar,proto3,oneof"`
}

type ConnectionOptions_Rabbit struct {
	Rabbit *args.RabbitConn `protobuf:"bytes,110,opt,name=rabbit,proto3,oneof"`
}

type ConnectionOptions_RabbitStreams struct {
	RabbitStreams *args.RabbitStreamsConn `protobuf:"bytes,111,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type ConnectionOptions_RedisPubsub struct {
	RedisPubsub *args.RedisPubSubConn `protobuf:"bytes,112,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type ConnectionOptions_RedisStreams struct {
	RedisStreams *args.RedisStreamsConn `protobuf:"bytes,113,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type ConnectionOptions_AzureEventHub struct {
	AzureEventHub *args.AzureEventHubConn `protobuf:"bytes,114,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

type ConnectionOptions_AzureServiceBus struct {
	AzureServiceBus *args.AzureServiceBusConn `protobuf:"bytes,115,opt,name=azure_service_bus,json=azureServiceBus,proto3,oneof"`
}

type ConnectionOptions_Mqtt struct {
	Mqtt *args.MQTTConn `protobuf:"bytes,116,opt,name=mqtt,proto3,oneof"`
}

type ConnectionOptions_KubemqQueue struct {
	KubemqQueue *args.KubeMQQueueConn `protobuf:"bytes,117,opt,name=kubemq_queue,json=kubemqQueue,proto3,oneof"`
}

type ConnectionOptions_GcpPubsub struct {
	GcpPubsub *args.GCPPubSubConn `protobuf:"bytes,118,opt,name=gcp_pubsub,json=gcpPubsub,proto3,oneof"`
}

func (*ConnectionOptions_Kafka) isConnectionOptions_Conn() {}

func (*ConnectionOptions_ActiveMq) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Awssqs) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Awssns) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Mongo) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Nats) isConnectionOptions_Conn() {}

func (*ConnectionOptions_NatsStreaming) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Nsq) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Postgres) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Pulsar) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Rabbit) isConnectionOptions_Conn() {}

func (*ConnectionOptions_RabbitStreams) isConnectionOptions_Conn() {}

func (*ConnectionOptions_RedisPubsub) isConnectionOptions_Conn() {}

func (*ConnectionOptions_RedisStreams) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AzureEventHub) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AzureServiceBus) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Mqtt) isConnectionOptions_Conn() {}

func (*ConnectionOptions_KubemqQueue) isConnectionOptions_Conn() {}

func (*ConnectionOptions_GcpPubsub) isConnectionOptions_Conn() {}

func (m *ConnectionOptions) GetConn() isConnectionOptions_Conn {
	if m != nil {
		return m.Conn
	}
	return nil
}

func (m *ConnectionOptions) GetKafka() *args.KafkaConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *ConnectionOptions) GetActiveMq() *args.ActiveMQConn {
	if x, ok := m.GetConn().(*ConnectionOptions_ActiveMq); ok {
		return x.ActiveMq
	}
	return nil
}

func (m *ConnectionOptions) GetAwssqs() *args.AWSSQSConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Awssqs); ok {
		return x.Awssqs
	}
	return nil
}

func (m *ConnectionOptions) GetAwssns() *args.AWSSNSConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Awssns); ok {
		return x.Awssns
	}
	return nil
}

func (m *ConnectionOptions) GetMongo() *args.MongoConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (m *ConnectionOptions) GetNats() *args.NatsConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Nats); ok {
		return x.Nats
	}
	return nil
}

func (m *ConnectionOptions) GetNatsStreaming() *args.NatsStreamingConn {
	if x, ok := m.GetConn().(*ConnectionOptions_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (m *ConnectionOptions) GetNsq() *args.NSQConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (m *ConnectionOptions) GetPostgres() *args.PostgresConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (m *ConnectionOptions) GetPulsar() *args.PulsarConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (m *ConnectionOptions) GetRabbit() *args.RabbitConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (m *ConnectionOptions) GetRabbitStreams() *args.RabbitStreamsConn {
	if x, ok := m.GetConn().(*ConnectionOptions_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (m *ConnectionOptions) GetRedisPubsub() *args.RedisPubSubConn {
	if x, ok := m.GetConn().(*ConnectionOptions_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (m *ConnectionOptions) GetRedisStreams() *args.RedisStreamsConn {
	if x, ok := m.GetConn().(*ConnectionOptions_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (m *ConnectionOptions) GetAzureEventHub() *args.AzureEventHubConn {
	if x, ok := m.GetConn().(*ConnectionOptions_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}

func (m *ConnectionOptions) GetAzureServiceBus() *args.AzureServiceBusConn {
	if x, ok := m.GetConn().(*ConnectionOptions_AzureServiceBus); ok {
		return x.AzureServiceBus
	}
	return nil
}

func (m *ConnectionOptions) GetMqtt() *args.MQTTConn {
	if x, ok := m.GetConn().(*ConnectionOptions_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (m *ConnectionOptions) GetKubemqQueue() *args.KubeMQQueueConn {
	if x, ok := m.GetConn().(*ConnectionOptions_KubemqQueue); ok {
		return x.KubemqQueue
	}
	return nil
}

func (m *ConnectionOptions) GetGcpPubsub() *args.GCPPubSubConn {
	if x, ok := m.GetConn().(*ConnectionOptions_GcpPubsub); ok {
		return x.GcpPubsub
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConnectionOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConnectionOptions_Kafka)(nil),
		(*ConnectionOptions_ActiveMq)(nil),
		(*ConnectionOptions_Awssqs)(nil),
		(*ConnectionOptions_Awssns)(nil),
		(*ConnectionOptions_Mongo)(nil),
		(*ConnectionOptions_Nats)(nil),
		(*ConnectionOptions_NatsStreaming)(nil),
		(*ConnectionOptions_Nsq)(nil),
		(*ConnectionOptions_Postgres)(nil),
		(*ConnectionOptions_Pulsar)(nil),
		(*ConnectionOptions_Rabbit)(nil),
		(*ConnectionOptions_RabbitStreams)(nil),
		(*ConnectionOptions_RedisPubsub)(nil),
		(*ConnectionOptions_RedisStreams)(nil),
		(*ConnectionOptions_AzureEventHub)(nil),
		(*ConnectionOptions_AzureServiceBus)(nil),
		(*ConnectionOptions_Mqtt)(nil),
		(*ConnectionOptions_KubemqQueue)(nil),
		(*ConnectionOptions_GcpPubsub)(nil),
	}
}

func init() {
	proto.RegisterType((*ConnectionOptions)(nil), "protos.opts.ConnectionOptions")
}

func init() { proto.RegisterFile("opts/connection.proto", fileDescriptor_4ad26dff0dde4bf7) }

var fileDescriptor_4ad26dff0dde4bf7 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdb, 0x4f, 0xdb, 0x3e,
	0x18, 0xfd, 0x71, 0x15, 0x35, 0xbf, 0xc2, 0xf0, 0x60, 0x98, 0x8a, 0x4d, 0x68, 0x4f, 0x48, 0x53,
	0x1a, 0x6d, 0x7b, 0xd8, 0x26, 0x9e, 0x80, 0x4d, 0x30, 0xa1, 0xb2, 0x96, 0x20, 0x4d, 0xda, 0x4b,
	0x14, 0xa7, 0x26, 0xcd, 0x68, 0x9c, 0xcb, 0x67, 0x17, 0x69, 0x7f, 0xd4, 0xfe, 0xc6, 0xc9, 0xb7,
	0xae, 0x56, 0xb3, 0x97, 0x5e, 0xce, 0x77, 0xce, 0xc9, 0xe7, 0xe3, 0xcf, 0x0e, 0x3a, 0x28, 0x2b,
	0x01, 0x61, 0x5a, 0x72, 0xce, 0x52, 0x91, 0x97, 0xbc, 0x5f, 0x35, 0xa5, 0x28, 0xf1, 0xb6, 0xfe,
	0x82, 0xbe, 0xaa, 0xf6, 0x9e, 0x25, 0x4d, 0x06, 0xe1, 0x63, 0xf2, 0xf0, 0x98, 0x98, 0x72, 0xef,
	0xb9, 0x46, 0x92, 0x54, 0xe4, 0x33, 0x56, 0xd4, 0x16, 0xc4, 0x06, 0x7c, 0x82, 0x00, 0x38, 0x2c,
	0x63, 0xb5, 0xc3, 0x8c, 0x5d, 0x51, 0xf2, 0xac, 0xb4, 0xc8, 0xae, 0x46, 0x78, 0x22, 0x1c, 0xe5,
	0x68, 0x0e, 0x04, 0x20, 0x1a, 0x96, 0x14, 0x39, 0xcf, 0x6c, 0x69, 0xc7, 0x94, 0xa0, 0xf6, 0xb4,
	0x45, 0x2d, 0x84, 0x05, 0x0e, 0x34, 0x90, 0xa5, 0x55, 0x50, 0x49, 0x0a, 0x92, 0x5a, 0xf8, 0xd0,
	0x2c, 0x42, 0x52, 0x56, 0xd4, 0x41, 0x2d, 0x99, 0x64, 0xde, 0x5a, 0xaa, 0x12, 0x44, 0xd6, 0x30,
	0xd7, 0xc0, 0x9e, 0x01, 0xe5, 0x14, 0x92, 0xc6, 0x83, 0x9a, 0x84, 0xd2, 0x5c, 0x78, 0x6d, 0x1a,
	0xc8, 0x36, 0x0a, 0xde, 0xe3, 0x1a, 0x36, 0xce, 0xc1, 0xef, 0x83, 0x2c, 0x14, 0x7c, 0xc9, 0xb1,
	0xc9, 0xea, 0x97, 0x6c, 0x58, 0x00, 0xac, 0x99, 0xe5, 0x29, 0x0b, 0xa8, 0x74, 0xd5, 0xde, 0x42,
	0x95, 0xcd, 0x18, 0x17, 0xc1, 0xc4, 0x79, 0xbe, 0xfe, 0xdd, 0x41, 0x7b, 0x97, 0xf3, 0x2d, 0xfc,
	0x56, 0xa9, 0x4f, 0xc0, 0x18, 0xad, 0xf3, 0xa4, 0x60, 0x64, 0xe5, 0x64, 0xe5, 0xb4, 0x73, 0xa7,
	0x7f, 0xe3, 0x7d, 0xb4, 0xc1, 0x4b, 0xc1, 0x80, 0xac, 0x6a, 0xd0, 0xfc, 0xc1, 0xbb, 0x68, 0x2d,
	0xce, 0xc7, 0x64, 0x4d, 0x63, 0xab, 0x5f, 0xc7, 0xb8, 0x8f, 0x36, 0xf4, 0x76, 0x93, 0xf1, 0xc9,
	0xca, 0xe9, 0xf6, 0xbb, 0x17, 0x7d, 0x3b, 0x0e, 0xaa, 0x87, 0xfe, 0x8d, 0xaa, 0xa8, 0xc7, 0x5d,
	0xff, 0x77, 0x67, 0x68, 0xf8, 0x23, 0xea, 0x98, 0x61, 0x88, 0x8b, 0x9a, 0x30, 0xad, 0x39, 0xf2,
	0x34, 0xe7, 0xba, 0x3a, 0x18, 0x59, 0xd9, 0x96, 0x61, 0x0f, 0x6a, 0xfc, 0x16, 0x6d, 0x26, 0x4f,
	0x00, 0x35, 0x90, 0x07, 0x2d, 0x3b, 0xf4, 0x65, 0xdf, 0xa3, 0x68, 0x14, 0x59, 0x91, 0x25, 0x3a,
	0x09, 0x07, 0x92, 0xfd, 0x43, 0x72, 0xeb, 0x49, 0x38, 0xa8, 0xf5, 0xe8, 0x79, 0x23, 0x93, 0x96,
	0xf5, 0x0c, 0x54, 0xc5, 0xad, 0x47, 0xd3, 0xf0, 0x1b, 0x15, 0x9d, 0x00, 0x92, 0x6b, 0xfa, 0x81,
	0x47, 0xbf, 0x4d, 0x04, 0x58, 0xb6, 0x26, 0xe1, 0x2b, 0xb4, 0xa3, 0xbe, 0xe3, 0xf9, 0xa4, 0x92,
	0x9f, 0x5a, 0xf6, 0x6a, 0x49, 0x16, 0x39, 0x86, 0xd5, 0x77, 0xf9, 0x22, 0x88, 0x4f, 0xd1, 0x1a,
	0x87, 0x9a, 0x3c, 0x6a, 0xf5, 0xbe, 0xaf, 0x8e, 0x5c, 0x74, 0x8a, 0x82, 0x3f, 0xa0, 0x2d, 0x37,
	0xb0, 0x64, 0xda, 0x12, 0xf7, 0xd0, 0x16, 0x5d, 0xdc, 0x8e, 0xac, 0xb2, 0x33, 0x43, 0x4d, 0x8a,
	0x96, 0xec, 0x86, 0xba, 0xe4, 0xb2, 0x33, 0x44, 0x25, 0x31, 0x13, 0x4e, 0x78, 0x8b, 0xe4, 0x4e,
	0x97, 0x9c, 0xc4, 0x10, 0x55, 0x22, 0xe6, 0x97, 0xcd, 0x04, 0x48, 0xd9, 0x92, 0x88, 0x91, 0x9a,
	0xe5, 0xbb, 0x4e, 0xbb, 0xcd, 0x22, 0x88, 0xcf, 0xd1, 0xff, 0xfa, 0xa4, 0xc4, 0xe6, 0x08, 0x91,
	0x4a, 0xdb, 0x1c, 0xfb, 0x36, 0x8a, 0x30, 0x94, 0x34, 0x92, 0xd4, 0x9a, 0x6c, 0x37, 0x16, 0x02,
	0x49, 0xf1, 0x67, 0xd4, 0x35, 0x16, 0xae, 0x95, 0x5a, 0x7b, 0xbc, 0x5c, 0xf6, 0xf0, 0x3b, 0x31,
	0x0f, 0x76, 0x8d, 0x5c, 0xa3, 0x5d, 0x7d, 0xf4, 0x62, 0x7d, 0xf4, 0xe2, 0x89, 0xa4, 0xa4, 0x69,
	0x59, 0xd2, 0xb9, 0xe2, 0x7c, 0x51, 0x94, 0xeb, 0x79, 0x37, 0xdd, 0x64, 0x11, 0xc4, 0xb7, 0x68,
	0xcf, 0x38, 0xd9, 0x23, 0x1e, 0x53, 0x09, 0x04, 0xb4, 0xd7, 0xc9, 0xb2, 0x57, 0x64, 0x48, 0x17,
	0xd2, 0xb5, 0x65, 0xda, 0xf8, 0x0b, 0xab, 0x51, 0x55, 0x97, 0x1f, 0x11, 0x2d, 0xa3, 0x3a, 0x18,
	0xdd, 0xdf, 0xbb, 0x51, 0x55, 0x24, 0x95, 0xa7, 0xb9, 0x01, 0x63, 0x7d, 0x03, 0x12, 0xd9, 0x92,
	0xe7, 0x8d, 0xa4, 0x6c, 0x30, 0x1a, 0xa9, 0xba, 0xcb, 0xd3, 0x68, 0x34, 0x84, 0xcf, 0x10, 0xca,
	0xd2, 0xca, 0x6d, 0xc8, 0x4c, 0x1b, 0xf4, 0x3c, 0x83, 0xab, 0xcb, 0xa1, 0xb7, 0x1d, 0x9d, 0x2c,
	0xad, 0xcc, 0x66, 0x5c, 0x6c, 0xa2, 0x75, 0xf5, 0xaa, 0xb9, 0x38, 0xfb, 0xf1, 0x29, 0xcb, 0x85,
	0xba, 0xc0, 0xd2, 0xb2, 0x08, 0x69, 0x22, 0xd2, 0x49, 0x5a, 0x36, 0x55, 0x58, 0x4d, 0x65, 0x41,
	0x59, 0x13, 0x40, 0x3a, 0x61, 0x45, 0x02, 0x21, 0x95, 0xf9, 0x74, 0x1c, 0x66, 0x65, 0x68, 0xfc,
	0x43, 0xf5, 0x3a, 0xa2, 0x9b, 0xfa, 0xcf, 0xfb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x69, 0x2a,
	0x95, 0x6a, 0xbb, 0x06, 0x00, 0x00,
}
