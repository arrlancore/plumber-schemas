// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package protos

import (
	fmt "fmt"
	backends "github.com/batchcorp/plumber-schemas/build/go/protos/backends"
	common "github.com/batchcorp/plumber-schemas/build/go/protos/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RelayConfig struct {
	// Required
	BatchCollectionToken string `protobuf:"bytes,1,opt,name=batch_collection_token,json=batchCollectionToken,proto3" json:"batch_collection_token,omitempty"`
	// Optional; how many messages to send in a single batch (default: 1000)
	BatchSize int32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// Optional; how many times plumber will try re-sending a batch (default: 3)
	BatchMaxRetry int32 `protobuf:"varint,3,opt,name=batch_max_retry,json=batchMaxRetry,proto3" json:"batch_max_retry,omitempty"`
	// Semi-required; either set this or connection_config. If set,
	// connection_config will be ignored.
	ConnectionId string `protobuf:"bytes,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Semi-required; either set this or connection_id. This is generally used
	// for creating ephemeral connections (ie. via CLI).
	ConnectionConfig *ConnectionConfig `protobuf:"bytes,5,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
	// Optional; where to send events to (default: grpc-collector.batch.sh:9000)
	XBatchshGrpcAddress string `protobuf:"bytes,6,opt,name=_batchsh_grpc_address,json=BatchshGrpcAddress,proto3" json:"_batchsh_grpc_address,omitempty"`
	// Optional; whether to use TLS for gRPC (default: true)
	XBatchshGrpcDisableTls bool `protobuf:"varint,7,opt,name=_batchsh_grpc_disable_tls,json=BatchshGrpcDisableTls,proto3" json:"_batchsh_grpc_disable_tls,omitempty"`
	// Optional: how long to wait before giving up talking to the gRPC collector (default: 10s)
	XBatchshGrpcTimeout bool `protobuf:"varint,8,opt,name=_batchsh_grpc_timeout,json=BatchshGrpcTimeout,proto3" json:"_batchsh_grpc_timeout,omitempty"`
	// ID of the created relay entry; populated by plumber.
	XRelayId string `protobuf:"bytes,9,opt,name=_relay_id,json=RelayId,proto3" json:"_relay_id,omitempty"`
	// Set appropriate backend based on what connection is specified
	// ie. If connection_id is for kafka - specify Kafka backend
	//
	// Types that are valid to be assigned to Backends:
	//	*RelayConfig_Kafka
	//	*RelayConfig_ActiveMq
	//	*RelayConfig_Awssqs
	//	*RelayConfig_Awssns
	//	*RelayConfig_Mongo
	//	*RelayConfig_Nats
	//	*RelayConfig_NatsStreaming
	//	*RelayConfig_Nsq
	//	*RelayConfig_Postgres
	//	*RelayConfig_Pulsar
	//	*RelayConfig_Rabbit
	//	*RelayConfig_RabbitStreams
	//	*RelayConfig_RedisPubsub
	//	*RelayConfig_RedisStreams
	//	*RelayConfig_AzureEventHub
	//	*RelayConfig_AzureServiceBus
	Backends             isRelayConfig_Backends `protobuf_oneof:"Backends"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RelayConfig) Reset()         { *m = RelayConfig{} }
func (m *RelayConfig) String() string { return proto.CompactTextString(m) }
func (*RelayConfig) ProtoMessage()    {}
func (*RelayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0}
}

func (m *RelayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayConfig.Unmarshal(m, b)
}
func (m *RelayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayConfig.Marshal(b, m, deterministic)
}
func (m *RelayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayConfig.Merge(m, src)
}
func (m *RelayConfig) XXX_Size() int {
	return xxx_messageInfo_RelayConfig.Size(m)
}
func (m *RelayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RelayConfig proto.InternalMessageInfo

func (m *RelayConfig) GetBatchCollectionToken() string {
	if m != nil {
		return m.BatchCollectionToken
	}
	return ""
}

func (m *RelayConfig) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *RelayConfig) GetBatchMaxRetry() int32 {
	if m != nil {
		return m.BatchMaxRetry
	}
	return 0
}

func (m *RelayConfig) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *RelayConfig) GetConnectionConfig() *ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (m *RelayConfig) GetXBatchshGrpcAddress() string {
	if m != nil {
		return m.XBatchshGrpcAddress
	}
	return ""
}

func (m *RelayConfig) GetXBatchshGrpcDisableTls() bool {
	if m != nil {
		return m.XBatchshGrpcDisableTls
	}
	return false
}

func (m *RelayConfig) GetXBatchshGrpcTimeout() bool {
	if m != nil {
		return m.XBatchshGrpcTimeout
	}
	return false
}

func (m *RelayConfig) GetXRelayId() string {
	if m != nil {
		return m.XRelayId
	}
	return ""
}

type isRelayConfig_Backends interface {
	isRelayConfig_Backends()
}

type RelayConfig_Kafka struct {
	Kafka *backends.Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type RelayConfig_ActiveMq struct {
	ActiveMq *backends.ActiveMQ `protobuf:"bytes,101,opt,name=active_mq,json=activeMq,proto3,oneof"`
}

type RelayConfig_Awssqs struct {
	Awssqs *backends.AWSSQS `protobuf:"bytes,102,opt,name=awssqs,proto3,oneof"`
}

type RelayConfig_Awssns struct {
	Awssns *backends.AWSSNS `protobuf:"bytes,103,opt,name=awssns,proto3,oneof"`
}

type RelayConfig_Mongo struct {
	Mongo *backends.Mongo `protobuf:"bytes,104,opt,name=mongo,proto3,oneof"`
}

type RelayConfig_Nats struct {
	Nats *backends.Nats `protobuf:"bytes,105,opt,name=nats,proto3,oneof"`
}

type RelayConfig_NatsStreaming struct {
	NatsStreaming *backends.NatsStreaming `protobuf:"bytes,106,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type RelayConfig_Nsq struct {
	Nsq *backends.NSQ `protobuf:"bytes,107,opt,name=nsq,proto3,oneof"`
}

type RelayConfig_Postgres struct {
	Postgres *backends.Postgres `protobuf:"bytes,108,opt,name=postgres,proto3,oneof"`
}

type RelayConfig_Pulsar struct {
	Pulsar *backends.Pulsar `protobuf:"bytes,109,opt,name=pulsar,proto3,oneof"`
}

type RelayConfig_Rabbit struct {
	Rabbit *backends.Rabbit `protobuf:"bytes,110,opt,name=rabbit,proto3,oneof"`
}

type RelayConfig_RabbitStreams struct {
	RabbitStreams *backends.RabbitStreams `protobuf:"bytes,111,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type RelayConfig_RedisPubsub struct {
	RedisPubsub *backends.RedisPubsub `protobuf:"bytes,112,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type RelayConfig_RedisStreams struct {
	RedisStreams *backends.RedisStreams `protobuf:"bytes,113,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type RelayConfig_AzureEventHub struct {
	AzureEventHub *backends.AzureEventHub `protobuf:"bytes,114,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

type RelayConfig_AzureServiceBus struct {
	AzureServiceBus *backends.AzureServiceBus `protobuf:"bytes,115,opt,name=azure_service_bus,json=azureServiceBus,proto3,oneof"`
}

func (*RelayConfig_Kafka) isRelayConfig_Backends() {}

func (*RelayConfig_ActiveMq) isRelayConfig_Backends() {}

func (*RelayConfig_Awssqs) isRelayConfig_Backends() {}

func (*RelayConfig_Awssns) isRelayConfig_Backends() {}

func (*RelayConfig_Mongo) isRelayConfig_Backends() {}

func (*RelayConfig_Nats) isRelayConfig_Backends() {}

func (*RelayConfig_NatsStreaming) isRelayConfig_Backends() {}

func (*RelayConfig_Nsq) isRelayConfig_Backends() {}

func (*RelayConfig_Postgres) isRelayConfig_Backends() {}

func (*RelayConfig_Pulsar) isRelayConfig_Backends() {}

func (*RelayConfig_Rabbit) isRelayConfig_Backends() {}

func (*RelayConfig_RabbitStreams) isRelayConfig_Backends() {}

func (*RelayConfig_RedisPubsub) isRelayConfig_Backends() {}

func (*RelayConfig_RedisStreams) isRelayConfig_Backends() {}

func (*RelayConfig_AzureEventHub) isRelayConfig_Backends() {}

func (*RelayConfig_AzureServiceBus) isRelayConfig_Backends() {}

func (m *RelayConfig) GetBackends() isRelayConfig_Backends {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *RelayConfig) GetKafka() *backends.Kafka {
	if x, ok := m.GetBackends().(*RelayConfig_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *RelayConfig) GetActiveMq() *backends.ActiveMQ {
	if x, ok := m.GetBackends().(*RelayConfig_ActiveMq); ok {
		return x.ActiveMq
	}
	return nil
}

func (m *RelayConfig) GetAwssqs() *backends.AWSSQS {
	if x, ok := m.GetBackends().(*RelayConfig_Awssqs); ok {
		return x.Awssqs
	}
	return nil
}

func (m *RelayConfig) GetAwssns() *backends.AWSSNS {
	if x, ok := m.GetBackends().(*RelayConfig_Awssns); ok {
		return x.Awssns
	}
	return nil
}

func (m *RelayConfig) GetMongo() *backends.Mongo {
	if x, ok := m.GetBackends().(*RelayConfig_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (m *RelayConfig) GetNats() *backends.Nats {
	if x, ok := m.GetBackends().(*RelayConfig_Nats); ok {
		return x.Nats
	}
	return nil
}

func (m *RelayConfig) GetNatsStreaming() *backends.NatsStreaming {
	if x, ok := m.GetBackends().(*RelayConfig_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (m *RelayConfig) GetNsq() *backends.NSQ {
	if x, ok := m.GetBackends().(*RelayConfig_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (m *RelayConfig) GetPostgres() *backends.Postgres {
	if x, ok := m.GetBackends().(*RelayConfig_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (m *RelayConfig) GetPulsar() *backends.Pulsar {
	if x, ok := m.GetBackends().(*RelayConfig_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (m *RelayConfig) GetRabbit() *backends.Rabbit {
	if x, ok := m.GetBackends().(*RelayConfig_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (m *RelayConfig) GetRabbitStreams() *backends.RabbitStreams {
	if x, ok := m.GetBackends().(*RelayConfig_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (m *RelayConfig) GetRedisPubsub() *backends.RedisPubsub {
	if x, ok := m.GetBackends().(*RelayConfig_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (m *RelayConfig) GetRedisStreams() *backends.RedisStreams {
	if x, ok := m.GetBackends().(*RelayConfig_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (m *RelayConfig) GetAzureEventHub() *backends.AzureEventHub {
	if x, ok := m.GetBackends().(*RelayConfig_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}

func (m *RelayConfig) GetAzureServiceBus() *backends.AzureServiceBus {
	if x, ok := m.GetBackends().(*RelayConfig_AzureServiceBus); ok {
		return x.AzureServiceBus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RelayConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RelayConfig_Kafka)(nil),
		(*RelayConfig_ActiveMq)(nil),
		(*RelayConfig_Awssqs)(nil),
		(*RelayConfig_Awssns)(nil),
		(*RelayConfig_Mongo)(nil),
		(*RelayConfig_Nats)(nil),
		(*RelayConfig_NatsStreaming)(nil),
		(*RelayConfig_Nsq)(nil),
		(*RelayConfig_Postgres)(nil),
		(*RelayConfig_Pulsar)(nil),
		(*RelayConfig_Rabbit)(nil),
		(*RelayConfig_RabbitStreams)(nil),
		(*RelayConfig_RedisPubsub)(nil),
		(*RelayConfig_RedisStreams)(nil),
		(*RelayConfig_AzureEventHub)(nil),
		(*RelayConfig_AzureServiceBus)(nil),
	}
}

type GetAllRelaysRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetAllRelaysRequest) Reset()         { *m = GetAllRelaysRequest{} }
func (m *GetAllRelaysRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllRelaysRequest) ProtoMessage()    {}
func (*GetAllRelaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{1}
}

func (m *GetAllRelaysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllRelaysRequest.Unmarshal(m, b)
}
func (m *GetAllRelaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllRelaysRequest.Marshal(b, m, deterministic)
}
func (m *GetAllRelaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRelaysRequest.Merge(m, src)
}
func (m *GetAllRelaysRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllRelaysRequest.Size(m)
}
func (m *GetAllRelaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRelaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRelaysRequest proto.InternalMessageInfo

func (m *GetAllRelaysRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type GetAllRelaysResponse struct {
	Status *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	// Will be set as empty []Relay if no relays are configured
	Configs              []*RelayConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetAllRelaysResponse) Reset()         { *m = GetAllRelaysResponse{} }
func (m *GetAllRelaysResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllRelaysResponse) ProtoMessage()    {}
func (*GetAllRelaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{2}
}

func (m *GetAllRelaysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllRelaysResponse.Unmarshal(m, b)
}
func (m *GetAllRelaysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllRelaysResponse.Marshal(b, m, deterministic)
}
func (m *GetAllRelaysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRelaysResponse.Merge(m, src)
}
func (m *GetAllRelaysResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllRelaysResponse.Size(m)
}
func (m *GetAllRelaysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRelaysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRelaysResponse proto.InternalMessageInfo

func (m *GetAllRelaysResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetAllRelaysResponse) GetConfigs() []*RelayConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type GetRelayRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	RelayId              string       `protobuf:"bytes,1,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetRelayRequest) Reset()         { *m = GetRelayRequest{} }
func (m *GetRelayRequest) String() string { return proto.CompactTextString(m) }
func (*GetRelayRequest) ProtoMessage()    {}
func (*GetRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{3}
}

func (m *GetRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRelayRequest.Unmarshal(m, b)
}
func (m *GetRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRelayRequest.Marshal(b, m, deterministic)
}
func (m *GetRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRelayRequest.Merge(m, src)
}
func (m *GetRelayRequest) XXX_Size() int {
	return xxx_messageInfo_GetRelayRequest.Size(m)
}
func (m *GetRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRelayRequest proto.InternalMessageInfo

func (m *GetRelayRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *GetRelayRequest) GetRelayId() string {
	if m != nil {
		return m.RelayId
	}
	return ""
}

type GetRelayResponse struct {
	Status *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	// Set only if status is OK
	Config               *RelayConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetRelayResponse) Reset()         { *m = GetRelayResponse{} }
func (m *GetRelayResponse) String() string { return proto.CompactTextString(m) }
func (*GetRelayResponse) ProtoMessage()    {}
func (*GetRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{4}
}

func (m *GetRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRelayResponse.Unmarshal(m, b)
}
func (m *GetRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRelayResponse.Marshal(b, m, deterministic)
}
func (m *GetRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRelayResponse.Merge(m, src)
}
func (m *GetRelayResponse) XXX_Size() int {
	return xxx_messageInfo_GetRelayResponse.Size(m)
}
func (m *GetRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRelayResponse proto.InternalMessageInfo

func (m *GetRelayResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetRelayResponse) GetConfig() *RelayConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type CreateRelayRequest struct {
	// Every gRPC request must have a valid auth config
	Auth   *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	Config *RelayConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Types that are valid to be assigned to Backends:
	//	*CreateRelayRequest_Kafka
	//	*CreateRelayRequest_ActiveMq
	//	*CreateRelayRequest_Awssqs
	//	*CreateRelayRequest_Awssns
	//	*CreateRelayRequest_Mongo
	//	*CreateRelayRequest_Nats
	//	*CreateRelayRequest_NatsStreaming
	//	*CreateRelayRequest_Nsq
	//	*CreateRelayRequest_Postgres
	//	*CreateRelayRequest_Pulsar
	//	*CreateRelayRequest_Rabbit
	//	*CreateRelayRequest_RabbitStreams
	//	*CreateRelayRequest_RedisPubsub
	//	*CreateRelayRequest_RedisStreams
	Backends             isCreateRelayRequest_Backends `protobuf_oneof:"Backends"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CreateRelayRequest) Reset()         { *m = CreateRelayRequest{} }
func (m *CreateRelayRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRelayRequest) ProtoMessage()    {}
func (*CreateRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{5}
}

func (m *CreateRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRelayRequest.Unmarshal(m, b)
}
func (m *CreateRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRelayRequest.Marshal(b, m, deterministic)
}
func (m *CreateRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRelayRequest.Merge(m, src)
}
func (m *CreateRelayRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRelayRequest.Size(m)
}
func (m *CreateRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRelayRequest proto.InternalMessageInfo

func (m *CreateRelayRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *CreateRelayRequest) GetConfig() *RelayConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type isCreateRelayRequest_Backends interface {
	isCreateRelayRequest_Backends()
}

type CreateRelayRequest_Kafka struct {
	Kafka *backends.Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type CreateRelayRequest_ActiveMq struct {
	ActiveMq *backends.ActiveMQ `protobuf:"bytes,101,opt,name=active_mq,json=activeMq,proto3,oneof"`
}

type CreateRelayRequest_Awssqs struct {
	Awssqs *backends.AWSSQS `protobuf:"bytes,102,opt,name=awssqs,proto3,oneof"`
}

type CreateRelayRequest_Awssns struct {
	Awssns *backends.AWSSNS `protobuf:"bytes,103,opt,name=awssns,proto3,oneof"`
}

type CreateRelayRequest_Mongo struct {
	Mongo *backends.Mongo `protobuf:"bytes,104,opt,name=mongo,proto3,oneof"`
}

type CreateRelayRequest_Nats struct {
	Nats *backends.Nats `protobuf:"bytes,105,opt,name=nats,proto3,oneof"`
}

type CreateRelayRequest_NatsStreaming struct {
	NatsStreaming *backends.NatsStreaming `protobuf:"bytes,106,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type CreateRelayRequest_Nsq struct {
	Nsq *backends.NSQ `protobuf:"bytes,107,opt,name=nsq,proto3,oneof"`
}

type CreateRelayRequest_Postgres struct {
	Postgres *backends.Postgres `protobuf:"bytes,108,opt,name=postgres,proto3,oneof"`
}

type CreateRelayRequest_Pulsar struct {
	Pulsar *backends.Pulsar `protobuf:"bytes,109,opt,name=pulsar,proto3,oneof"`
}

type CreateRelayRequest_Rabbit struct {
	Rabbit *backends.Rabbit `protobuf:"bytes,110,opt,name=rabbit,proto3,oneof"`
}

type CreateRelayRequest_RabbitStreams struct {
	RabbitStreams *backends.RabbitStreams `protobuf:"bytes,111,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type CreateRelayRequest_RedisPubsub struct {
	RedisPubsub *backends.RedisPubsub `protobuf:"bytes,112,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type CreateRelayRequest_RedisStreams struct {
	RedisStreams *backends.RedisStreams `protobuf:"bytes,113,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

func (*CreateRelayRequest_Kafka) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_ActiveMq) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Awssqs) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Awssns) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Mongo) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Nats) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_NatsStreaming) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Nsq) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Postgres) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Pulsar) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_Rabbit) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_RabbitStreams) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_RedisPubsub) isCreateRelayRequest_Backends() {}

func (*CreateRelayRequest_RedisStreams) isCreateRelayRequest_Backends() {}

func (m *CreateRelayRequest) GetBackends() isCreateRelayRequest_Backends {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *CreateRelayRequest) GetKafka() *backends.Kafka {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (m *CreateRelayRequest) GetActiveMq() *backends.ActiveMQ {
	if x, ok := m.GetBackends().(*CreateRelayRequest_ActiveMq); ok {
		return x.ActiveMq
	}
	return nil
}

func (m *CreateRelayRequest) GetAwssqs() *backends.AWSSQS {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Awssqs); ok {
		return x.Awssqs
	}
	return nil
}

func (m *CreateRelayRequest) GetAwssns() *backends.AWSSNS {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Awssns); ok {
		return x.Awssns
	}
	return nil
}

func (m *CreateRelayRequest) GetMongo() *backends.Mongo {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (m *CreateRelayRequest) GetNats() *backends.Nats {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Nats); ok {
		return x.Nats
	}
	return nil
}

func (m *CreateRelayRequest) GetNatsStreaming() *backends.NatsStreaming {
	if x, ok := m.GetBackends().(*CreateRelayRequest_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (m *CreateRelayRequest) GetNsq() *backends.NSQ {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (m *CreateRelayRequest) GetPostgres() *backends.Postgres {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (m *CreateRelayRequest) GetPulsar() *backends.Pulsar {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (m *CreateRelayRequest) GetRabbit() *backends.Rabbit {
	if x, ok := m.GetBackends().(*CreateRelayRequest_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (m *CreateRelayRequest) GetRabbitStreams() *backends.RabbitStreams {
	if x, ok := m.GetBackends().(*CreateRelayRequest_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (m *CreateRelayRequest) GetRedisPubsub() *backends.RedisPubsub {
	if x, ok := m.GetBackends().(*CreateRelayRequest_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (m *CreateRelayRequest) GetRedisStreams() *backends.RedisStreams {
	if x, ok := m.GetBackends().(*CreateRelayRequest_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateRelayRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateRelayRequest_Kafka)(nil),
		(*CreateRelayRequest_ActiveMq)(nil),
		(*CreateRelayRequest_Awssqs)(nil),
		(*CreateRelayRequest_Awssns)(nil),
		(*CreateRelayRequest_Mongo)(nil),
		(*CreateRelayRequest_Nats)(nil),
		(*CreateRelayRequest_NatsStreaming)(nil),
		(*CreateRelayRequest_Nsq)(nil),
		(*CreateRelayRequest_Postgres)(nil),
		(*CreateRelayRequest_Pulsar)(nil),
		(*CreateRelayRequest_Rabbit)(nil),
		(*CreateRelayRequest_RabbitStreams)(nil),
		(*CreateRelayRequest_RedisPubsub)(nil),
		(*CreateRelayRequest_RedisStreams)(nil),
	}
}

type CreateRelayResponse struct {
	Status *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	// ID of the created relay entry
	RelayId              string   `protobuf:"bytes,1,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRelayResponse) Reset()         { *m = CreateRelayResponse{} }
func (m *CreateRelayResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRelayResponse) ProtoMessage()    {}
func (*CreateRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{6}
}

func (m *CreateRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRelayResponse.Unmarshal(m, b)
}
func (m *CreateRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRelayResponse.Marshal(b, m, deterministic)
}
func (m *CreateRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRelayResponse.Merge(m, src)
}
func (m *CreateRelayResponse) XXX_Size() int {
	return xxx_messageInfo_CreateRelayResponse.Size(m)
}
func (m *CreateRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRelayResponse proto.InternalMessageInfo

func (m *CreateRelayResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateRelayResponse) GetRelayId() string {
	if m != nil {
		return m.RelayId
	}
	return ""
}

// WARNING: Any in-progress relay will be interrupted/restarted
type UpdateRelayRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	RelayId              string       `protobuf:"bytes,1,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	Config               *RelayConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateRelayRequest) Reset()         { *m = UpdateRelayRequest{} }
func (m *UpdateRelayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRelayRequest) ProtoMessage()    {}
func (*UpdateRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{7}
}

func (m *UpdateRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRelayRequest.Unmarshal(m, b)
}
func (m *UpdateRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRelayRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRelayRequest.Merge(m, src)
}
func (m *UpdateRelayRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRelayRequest.Size(m)
}
func (m *UpdateRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRelayRequest proto.InternalMessageInfo

func (m *UpdateRelayRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *UpdateRelayRequest) GetRelayId() string {
	if m != nil {
		return m.RelayId
	}
	return ""
}

func (m *UpdateRelayRequest) GetConfig() *RelayConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type UpdateRelayResponse struct {
	Status               *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateRelayResponse) Reset()         { *m = UpdateRelayResponse{} }
func (m *UpdateRelayResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRelayResponse) ProtoMessage()    {}
func (*UpdateRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{8}
}

func (m *UpdateRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRelayResponse.Unmarshal(m, b)
}
func (m *UpdateRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRelayResponse.Marshal(b, m, deterministic)
}
func (m *UpdateRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRelayResponse.Merge(m, src)
}
func (m *UpdateRelayResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateRelayResponse.Size(m)
}
func (m *UpdateRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRelayResponse proto.InternalMessageInfo

func (m *UpdateRelayResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Resume a paused relay
type ResumeRelayRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	RelayId              string       `protobuf:"bytes,1,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResumeRelayRequest) Reset()         { *m = ResumeRelayRequest{} }
func (m *ResumeRelayRequest) String() string { return proto.CompactTextString(m) }
func (*ResumeRelayRequest) ProtoMessage()    {}
func (*ResumeRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{9}
}

func (m *ResumeRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeRelayRequest.Unmarshal(m, b)
}
func (m *ResumeRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeRelayRequest.Marshal(b, m, deterministic)
}
func (m *ResumeRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeRelayRequest.Merge(m, src)
}
func (m *ResumeRelayRequest) XXX_Size() int {
	return xxx_messageInfo_ResumeRelayRequest.Size(m)
}
func (m *ResumeRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeRelayRequest proto.InternalMessageInfo

func (m *ResumeRelayRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ResumeRelayRequest) GetRelayId() string {
	if m != nil {
		return m.RelayId
	}
	return ""
}

type ResumeRelayResponse struct {
	Status               *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResumeRelayResponse) Reset()         { *m = ResumeRelayResponse{} }
func (m *ResumeRelayResponse) String() string { return proto.CompactTextString(m) }
func (*ResumeRelayResponse) ProtoMessage()    {}
func (*ResumeRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{10}
}

func (m *ResumeRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeRelayResponse.Unmarshal(m, b)
}
func (m *ResumeRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeRelayResponse.Marshal(b, m, deterministic)
}
func (m *ResumeRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeRelayResponse.Merge(m, src)
}
func (m *ResumeRelayResponse) XXX_Size() int {
	return xxx_messageInfo_ResumeRelayResponse.Size(m)
}
func (m *ResumeRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeRelayResponse proto.InternalMessageInfo

func (m *ResumeRelayResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Temporarily stop/pause a relay
type StopRelayRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	RelayId              string       `protobuf:"bytes,1,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StopRelayRequest) Reset()         { *m = StopRelayRequest{} }
func (m *StopRelayRequest) String() string { return proto.CompactTextString(m) }
func (*StopRelayRequest) ProtoMessage()    {}
func (*StopRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{11}
}

func (m *StopRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRelayRequest.Unmarshal(m, b)
}
func (m *StopRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRelayRequest.Marshal(b, m, deterministic)
}
func (m *StopRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRelayRequest.Merge(m, src)
}
func (m *StopRelayRequest) XXX_Size() int {
	return xxx_messageInfo_StopRelayRequest.Size(m)
}
func (m *StopRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRelayRequest proto.InternalMessageInfo

func (m *StopRelayRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *StopRelayRequest) GetRelayId() string {
	if m != nil {
		return m.RelayId
	}
	return ""
}

type StopRelayResponse struct {
	Status               *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StopRelayResponse) Reset()         { *m = StopRelayResponse{} }
func (m *StopRelayResponse) String() string { return proto.CompactTextString(m) }
func (*StopRelayResponse) ProtoMessage()    {}
func (*StopRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{12}
}

func (m *StopRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRelayResponse.Unmarshal(m, b)
}
func (m *StopRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRelayResponse.Marshal(b, m, deterministic)
}
func (m *StopRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRelayResponse.Merge(m, src)
}
func (m *StopRelayResponse) XXX_Size() int {
	return xxx_messageInfo_StopRelayResponse.Size(m)
}
func (m *StopRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopRelayResponse proto.InternalMessageInfo

func (m *StopRelayResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type DeleteRelayRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	RelayId              string       `protobuf:"bytes,1,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeleteRelayRequest) Reset()         { *m = DeleteRelayRequest{} }
func (m *DeleteRelayRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRelayRequest) ProtoMessage()    {}
func (*DeleteRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{13}
}

func (m *DeleteRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRelayRequest.Unmarshal(m, b)
}
func (m *DeleteRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRelayRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelayRequest.Merge(m, src)
}
func (m *DeleteRelayRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRelayRequest.Size(m)
}
func (m *DeleteRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelayRequest proto.InternalMessageInfo

func (m *DeleteRelayRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *DeleteRelayRequest) GetRelayId() string {
	if m != nil {
		return m.RelayId
	}
	return ""
}

type DeleteRelayResponse struct {
	Status               *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteRelayResponse) Reset()         { *m = DeleteRelayResponse{} }
func (m *DeleteRelayResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRelayResponse) ProtoMessage()    {}
func (*DeleteRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{14}
}

func (m *DeleteRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRelayResponse.Unmarshal(m, b)
}
func (m *DeleteRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRelayResponse.Marshal(b, m, deterministic)
}
func (m *DeleteRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelayResponse.Merge(m, src)
}
func (m *DeleteRelayResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteRelayResponse.Size(m)
}
func (m *DeleteRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelayResponse proto.InternalMessageInfo

func (m *DeleteRelayResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*RelayConfig)(nil), "protos.RelayConfig")
	proto.RegisterType((*GetAllRelaysRequest)(nil), "protos.GetAllRelaysRequest")
	proto.RegisterType((*GetAllRelaysResponse)(nil), "protos.GetAllRelaysResponse")
	proto.RegisterType((*GetRelayRequest)(nil), "protos.GetRelayRequest")
	proto.RegisterType((*GetRelayResponse)(nil), "protos.GetRelayResponse")
	proto.RegisterType((*CreateRelayRequest)(nil), "protos.CreateRelayRequest")
	proto.RegisterType((*CreateRelayResponse)(nil), "protos.CreateRelayResponse")
	proto.RegisterType((*UpdateRelayRequest)(nil), "protos.UpdateRelayRequest")
	proto.RegisterType((*UpdateRelayResponse)(nil), "protos.UpdateRelayResponse")
	proto.RegisterType((*ResumeRelayRequest)(nil), "protos.ResumeRelayRequest")
	proto.RegisterType((*ResumeRelayResponse)(nil), "protos.ResumeRelayResponse")
	proto.RegisterType((*StopRelayRequest)(nil), "protos.StopRelayRequest")
	proto.RegisterType((*StopRelayResponse)(nil), "protos.StopRelayResponse")
	proto.RegisterType((*DeleteRelayRequest)(nil), "protos.DeleteRelayRequest")
	proto.RegisterType((*DeleteRelayResponse)(nil), "protos.DeleteRelayResponse")
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor_9f69a7d5a802d584) }

var fileDescriptor_9f69a7d5a802d584 = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x95, 0xe2, 0x8b, 0xe4, 0x71, 0x54, 0xdb, 0xeb, 0x4b, 0xd6, 0x6e, 0x1c, 0x08, 0x2a, 0x50,
	0x08, 0x08, 0x24, 0x21, 0x6d, 0xd0, 0xe6, 0xad, 0x90, 0x2f, 0xb0, 0x82, 0xc2, 0x86, 0x43, 0xb9,
	0x0d, 0xda, 0x17, 0x76, 0x49, 0xae, 0x25, 0x56, 0xbc, 0x89, 0xbb, 0x74, 0x12, 0x7f, 0x40, 0xd1,
	0xb7, 0xfe, 0x66, 0xfb, 0x17, 0xc5, 0xce, 0x92, 0x12, 0x69, 0x59, 0x29, 0x22, 0xa4, 0x6f, 0x7e,
	0xb2, 0x35, 0xe7, 0xcc, 0x99, 0x8b, 0x34, 0x87, 0x20, 0xac, 0xc7, 0xdc, 0x63, 0x1f, 0xda, 0x51,
	0x1c, 0xca, 0x90, 0xac, 0xe2, 0x1f, 0x71, 0x50, 0xb3, 0xc3, 0x20, 0xe0, 0xb6, 0xd4, 0xe1, 0x83,
	0x1d, 0x8b, 0xd9, 0x23, 0x1e, 0x38, 0xa2, 0x33, 0x62, 0xd7, 0x23, 0x96, 0x46, 0x9f, 0x4c, 0xa2,
	0xcc, 0x96, 0xee, 0x0d, 0xf7, 0xc7, 0x29, 0xb0, 0x37, 0x05, 0xde, 0x89, 0x96, 0x08, 0xc4, 0xfd,
	0xf1, 0xb1, 0x98, 0x91, 0xf7, 0xc3, 0x60, 0x10, 0xa6, 0xd1, 0xed, 0x49, 0x34, 0x60, 0x32, 0xa3,
	0x1e, 0x16, 0x82, 0x2d, 0x21, 0x63, 0xce, 0x7c, 0x37, 0x18, 0xa4, 0x30, 0x99, 0xc2, 0x62, 0x3c,
	0xd3, 0x66, 0x14, 0x0a, 0x39, 0x88, 0x79, 0xa6, 0xb5, 0x3b, 0x05, 0x12, 0x4f, 0xb0, 0x78, 0x26,
	0x1c, 0x33, 0xcb, 0x72, 0xe5, 0x4c, 0x65, 0x1d, 0x4e, 0x6b, 0x67, 0x62, 0x5f, 0x4e, 0x61, 0xee,
	0xb8, 0xa2, 0x15, 0x25, 0x96, 0x48, 0xac, 0x14, 0x7c, 0x7a, 0x07, 0x2c, 0xa6, 0xd6, 0xa7, 0x6b,
	0xb9, 0x4d, 0x62, 0xde, 0x12, 0x3c, 0xbe, 0x71, 0x6d, 0xde, 0xb2, 0x92, 0x8c, 0xf1, 0xec, 0x0e,
	0x83, 0xdf, 0xf0, 0x40, 0xb6, 0x86, 0x13, 0xfd, 0x2d, 0x3b, 0xf4, 0xfd, 0x30, 0xe8, 0xb0, 0x44,
	0x0e, 0xb3, 0xed, 0xa5, 0x21, 0x21, 0x99, 0xcc, 0x74, 0x1a, 0xff, 0x00, 0xac, 0x1b, 0xea, 0xeb,
	0x3e, 0x0e, 0x83, 0x6b, 0x77, 0x40, 0x5e, 0xc2, 0x9e, 0xc5, 0xa4, 0x3d, 0x34, 0xed, 0xd0, 0xf3,
	0xb8, 0x2d, 0xdd, 0x30, 0x30, 0x65, 0x38, 0xe2, 0x01, 0x2d, 0xd7, 0xcb, 0xcd, 0x35, 0x63, 0x07,
	0xd1, 0xe3, 0x09, 0x78, 0xa5, 0x30, 0x72, 0x08, 0xa0, 0xb3, 0x84, 0x7b, 0xcb, 0xe9, 0xa3, 0x7a,
	0xb9, 0xb9, 0x62, 0xac, 0x61, 0xa4, 0xef, 0xde, 0x72, 0xf2, 0x35, 0x6c, 0x68, 0xd8, 0x67, 0xef,
	0xcd, 0x98, 0xcb, 0xf8, 0x03, 0x5d, 0x42, 0x4e, 0x0d, 0xc3, 0xe7, 0xec, 0xbd, 0xa1, 0x82, 0xe4,
	0x2b, 0xc8, 0x7e, 0x65, 0xaa, 0xac, 0xeb, 0xd0, 0x65, 0xac, 0xf9, 0x78, 0x1a, 0x7c, 0xed, 0x90,
	0x53, 0xd8, 0xca, 0x91, 0x6c, 0x6c, 0x9b, 0xae, 0xd4, 0xcb, 0xcd, 0xf5, 0x6f, 0xa8, 0x1e, 0x4a,
	0xb4, 0x8f, 0x27, 0x04, 0x3d, 0x96, 0xb1, 0x69, 0xdf, 0x89, 0x90, 0x17, 0xb0, 0x6b, 0x62, 0x75,
	0x31, 0x34, 0x07, 0x71, 0x64, 0x9b, 0xcc, 0x71, 0x62, 0x2e, 0x04, 0x5d, 0xc5, 0x9a, 0xe4, 0x48,
	0x63, 0x67, 0x71, 0x64, 0x77, 0x35, 0x42, 0x5e, 0xc1, 0x7e, 0x31, 0xc5, 0x71, 0x05, 0xb3, 0x3c,
	0x6e, 0x4a, 0x4f, 0xd0, 0x4a, 0xbd, 0xdc, 0xac, 0x1a, 0xbb, 0xb9, 0xb4, 0x13, 0x8d, 0x5e, 0x79,
	0x62, 0xb6, 0x98, 0x74, 0x7d, 0x1e, 0x26, 0x92, 0x56, 0x31, 0x2b, 0x5f, 0xec, 0x4a, 0x23, 0xe4,
	0x00, 0xd6, 0x4c, 0xbc, 0x43, 0xb5, 0x87, 0x35, 0xec, 0xa9, 0x82, 0x5f, 0xd4, 0x6b, 0x87, 0xb4,
	0x61, 0x05, 0xaf, 0x8e, 0x3a, 0x38, 0xf6, 0x5e, 0x36, 0x76, 0xf6, 0x9b, 0x68, 0xff, 0xa8, 0xd0,
	0x5e, 0xc9, 0xd0, 0x34, 0xf2, 0x0a, 0xd6, 0xf4, 0x3d, 0x9a, 0xfe, 0x98, 0x72, 0xcc, 0xd9, 0x9f,
	0xc9, 0xe9, 0x22, 0xe3, 0xfc, 0x4d, 0xaf, 0x64, 0x54, 0x35, 0xfb, 0x7c, 0x4c, 0x5e, 0xc0, 0x2a,
	0x7b, 0x27, 0xc4, 0x58, 0xd0, 0x6b, 0x4c, 0x7b, 0x32, 0x9b, 0xf6, 0xb6, 0xdf, 0x7f, 0xd3, 0xef,
	0x95, 0x8c, 0x94, 0x98, 0xa5, 0x04, 0x82, 0x0e, 0x3e, 0x92, 0x72, 0x31, 0x49, 0x09, 0x84, 0x9a,
	0x07, 0xcf, 0x9c, 0x0e, 0xe7, 0xcc, 0x73, 0xae, 0x50, 0x35, 0x0f, 0xd2, 0xc8, 0x73, 0x58, 0x56,
	0xb7, 0x4e, 0x5d, 0xa4, 0xef, 0xce, 0xd0, 0x2f, 0x98, 0x14, 0xbd, 0x92, 0x81, 0x24, 0x72, 0x06,
	0x5f, 0xa8, 0xbf, 0xe6, 0xc4, 0x18, 0xe8, 0xef, 0x98, 0xf6, 0xec, 0xde, 0xb4, 0x7e, 0xc6, 0xea,
	0x95, 0x8c, 0x5a, 0x90, 0x0f, 0x90, 0x26, 0x2c, 0x05, 0x62, 0x4c, 0x47, 0x98, 0xbd, 0x33, 0x9b,
	0xdd, 0x57, 0xab, 0x53, 0x14, 0xf2, 0x3d, 0x54, 0x33, 0x63, 0xa1, 0xde, 0x9c, 0x75, 0x5f, 0xa6,
	0x04, 0xb5, 0xee, 0x8c, 0xac, 0x76, 0xa7, 0x8d, 0x87, 0xfa, 0x73, 0x76, 0x77, 0x89, 0xb0, 0xda,
	0x9d, 0x26, 0xaa, 0x14, 0xed, 0x3e, 0x34, 0x98, 0x93, 0x62, 0x20, 0xac, 0x52, 0x34, 0x51, 0x6d,
	0x44, 0xff, 0x97, 0xee, 0x44, 0xd0, 0x70, 0xce, 0x46, 0x74, 0xaa, 0x5e, 0x81, 0xea, 0xb4, 0x16,
	0xe7, 0x03, 0xa4, 0x0b, 0x8f, 0xd1, 0xbd, 0x4c, 0x6d, 0x6d, 0x34, 0x42, 0x99, 0xa7, 0xb3, 0x32,
	0x8a, 0x74, 0x89, 0x9c, 0x5e, 0xc9, 0x58, 0x8f, 0xa7, 0x1f, 0xc9, 0x09, 0xd4, 0xb4, 0x44, 0xd6,
	0xca, 0x18, 0x35, 0x0e, 0xef, 0xd7, 0x98, 0x76, 0xa2, 0x0b, 0x67, 0x8d, 0xf4, 0x60, 0x03, 0x6d,
	0xd0, 0x44, 0x1b, 0x34, 0x87, 0x89, 0x45, 0xe3, 0x39, 0x23, 0x75, 0x15, 0xef, 0x54, 0xd1, 0x7a,
	0xd8, 0x4d, 0x8d, 0xe5, 0x03, 0xe4, 0x02, 0xb6, 0xb4, 0x52, 0x6a, 0xb9, 0xa6, 0x95, 0x08, 0x2a,
	0x50, 0xab, 0x7e, 0xbf, 0x56, 0x5f, 0x13, 0x8f, 0x12, 0xd5, 0x96, 0x6e, 0x63, 0x1a, 0x3a, 0x02,
	0xa8, 0x1e, 0xa5, 0xf4, 0xc6, 0x0f, 0xb0, 0x7d, 0xc6, 0x65, 0xd7, 0xf3, 0xf0, 0x8e, 0x85, 0xc1,
	0xc7, 0x09, 0x17, 0x92, 0x34, 0x61, 0x59, 0xb9, 0x34, 0xfd, 0xeb, 0x02, 0xcb, 0x6c, 0x67, 0x65,
	0xb4, 0x5d, 0xb7, 0xbb, 0x89, 0x1c, 0x1a, 0xc8, 0x68, 0x24, 0xb0, 0x53, 0x14, 0x10, 0x51, 0x18,
	0x08, 0x4e, 0xda, 0xb0, 0xaa, 0x4d, 0x9d, 0xfe, 0x5d, 0x29, 0x9e, 0x44, 0xaa, 0xd1, 0x47, 0xd4,
	0x48, 0x59, 0xa4, 0x05, 0x15, 0xed, 0x9b, 0x82, 0x96, 0xeb, 0x4b, 0xf9, 0x9a, 0xb9, 0x47, 0x81,
	0x91, 0x71, 0x1a, 0x3f, 0xc3, 0xc6, 0x19, 0x97, 0x08, 0x7d, 0x72, 0xcf, 0x64, 0x1f, 0xaa, 0x13,
	0x1b, 0xd3, 0x8f, 0x90, 0x4a, 0xac, 0x6d, 0xac, 0x11, 0xc2, 0xe6, 0x54, 0x77, 0xc1, 0x51, 0x9e,
	0xc3, 0x6a, 0xfa, 0x08, 0x28, 0x17, 0x3b, 0xc9, 0x4f, 0x92, 0x52, 0x1a, 0x7f, 0x56, 0x80, 0x1c,
	0xc7, 0x9c, 0x49, 0xbe, 0xe0, 0x30, 0x9f, 0x52, 0xed, 0xc1, 0xa5, 0x1f, 0x5c, 0xfa, 0xc1, 0xa5,
	0x73, 0x9f, 0x0b, 0x5e, 0xf8, 0x1b, 0x6c, 0x17, 0x2e, 0x71, 0xc1, 0xf3, 0xff, 0x88, 0xbb, 0xfc,
	0x51, 0x06, 0xf2, 0x53, 0xe4, 0x2c, 0x7e, 0xec, 0xf3, 0xb5, 0x73, 0x3e, 0xf0, 0xe8, 0xbf, 0x5d,
	0xe7, 0x14, 0xb6, 0x0b, 0x7d, 0x2c, 0x36, 0x6a, 0xe3, 0x17, 0x20, 0x06, 0x17, 0x89, 0xff, 0xf9,
	0xc7, 0x51, 0x1d, 0x16, 0xa4, 0x17, 0xec, 0xf0, 0x2d, 0x6c, 0xf6, 0x65, 0x18, 0x7d, 0xfe, 0xfe,
	0x8e, 0x61, 0x2b, 0x27, 0xbc, 0xf8, 0xfe, 0x4e, 0xb8, 0xc7, 0xe5, 0xff, 0xb3, 0xbf, 0x82, 0xf4,
	0x62, 0x1d, 0x1e, 0x7d, 0xf7, 0xeb, 0xcb, 0x81, 0x2b, 0xd5, 0x3b, 0x9c, 0x1d, 0xfa, 0x1d, 0x7c,
	0x5f, 0xb0, 0xc3, 0x38, 0xea, 0x44, 0x5e, 0xe2, 0x5b, 0x3c, 0x6e, 0x09, 0x7b, 0xc8, 0x7d, 0x26,
	0x3a, 0x56, 0xe2, 0x7a, 0x4e, 0x67, 0x10, 0x76, 0xb4, 0x9a, 0xa5, 0x5f, 0xd1, 0xbf, 0xfd, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0x7c, 0x20, 0xc6, 0xb8, 0x0f, 0x00, 0x00,
}
