// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/base.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	// Unique id automatically created by plumber
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Identifies which plumber instance received the event
	PlumberId        string `protobuf:"bytes,2,opt,name=plumber_id,json=plumberId,proto3" json:"plumber_id,omitempty"`
	UnixTimestampUtc int64  `protobuf:"varint,99,opt,name=unix_timestamp_utc,json=unixTimestampUtc,proto3" json:"unix_timestamp_utc,omitempty"`
	// Types that are valid to be assigned to Record:
	//	*Record_Kafka
	Record               isRecord_Record `protobuf_oneof:"Record"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd29fa8a30a39852, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Record) GetPlumberId() string {
	if m != nil {
		return m.PlumberId
	}
	return ""
}

func (m *Record) GetUnixTimestampUtc() int64 {
	if m != nil {
		return m.UnixTimestampUtc
	}
	return 0
}

type isRecord_Record interface {
	isRecord_Record()
}

type Record_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

func (*Record_Kafka) isRecord_Record() {}

func (m *Record) GetRecord() isRecord_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Record) GetKafka() *Kafka {
	if x, ok := m.GetRecord().(*Record_Kafka); ok {
		return x.Kafka
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Record) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Record_Kafka)(nil),
	}
}

func init() {
	proto.RegisterType((*Record)(nil), "protos.records.Record")
}

func init() { proto.RegisterFile("records/base.proto", fileDescriptor_cd29fa8a30a39852) }

var fileDescriptor_cd29fa8a30a39852 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8e, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x8d, 0xe2, 0xe2, 0x46, 0x10, 0x89, 0x08, 0x45, 0x10, 0x8a, 0xa7, 0x1e, 0xdc, 0x04,
	0xf4, 0x2a, 0x1e, 0xf6, 0xe4, 0xe2, 0xad, 0xe8, 0xc5, 0x4b, 0x49, 0x26, 0xb1, 0x0d, 0xbb, 0x31,
	0x25, 0x93, 0x80, 0x7f, 0xca, 0xff, 0x28, 0x4d, 0xd3, 0xc3, 0x9e, 0x86, 0x79, 0xdf, 0xe3, 0xf1,
	0x51, 0x16, 0x0c, 0xf8, 0xa0, 0x51, 0x28, 0x89, 0x86, 0x8f, 0xc1, 0x47, 0xcf, 0xae, 0xf2, 0x41,
	0x5e, 0xd0, 0xdd, 0xcd, 0xd2, 0xd9, 0xcb, 0xef, 0xbd, 0x9c, 0x4b, 0x0f, 0x7f, 0x84, 0xae, 0xda,
	0x9c, 0xb3, 0x7b, 0x4a, 0x9d, 0x41, 0x94, 0xbd, 0xe9, 0xac, 0xae, 0x48, 0x4d, 0x9a, 0x75, 0xbb,
	0x2e, 0xc9, 0x2e, 0xe3, 0xf1, 0x90, 0x9c, 0x32, 0x61, 0xc2, 0xa7, 0x33, 0x2e, 0xc9, 0x4e, 0xb3,
	0x47, 0xca, 0xd2, 0x8f, 0xfd, 0xed, 0xa2, 0x75, 0x06, 0xa3, 0x74, 0x63, 0x97, 0x22, 0x54, 0x50,
	0x93, 0xe6, 0xac, 0xbd, 0x9e, 0xc8, 0xc7, 0x02, 0x3e, 0x23, 0xb0, 0x0d, 0x3d, 0xcf, 0x16, 0x95,
	0xae, 0x49, 0x73, 0xf9, 0x74, 0xcb, 0x8f, 0x5d, 0xf9, 0xfb, 0x04, 0xdf, 0x4e, 0xda, 0xb9, 0xb5,
	0xbd, 0x58, 0x24, 0xb7, 0xaf, 0x5f, 0x2f, 0xbd, 0x8d, 0x43, 0x52, 0x1c, 0xbc, 0x13, 0x4a, 0x46,
	0x18, 0xc0, 0x87, 0x51, 0x14, 0x91, 0x0d, 0xc2, 0x60, 0x9c, 0x44, 0xa1, 0x92, 0x3d, 0x68, 0xd1,
	0x7b, 0x31, 0x0f, 0x8b, 0x32, 0xac, 0x56, 0xf9, 0x7f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x27,
	0x80, 0x64, 0x35, 0x31, 0x01, 0x00, 0x00,
}
