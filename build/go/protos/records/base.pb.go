// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/base.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Returned for read requests
type ReadRecord struct {
	// Unique id automatically created by plumber
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Identifies which plumber instance received the event
	PlumberId string `protobuf:"bytes,2,opt,name=plumber_id,json=plumberId,proto3" json:"plumber_id,omitempty"`
	// Set _outside_ the backend; will contain the final value, regardless of
	// whether decoding options were specified for a read.
	XDecoded         []byte            `protobuf:"bytes,3,opt,name=_decoded,json=Decoded,proto3" json:"_decoded,omitempty"`
	Metadata         map[string][]byte `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnixTimestampUtc int64             `protobuf:"varint,99,opt,name=unix_timestamp_utc,json=unixTimestampUtc,proto3" json:"unix_timestamp_utc,omitempty"`
	// Types that are valid to be assigned to Record:
	//	*ReadRecord_Kafka
	Record               isReadRecord_Record `protobuf_oneof:"Record"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReadRecord) Reset()         { *m = ReadRecord{} }
func (m *ReadRecord) String() string { return proto.CompactTextString(m) }
func (*ReadRecord) ProtoMessage()    {}
func (*ReadRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd29fa8a30a39852, []int{0}
}

func (m *ReadRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRecord.Unmarshal(m, b)
}
func (m *ReadRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRecord.Marshal(b, m, deterministic)
}
func (m *ReadRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRecord.Merge(m, src)
}
func (m *ReadRecord) XXX_Size() int {
	return xxx_messageInfo_ReadRecord.Size(m)
}
func (m *ReadRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRecord proto.InternalMessageInfo

func (m *ReadRecord) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *ReadRecord) GetPlumberId() string {
	if m != nil {
		return m.PlumberId
	}
	return ""
}

func (m *ReadRecord) GetXDecoded() []byte {
	if m != nil {
		return m.XDecoded
	}
	return nil
}

func (m *ReadRecord) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ReadRecord) GetUnixTimestampUtc() int64 {
	if m != nil {
		return m.UnixTimestampUtc
	}
	return 0
}

type isReadRecord_Record interface {
	isReadRecord_Record()
}

type ReadRecord_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

func (*ReadRecord_Kafka) isReadRecord_Record() {}

func (m *ReadRecord) GetRecord() isReadRecord_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *ReadRecord) GetKafka() *Kafka {
	if x, ok := m.GetRecord().(*ReadRecord_Kafka); ok {
		return x.Kafka
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReadRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReadRecord_Kafka)(nil),
	}
}

// Used as an arg in write requests
type WriteRecord struct {
	// Set _outside_ the backend; will contain the final value that will be
	// written to the destination, regardless of whether encoding options were
	// specified for the write.
	XEncoded []byte `protobuf:"bytes,1,opt,name=_encoded,json=Encoded,proto3" json:"_encoded,omitempty"`
	// Types that are valid to be assigned to Records:
	//	*WriteRecord_Kafka
	Records              isWriteRecord_Records `protobuf_oneof:"Records"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *WriteRecord) Reset()         { *m = WriteRecord{} }
func (m *WriteRecord) String() string { return proto.CompactTextString(m) }
func (*WriteRecord) ProtoMessage()    {}
func (*WriteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd29fa8a30a39852, []int{1}
}

func (m *WriteRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRecord.Unmarshal(m, b)
}
func (m *WriteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRecord.Marshal(b, m, deterministic)
}
func (m *WriteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRecord.Merge(m, src)
}
func (m *WriteRecord) XXX_Size() int {
	return xxx_messageInfo_WriteRecord.Size(m)
}
func (m *WriteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRecord proto.InternalMessageInfo

func (m *WriteRecord) GetXEncoded() []byte {
	if m != nil {
		return m.XEncoded
	}
	return nil
}

type isWriteRecord_Records interface {
	isWriteRecord_Records()
}

type WriteRecord_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

func (*WriteRecord_Kafka) isWriteRecord_Records() {}

func (m *WriteRecord) GetRecords() isWriteRecord_Records {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *WriteRecord) GetKafka() *Kafka {
	if x, ok := m.GetRecords().(*WriteRecord_Kafka); ok {
		return x.Kafka
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WriteRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WriteRecord_Kafka)(nil),
	}
}

func init() {
	proto.RegisterType((*ReadRecord)(nil), "protos.records.ReadRecord")
	proto.RegisterMapType((map[string][]byte)(nil), "protos.records.ReadRecord.MetadataEntry")
	proto.RegisterType((*WriteRecord)(nil), "protos.records.WriteRecord")
}

func init() { proto.RegisterFile("records/base.proto", fileDescriptor_cd29fa8a30a39852) }

var fileDescriptor_cd29fa8a30a39852 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4b, 0xeb, 0x40,
	0x14, 0xc5, 0x5f, 0x9a, 0xd7, 0x7f, 0xb7, 0x7d, 0x8f, 0x32, 0x2a, 0xc4, 0x82, 0x10, 0xba, 0xca,
	0xc2, 0x26, 0x50, 0x37, 0xa2, 0xe2, 0xa2, 0xb4, 0x60, 0x11, 0x37, 0x83, 0x22, 0xb8, 0x09, 0x93,
	0x99, 0x6b, 0x1b, 0xda, 0x34, 0x61, 0x66, 0x22, 0xf6, 0x53, 0xfa, 0x95, 0x24, 0x99, 0xa9, 0x52,
	0x77, 0xae, 0x92, 0x33, 0xbf, 0x93, 0x3b, 0xe7, 0x9e, 0x00, 0x91, 0xc8, 0x73, 0x29, 0x54, 0x94,
	0x30, 0x85, 0x61, 0x21, 0x73, 0x9d, 0x93, 0xff, 0xf5, 0x43, 0x85, 0x16, 0x0d, 0x8f, 0xf6, 0x9e,
	0x35, 0x7b, 0x5d, 0x33, 0x63, 0x1a, 0x7d, 0x34, 0x00, 0x28, 0x32, 0x41, 0x6b, 0x46, 0xce, 0x00,
	0x32, 0x54, 0x8a, 0x2d, 0x31, 0x4e, 0x85, 0xe7, 0xf8, 0x4e, 0xd0, 0xa5, 0x5d, 0x7b, 0xb2, 0xa8,
	0x71, 0xb1, 0x29, 0xb3, 0x04, 0x65, 0x85, 0x1b, 0x06, 0xdb, 0x93, 0x85, 0x20, 0xa7, 0xd0, 0x89,
	0x05, 0xf2, 0x5c, 0xa0, 0xf0, 0x5c, 0xdf, 0x09, 0xfa, 0xb4, 0x3d, 0x33, 0x92, 0xcc, 0xa0, 0x93,
	0xa1, 0x66, 0x82, 0x69, 0xe6, 0xfd, 0xf5, 0xdd, 0xa0, 0x37, 0x09, 0xc2, 0xc3, 0x7c, 0xe1, 0x77,
	0x8c, 0xf0, 0xc1, 0x5a, 0xe7, 0x5b, 0x2d, 0x77, 0xf4, 0xeb, 0x4b, 0x72, 0x0e, 0xa4, 0xdc, 0xa6,
	0xef, 0xb1, 0x4e, 0x33, 0x54, 0x9a, 0x65, 0x45, 0x5c, 0x6a, 0xee, 0x71, 0xdf, 0x09, 0x5c, 0x3a,
	0xa8, 0xc8, 0xe3, 0x1e, 0x3c, 0x69, 0x4e, 0xc6, 0xd0, 0xac, 0x57, 0xf5, 0x84, 0xef, 0x04, 0xbd,
	0xc9, 0xc9, 0xcf, 0x0b, 0xef, 0x2b, 0x78, 0xf7, 0x87, 0x1a, 0xd7, 0xf0, 0x1a, 0xfe, 0x1d, 0xdc,
	0x4b, 0x06, 0xe0, 0xae, 0x71, 0x67, 0x5b, 0xa8, 0x5e, 0xc9, 0x31, 0x34, 0xdf, 0xd8, 0xa6, 0xc4,
	0x7a, 0xf5, 0x3e, 0x35, 0xe2, 0xaa, 0x71, 0xe9, 0x4c, 0x3b, 0xd0, 0x32, 0xd9, 0x47, 0x09, 0xf4,
	0x9e, 0x65, 0xaa, 0xd1, 0x36, 0x5a, 0x75, 0x82, 0x5b, 0xd3, 0x89, 0x63, 0x3a, 0x99, 0x1b, 0xf9,
	0xcb, 0x7c, 0xd3, 0x2e, 0xb4, 0xcd, 0x4c, 0x35, 0xbd, 0x7d, 0xb9, 0x59, 0xa6, 0x7a, 0x55, 0x26,
	0x21, 0xcf, 0xb3, 0x28, 0x61, 0x9a, 0xaf, 0x78, 0x2e, 0x8b, 0xc8, 0xfe, 0x8a, 0xb1, 0xe2, 0x2b,
	0xcc, 0x98, 0x8a, 0x92, 0x32, 0xdd, 0x88, 0x68, 0x99, 0x47, 0x66, 0x72, 0x64, 0x27, 0x27, 0xad,
	0x5a, 0x5f, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x2b, 0x9f, 0x8e, 0x37, 0x02, 0x00, 0x00,
}
