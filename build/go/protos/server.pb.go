// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerConfig struct {
	// Unique ID that identifies this plumber node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// host:port that the gRPC server will bind to
	GrpcListenAddress string `protobuf:"bytes,2,opt,name=grpc_listen_address,json=grpcListenAddress,proto3" json:"grpc_listen_address,omitempty"`
	// All gRPC requests will require this auth token to be set
	AuthToken string `protobuf:"bytes,3,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// InitialCluster should contain comma separated list of key=value pairs
	// of host:port entries for ALL peers in the cluster.
	// Example: server1=http://192.168.1.10:2380,server2=http://192.168.1.11:2380,server3=http://192.168.1.12:2380
	//
	// IMPORTANT: The list should include _this_ instance's address.
	InitialCluster string `protobuf:"bytes,4,opt,name=initial_cluster,json=initialCluster,proto3" json:"initial_cluster,omitempty"`
	// AdvertisePeerURL contains the address of _this_ plumber instance's etcd server interface
	// This is usually something like http://local-ip:2380
	AdvertisePeerUrl string `protobuf:"bytes,5,opt,name=advertise_peer_url,json=advertisePeerUrl,proto3" json:"advertise_peer_url,omitempty"`
	// AdvertisePeerURL contains the address of _this_ plumber instance's etcd client interface
	// This is usually something like http://local-ip:2379
	AdvertiseClientUrl string `protobuf:"bytes,6,opt,name=advertise_client_url,json=advertiseClientUrl,proto3" json:"advertise_client_url,omitempty"`
	// ListenerPeerURL contains the address that _this_ plumber instance's etcd server should listen on
	// This is usually something like http://local-ip:2380
	ListenerPeerUrl string `protobuf:"bytes,7,opt,name=listener_peer_url,json=listenerPeerUrl,proto3" json:"listener_peer_url,omitempty"`
	// ListenerClientURL contains the address that _this_ plumber instance's etcd client should listen on
	// This is usually something like http://local-ip:2379
	ListenerClientUrl string `protobuf:"bytes,8,opt,name=listener_client_url,json=listenerClientUrl,proto3" json:"listener_client_url,omitempty"`
	// PeerToken is the token that ALL cluster members should use/share. If this token
	// does not match on one of the plumber instances - it won't be able to join the cluster.
	PeerToken            string   `protobuf:"bytes,9,opt,name=peer_token,json=peerToken,proto3" json:"peer_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerConfig) Reset()         { *m = ServerConfig{} }
func (m *ServerConfig) String() string { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()    {}
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *ServerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerConfig.Unmarshal(m, b)
}
func (m *ServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerConfig.Marshal(b, m, deterministic)
}
func (m *ServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConfig.Merge(m, src)
}
func (m *ServerConfig) XXX_Size() int {
	return xxx_messageInfo_ServerConfig.Size(m)
}
func (m *ServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConfig proto.InternalMessageInfo

func (m *ServerConfig) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ServerConfig) GetGrpcListenAddress() string {
	if m != nil {
		return m.GrpcListenAddress
	}
	return ""
}

func (m *ServerConfig) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *ServerConfig) GetInitialCluster() string {
	if m != nil {
		return m.InitialCluster
	}
	return ""
}

func (m *ServerConfig) GetAdvertisePeerUrl() string {
	if m != nil {
		return m.AdvertisePeerUrl
	}
	return ""
}

func (m *ServerConfig) GetAdvertiseClientUrl() string {
	if m != nil {
		return m.AdvertiseClientUrl
	}
	return ""
}

func (m *ServerConfig) GetListenerPeerUrl() string {
	if m != nil {
		return m.ListenerPeerUrl
	}
	return ""
}

func (m *ServerConfig) GetListenerClientUrl() string {
	if m != nil {
		return m.ListenerClientUrl
	}
	return ""
}

func (m *ServerConfig) GetPeerToken() string {
	if m != nil {
		return m.PeerToken
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerConfig)(nil), "protos.ServerConfig")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcf, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0x69, 0xbf, 0xcf, 0xd6, 0x0e, 0xc5, 0xda, 0xad, 0x60, 0x2e, 0x05, 0xf1, 0xa2, 0x88,
	0x26, 0x82, 0xe2, 0x5d, 0x7b, 0x12, 0x3c, 0x88, 0x3f, 0x2e, 0x5e, 0x96, 0x64, 0x77, 0x4c, 0x16,
	0xb7, 0xd9, 0x30, 0xbb, 0xe9, 0x1f, 0xef, 0x49, 0x32, 0x6b, 0x1b, 0x4f, 0x21, 0xef, 0xf3, 0xe4,
	0x85, 0xbc, 0x03, 0x53, 0x8f, 0xb4, 0x41, 0x4a, 0x1b, 0x72, 0xc1, 0x89, 0x11, 0x3f, 0xfc, 0xe9,
	0xf7, 0x10, 0xa6, 0xaf, 0x0c, 0x56, 0xae, 0xfe, 0x34, 0xa5, 0x38, 0x86, 0x71, 0xed, 0x34, 0x4a,
	0xa3, 0x93, 0xc1, 0xc9, 0xe0, 0x7c, 0xf2, 0x32, 0xea, 0x5e, 0x1f, 0xb5, 0x48, 0x61, 0x51, 0x52,
	0xa3, 0xa4, 0x35, 0x3e, 0x60, 0x2d, 0x73, 0xad, 0x09, 0xbd, 0x4f, 0x86, 0x2c, 0xcd, 0x3b, 0xf4,
	0xc4, 0xe4, 0x3e, 0x02, 0xb1, 0x04, 0xc8, 0xdb, 0x50, 0xc9, 0xe0, 0xbe, 0xb0, 0x4e, 0xfe, 0xb1,
	0x36, 0xe9, 0x92, 0xb7, 0x2e, 0x10, 0x67, 0x30, 0x33, 0xb5, 0x09, 0x26, 0xb7, 0x52, 0xd9, 0xd6,
	0x07, 0xa4, 0xe4, 0x3f, 0x3b, 0x07, 0xbf, 0xf1, 0x2a, 0xa6, 0xe2, 0x12, 0x44, 0xae, 0x37, 0x48,
	0xc1, 0x78, 0x94, 0x0d, 0x22, 0xc9, 0x96, 0x6c, 0xb2, 0xc7, 0xee, 0xe1, 0x8e, 0x3c, 0x23, 0xd2,
	0x3b, 0x59, 0x71, 0x0d, 0x47, 0xbd, 0xad, 0xac, 0xc1, 0x3a, 0xb0, 0x3f, 0x62, 0xbf, 0x6f, 0x5a,
	0x31, 0xea, 0xbe, 0xb8, 0x80, 0x79, 0xfc, 0x25, 0xa4, 0xbe, 0x7e, 0xcc, 0xfa, 0x6c, 0x0b, 0xb6,
	0xed, 0x29, 0x2c, 0x76, 0xee, 0x9f, 0xf2, 0xfd, 0xb8, 0xc1, 0x16, 0xf5, 0xdd, 0x4b, 0x00, 0xae,
	0x8c, 0x1b, 0x4c, 0xe2, 0x06, 0x5d, 0xc2, 0x1b, 0x3c, 0xdc, 0x7d, 0xdc, 0x96, 0x26, 0x54, 0x6d,
	0x91, 0x2a, 0xb7, 0xce, 0x8a, 0x3c, 0xa8, 0x4a, 0x39, 0x6a, 0xb2, 0xc6, 0xb6, 0xeb, 0x02, 0xe9,
	0xca, 0xab, 0x0a, 0xd7, 0xb9, 0xcf, 0x8a, 0xd6, 0x58, 0x9d, 0x95, 0x2e, 0x8b, 0x47, 0x2b, 0xe2,
	0xf1, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xd2, 0x3e, 0x19, 0xd3, 0x01, 0x00, 0x00,
}
