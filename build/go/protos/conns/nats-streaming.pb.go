// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nats-streaming.proto

package conns

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NatsStreaming struct {
	// Required
	// Full DNS to connect to NATS. Ex: tls://localhost:4222
	Dsn string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	// Specify to not verify server's TLS certificate
	InsecureTls bool `protobuf:"varint,2,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty"`
	// Optional
	TlsCaCert []byte `protobuf:"bytes,3,opt,name=tls_ca_cert,json=tlsCaCert,proto3" json:"tls_ca_cert,omitempty"`
	// Optional
	TlsClientCert []byte `protobuf:"bytes,4,opt,name=tls_client_cert,json=tlsClientCert,proto3" json:"tls_client_cert,omitempty"`
	// Optional
	TlsClientKey []byte `protobuf:"bytes,5,opt,name=tls_client_key,json=tlsClientKey,proto3" json:"tls_client_key,omitempty"`
	// Optional
	UserCredentials []byte `protobuf:"bytes,6,opt,name=user_credentials,json=userCredentials,proto3" json:"user_credentials,omitempty"`
	// Required
	ClusterId string `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required
	ClientId             string   `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsStreaming) Reset()         { *m = NatsStreaming{} }
func (m *NatsStreaming) String() string { return proto.CompactTextString(m) }
func (*NatsStreaming) ProtoMessage()    {}
func (*NatsStreaming) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee022785668eb1d, []int{0}
}

func (m *NatsStreaming) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsStreaming.Unmarshal(m, b)
}
func (m *NatsStreaming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsStreaming.Marshal(b, m, deterministic)
}
func (m *NatsStreaming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsStreaming.Merge(m, src)
}
func (m *NatsStreaming) XXX_Size() int {
	return xxx_messageInfo_NatsStreaming.Size(m)
}
func (m *NatsStreaming) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsStreaming.DiscardUnknown(m)
}

var xxx_messageInfo_NatsStreaming proto.InternalMessageInfo

func (m *NatsStreaming) GetDsn() string {
	if m != nil {
		return m.Dsn
	}
	return ""
}

func (m *NatsStreaming) GetInsecureTls() bool {
	if m != nil {
		return m.InsecureTls
	}
	return false
}

func (m *NatsStreaming) GetTlsCaCert() []byte {
	if m != nil {
		return m.TlsCaCert
	}
	return nil
}

func (m *NatsStreaming) GetTlsClientCert() []byte {
	if m != nil {
		return m.TlsClientCert
	}
	return nil
}

func (m *NatsStreaming) GetTlsClientKey() []byte {
	if m != nil {
		return m.TlsClientKey
	}
	return nil
}

func (m *NatsStreaming) GetUserCredentials() []byte {
	if m != nil {
		return m.UserCredentials
	}
	return nil
}

func (m *NatsStreaming) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NatsStreaming) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func init() {
	proto.RegisterType((*NatsStreaming)(nil), "protos.conns.NatsStreaming")
}

func init() { proto.RegisterFile("nats-streaming.proto", fileDescriptor_9ee022785668eb1d) }

var fileDescriptor_9ee022785668eb1d = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd0, 0x31, 0x4f, 0x02, 0x31,
	0x14, 0xc0, 0xf1, 0x1c, 0x28, 0x72, 0xe5, 0x10, 0xd2, 0x38, 0x34, 0x31, 0x1a, 0x34, 0xc6, 0xe0,
	0x00, 0x37, 0xb8, 0x19, 0x27, 0x99, 0x88, 0x89, 0x03, 0x3a, 0xb9, 0x5c, 0x7a, 0xed, 0x0b, 0x34,
	0xf6, 0x5a, 0xd2, 0xf7, 0x3a, 0xf0, 0x51, 0xfc, 0xb6, 0x86, 0x1e, 0xa8, 0xd3, 0x5d, 0xff, 0xef,
	0x97, 0x34, 0x7d, 0xec, 0xc2, 0x49, 0xc2, 0x19, 0x52, 0x00, 0xd9, 0x18, 0xb7, 0x9e, 0x6f, 0x83,
	0x27, 0xcf, 0x8b, 0xf4, 0xc1, 0xb9, 0xf2, 0xce, 0xe1, 0xed, 0x77, 0x87, 0x0d, 0xdf, 0x24, 0xe1,
	0xfb, 0x51, 0xf1, 0x31, 0xeb, 0x6a, 0x74, 0x22, 0x9b, 0x64, 0xd3, 0x7c, 0xb5, 0xff, 0xe5, 0x37,
	0xac, 0x30, 0x0e, 0x41, 0xc5, 0x00, 0x15, 0x59, 0x14, 0x9d, 0x49, 0x36, 0xed, 0xaf, 0x06, 0xc7,
	0xf6, 0x61, 0x91, 0x5f, 0xb3, 0x01, 0x59, 0xac, 0x94, 0xac, 0x14, 0x04, 0x12, 0xdd, 0x49, 0x36,
	0x2d, 0x56, 0x39, 0x59, 0x5c, 0xc8, 0x05, 0x04, 0xe2, 0xf7, 0x6c, 0x94, 0xe6, 0xd6, 0x80, 0xa3,
	0xd6, 0x9c, 0x24, 0x33, 0xdc, 0x9b, 0x54, 0x93, 0xbb, 0x63, 0xe7, 0xff, 0xdc, 0x17, 0xec, 0xc4,
	0x69, 0x62, 0xc5, 0x2f, 0x7b, 0x85, 0x1d, 0x7f, 0x60, 0xe3, 0x88, 0x10, 0x2a, 0x15, 0x40, 0x83,
	0x23, 0x23, 0x2d, 0x8a, 0x5e, 0x72, 0xa3, 0x7d, 0x5f, 0xfc, 0x65, 0x7e, 0xc5, 0x98, 0xb2, 0x11,
	0x09, 0x42, 0x65, 0xb4, 0x38, 0x4b, 0x8f, 0xca, 0x0f, 0x65, 0xa9, 0xf9, 0x25, 0xcb, 0x0f, 0x77,
	0x19, 0x2d, 0xfa, 0x69, 0xda, 0x6f, 0xc3, 0x52, 0xbf, 0x3c, 0x7f, 0x3e, 0xad, 0x0d, 0x6d, 0x62,
	0x3d, 0x57, 0xbe, 0x29, 0x6b, 0x49, 0x6a, 0xa3, 0x7c, 0xd8, 0x96, 0x5b, 0x1b, 0x9b, 0x1a, 0xc2,
	0x0c, 0xd5, 0x06, 0x1a, 0x89, 0x65, 0x1d, 0x8d, 0xd5, 0xe5, 0xda, 0x97, 0xed, 0x66, 0xcb, 0xb4,
	0xd9, 0xba, 0x97, 0x4e, 0x8f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x91, 0xdc, 0x59, 0x42, 0x86,
	0x01, 0x00, 0x00,
}
