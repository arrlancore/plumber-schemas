// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kafka.proto

package conns

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SASLType int32

const (
	SASLType_NONE  SASLType = 0
	SASLType_PLAIN SASLType = 1
	SASLType_SCRAM SASLType = 2
)

var SASLType_name = map[int32]string{
	0: "NONE",
	1: "PLAIN",
	2: "SCRAM",
}

var SASLType_value = map[string]int32{
	"NONE":  0,
	"PLAIN": 1,
	"SCRAM": 2,
}

func (x SASLType) String() string {
	return proto.EnumName(SASLType_name, int32(x))
}

func (SASLType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68928ed13de9fb92, []int{0}
}

type Kafka struct {
	// Required
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Optional; how long to attempt connecting for (default: 10s)
	TimeoutSeconds int32 `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Optional
	UseTls bool `protobuf:"varint,3,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// Optional
	InsecureTls bool `protobuf:"varint,4,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty"`
	// Optional
	SaslType SASLType `protobuf:"varint,5,opt,name=sasl_type,json=saslType,proto3,enum=protos.conns.SASLType" json:"sasl_type,omitempty"`
	// Required if sasl_type is not NONE
	SaslUsername string `protobuf:"bytes,6,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	// Required if sasl_type is not NONE
	SaslPassword         string   `protobuf:"bytes,7,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kafka) Reset()         { *m = Kafka{} }
func (m *Kafka) String() string { return proto.CompactTextString(m) }
func (*Kafka) ProtoMessage()    {}
func (*Kafka) Descriptor() ([]byte, []int) {
	return fileDescriptor_68928ed13de9fb92, []int{0}
}

func (m *Kafka) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kafka.Unmarshal(m, b)
}
func (m *Kafka) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kafka.Marshal(b, m, deterministic)
}
func (m *Kafka) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kafka.Merge(m, src)
}
func (m *Kafka) XXX_Size() int {
	return xxx_messageInfo_Kafka.Size(m)
}
func (m *Kafka) XXX_DiscardUnknown() {
	xxx_messageInfo_Kafka.DiscardUnknown(m)
}

var xxx_messageInfo_Kafka proto.InternalMessageInfo

func (m *Kafka) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Kafka) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *Kafka) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *Kafka) GetInsecureTls() bool {
	if m != nil {
		return m.InsecureTls
	}
	return false
}

func (m *Kafka) GetSaslType() SASLType {
	if m != nil {
		return m.SaslType
	}
	return SASLType_NONE
}

func (m *Kafka) GetSaslUsername() string {
	if m != nil {
		return m.SaslUsername
	}
	return ""
}

func (m *Kafka) GetSaslPassword() string {
	if m != nil {
		return m.SaslPassword
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.conns.SASLType", SASLType_name, SASLType_value)
	proto.RegisterType((*Kafka)(nil), "protos.conns.Kafka")
}

func init() { proto.RegisterFile("kafka.proto", fileDescriptor_68928ed13de9fb92) }

var fileDescriptor_68928ed13de9fb92 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x2d, 0x52, 0x28, 0x0b, 0x22, 0xd9, 0x83, 0xee, 0xb1, 0xea, 0xc1, 0x86, 0xc4, 0x36,
	0x91, 0x9b, 0xf1, 0x82, 0xc6, 0x83, 0x11, 0x91, 0xb4, 0x78, 0xf1, 0x42, 0xb6, 0xdb, 0x11, 0x1a,
	0xda, 0x6e, 0xb3, 0xb3, 0x1b, 0xc3, 0x03, 0xf8, 0xde, 0xa6, 0x85, 0xaa, 0xa7, 0x9d, 0xf9, 0xfe,
	0x6f, 0x27, 0x33, 0xa4, 0xbf, 0xe5, 0x9f, 0x5b, 0xee, 0x97, 0x4a, 0x6a, 0x49, 0x07, 0xf5, 0x83,
	0xbe, 0x90, 0x45, 0x81, 0x97, 0xdf, 0x2d, 0x62, 0xbf, 0x54, 0x29, 0x65, 0xa4, 0xcb, 0x93, 0x44,
	0x01, 0x22, 0xb3, 0x5c, 0xcb, 0xeb, 0x85, 0x4d, 0x4b, 0xaf, 0xc9, 0xa9, 0x4e, 0x73, 0x90, 0x46,
	0xaf, 0x10, 0x84, 0x2c, 0x12, 0x64, 0x2d, 0xd7, 0xf2, 0xec, 0x70, 0x78, 0xc0, 0xd1, 0x9e, 0xd2,
	0x73, 0xd2, 0x35, 0x08, 0x2b, 0x9d, 0x21, 0x3b, 0x76, 0x2d, 0xcf, 0x09, 0x3b, 0x06, 0x61, 0x99,
	0x21, 0xbd, 0x20, 0x83, 0xb4, 0x40, 0x10, 0x46, 0xed, 0xd3, 0x76, 0x9d, 0xf6, 0x1b, 0x56, 0x29,
	0x13, 0xd2, 0x43, 0x8e, 0xd9, 0x4a, 0xef, 0x4a, 0x60, 0xb6, 0x6b, 0x79, 0xc3, 0xdb, 0x33, 0xff,
	0xff, 0xaa, 0x7e, 0x34, 0x8d, 0x66, 0xcb, 0x5d, 0x09, 0xa1, 0x53, 0x89, 0x55, 0x45, 0xaf, 0xc8,
	0x49, 0xfd, 0xc9, 0x20, 0xa8, 0x82, 0xe7, 0xc0, 0x3a, 0xf5, 0xe6, 0x83, 0x0a, 0xbe, 0x1f, 0xd8,
	0xaf, 0x54, 0x72, 0xc4, 0x2f, 0xa9, 0x12, 0xd6, 0xfd, 0x93, 0x16, 0x07, 0x36, 0x1e, 0x13, 0xa7,
	0x99, 0x4f, 0x1d, 0xd2, 0x9e, 0xbf, 0xcd, 0x9f, 0x46, 0x47, 0xb4, 0x47, 0xec, 0xc5, 0x6c, 0xfa,
	0x3c, 0x1f, 0x59, 0x55, 0x19, 0x3d, 0x86, 0xd3, 0xd7, 0x51, 0xeb, 0xe1, 0xfe, 0xe3, 0x6e, 0x9d,
	0xea, 0x8d, 0x89, 0x7d, 0x21, 0xf3, 0x20, 0xe6, 0x5a, 0x6c, 0x84, 0x54, 0x65, 0x50, 0x66, 0x26,
	0x8f, 0x41, 0xdd, 0xa0, 0xd8, 0x40, 0xce, 0x31, 0x88, 0x4d, 0x9a, 0x25, 0xc1, 0x5a, 0x06, 0xfb,
	0x33, 0x82, 0xfa, 0x8c, 0xb8, 0x53, 0x77, 0x93, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0x59,
	0x95, 0xf8, 0x95, 0x01, 0x00, 0x00,
}
