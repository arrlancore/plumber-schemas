// Code generated by protoc-gen-go. DO NOT EDIT.
// source: write.proto

package protos

import (
	fmt "fmt"
	common "github.com/batchcorp/plumber-schemas/build/go/protos/common"
	encoding "github.com/batchcorp/plumber-schemas/build/go/protos/encoding"
	opts "github.com/batchcorp/plumber-schemas/build/go/protos/opts"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WriteInputType int32

const (
	WriteInputType_WRITE_INPUT_TYPE_UNSET  WriteInputType = 0
	WriteInputType_WRITE_INPUT_TYPE_PLAIN  WriteInputType = 1
	WriteInputType_WRITE_INPUT_TYPE_JSONPB WriteInputType = 2
	WriteInputType_WRITE_INPUT_TYPE_AVRO   WriteInputType = 3
)

var WriteInputType_name = map[int32]string{
	0: "WRITE_INPUT_TYPE_UNSET",
	1: "WRITE_INPUT_TYPE_PLAIN",
	2: "WRITE_INPUT_TYPE_JSONPB",
	3: "WRITE_INPUT_TYPE_AVRO",
}

var WriteInputType_value = map[string]int32{
	"WRITE_INPUT_TYPE_UNSET":  0,
	"WRITE_INPUT_TYPE_PLAIN":  1,
	"WRITE_INPUT_TYPE_JSONPB": 2,
	"WRITE_INPUT_TYPE_AVRO":   3,
}

func (x WriteInputType) String() string {
	return proto.EnumName(WriteInputType_name, int32(x))
}

func (WriteInputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67966b2b12a73214, []int{0}
}

type WriteCLIConfig struct {
	// @gotags: kong:"help='Write data from input file',existingfile,xor=input"
	InputFile string `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty" kong:"help='Write data from input file',existingfile,xor=input"`
	// @gotags: kong="help='Treat input as JSON array - each array element will be written as a separate message'"
	InputAsJsonArray bool `protobuf:"varint,2,opt,name=input_as_json_array,json=inputAsJsonArray,proto3" json:"input_as_json_array,omitempty"`
	// TODO: Update kong to be able to use proto/smart enums
	// @gotags: kong:"help='Input type (1: Plain, 2: JSONPB, 3: Avro)',default=1"
	InputType            WriteInputType `protobuf:"varint,3,opt,name=input_type,json=inputType,proto3,enum=protos.WriteInputType" json:"input_type,omitempty" kong:"help='Input type (1: Plain, 2: JSONPB, 3: Avro)',default=1"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WriteCLIConfig) Reset()         { *m = WriteCLIConfig{} }
func (m *WriteCLIConfig) String() string { return proto.CompactTextString(m) }
func (*WriteCLIConfig) ProtoMessage()    {}
func (*WriteCLIConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_67966b2b12a73214, []int{0}
}

func (m *WriteCLIConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteCLIConfig.Unmarshal(m, b)
}
func (m *WriteCLIConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteCLIConfig.Marshal(b, m, deterministic)
}
func (m *WriteCLIConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteCLIConfig.Merge(m, src)
}
func (m *WriteCLIConfig) XXX_Size() int {
	return xxx_messageInfo_WriteCLIConfig.Size(m)
}
func (m *WriteCLIConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteCLIConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WriteCLIConfig proto.InternalMessageInfo

func (m *WriteCLIConfig) GetInputFile() string {
	if m != nil {
		return m.InputFile
	}
	return ""
}

func (m *WriteCLIConfig) GetInputAsJsonArray() bool {
	if m != nil {
		return m.InputAsJsonArray
	}
	return false
}

func (m *WriteCLIConfig) GetInputType() WriteInputType {
	if m != nil {
		return m.InputType
	}
	return WriteInputType_WRITE_INPUT_TYPE_UNSET
}

// WriteConfig is used by both CLI and server to facilitate a write request.
// It is the responsibility of the handler (CLI or server) to read EncodeOptions,
// CLI config, etc. and update the *WriteOpts accordingly. Ie. If CLI passes
// a file, the CLI handler should read the file and set it in *WriteOpts.WriteRecord.
type WriteConfig struct {
	// Required for desktop; ignored in CLI.
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// Specifying encoding options will cause the _value_ of the record to get
	// encoded and set in WriteRecord.encoded.
	// @gotags: kong:"embed,group=encode"
	EncodeOptions *encoding.EncodeOptions `protobuf:"bytes,2,opt,name=encode_options,json=encodeOptions,proto3" json:"encode_options,omitempty" kong:"embed,group=encode"`
	// This will be passed directly to the backend to perform the write.
	// The opts must include the actual payload that should be written, any
	// backend & write-specific opts. Desktop can omit conn - it will be
	// auto-filled out in CLI mode.
	// @gotags: kong:"embed"
	WriteOpts *opts.Write `protobuf:"bytes,3,opt,name=write_opts,json=writeOpts,proto3" json:"write_opts,omitempty" kong:"embed"`
	// Optional; CLI-specific and non-backend-specific options
	// @gotags: kong:"embed"
	XCliConfig           *WriteCLIConfig `protobuf:"bytes,4,opt,name=_cli_config,json=CliConfig,proto3" json:"_cli_config,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WriteConfig) Reset()         { *m = WriteConfig{} }
func (m *WriteConfig) String() string { return proto.CompactTextString(m) }
func (*WriteConfig) ProtoMessage()    {}
func (*WriteConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_67966b2b12a73214, []int{1}
}

func (m *WriteConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteConfig.Unmarshal(m, b)
}
func (m *WriteConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteConfig.Marshal(b, m, deterministic)
}
func (m *WriteConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteConfig.Merge(m, src)
}
func (m *WriteConfig) XXX_Size() int {
	return xxx_messageInfo_WriteConfig.Size(m)
}
func (m *WriteConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WriteConfig proto.InternalMessageInfo

func (m *WriteConfig) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *WriteConfig) GetEncodeOptions() *encoding.EncodeOptions {
	if m != nil {
		return m.EncodeOptions
	}
	return nil
}

func (m *WriteConfig) GetWriteOpts() *opts.Write {
	if m != nil {
		return m.WriteOpts
	}
	return nil
}

func (m *WriteConfig) GetXCliConfig() *WriteCLIConfig {
	if m != nil {
		return m.XCliConfig
	}
	return nil
}

type WriteRequest struct {
	// Every gRPC request must have a valid auth config
	Auth                 *common.Auth `protobuf:"bytes,9999,opt,name=auth,proto3" json:"auth,omitempty"`
	Config               *WriteConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67966b2b12a73214, []int{2}
}

func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRequest.Unmarshal(m, b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
}
func (m *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(m, src)
}
func (m *WriteRequest) XXX_Size() int {
	return xxx_messageInfo_WriteRequest.Size(m)
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetAuth() *common.Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *WriteRequest) GetConfig() *WriteConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type WriteResponse struct {
	Status               *common.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WriteResponse) Reset()         { *m = WriteResponse{} }
func (m *WriteResponse) String() string { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()    {}
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67966b2b12a73214, []int{3}
}

func (m *WriteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteResponse.Unmarshal(m, b)
}
func (m *WriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteResponse.Marshal(b, m, deterministic)
}
func (m *WriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteResponse.Merge(m, src)
}
func (m *WriteResponse) XXX_Size() int {
	return xxx_messageInfo_WriteResponse.Size(m)
}
func (m *WriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteResponse proto.InternalMessageInfo

func (m *WriteResponse) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterEnum("protos.WriteInputType", WriteInputType_name, WriteInputType_value)
	proto.RegisterType((*WriteCLIConfig)(nil), "protos.WriteCLIConfig")
	proto.RegisterType((*WriteConfig)(nil), "protos.WriteConfig")
	proto.RegisterType((*WriteRequest)(nil), "protos.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "protos.WriteResponse")
}

func init() { proto.RegisterFile("write.proto", fileDescriptor_67966b2b12a73214) }

var fileDescriptor_67966b2b12a73214 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x6e, 0xd3, 0x3c,
	0x18, 0xfd, 0xb3, 0x4d, 0xfd, 0xa9, 0xbb, 0x56, 0xc1, 0xd5, 0x4a, 0x28, 0x02, 0x55, 0xe5, 0xa6,
	0x02, 0xad, 0x11, 0x05, 0x76, 0x8b, 0xb2, 0x2a, 0x48, 0x99, 0xa6, 0xb4, 0x72, 0x33, 0x26, 0xb8,
	0xb1, 0x92, 0xd4, 0x6b, 0x8c, 0x52, 0xdb, 0xc4, 0x8e, 0x50, 0xef, 0x78, 0x03, 0xae, 0x78, 0x43,
	0x2e, 0x78, 0x0c, 0x14, 0x3b, 0x19, 0x1d, 0xe3, 0x2a, 0xf6, 0x77, 0x8e, 0xcf, 0x39, 0xdf, 0x67,
	0x07, 0x74, 0xbe, 0x16, 0x54, 0x91, 0xa9, 0x28, 0xb8, 0xe2, 0xb0, 0xa5, 0x3f, 0x72, 0xf8, 0x30,
	0xe5, 0xdb, 0x2d, 0x67, 0x6e, 0x5c, 0xaa, 0xcc, 0x40, 0xc3, 0x7e, 0x5d, 0x92, 0x2a, 0x56, 0xa5,
	0xac, 0x8b, 0x03, 0xc2, 0x52, 0xbe, 0xa6, 0x6c, 0xe3, 0x72, 0xa1, 0x28, 0x67, 0x4d, 0xdd, 0xe6,
	0x42, 0x49, 0x77, 0x4f, 0x79, 0xfc, 0xc3, 0x02, 0xbd, 0xeb, 0x6a, 0x3f, 0xbf, 0x0c, 0xe6, 0x9c,
	0xdd, 0xd0, 0x0d, 0x7c, 0x0a, 0x00, 0x65, 0xa2, 0x54, 0xf8, 0x86, 0xe6, 0xc4, 0xb1, 0x46, 0xd6,
	0xa4, 0x8d, 0xda, 0xba, 0xf2, 0x9e, 0xe6, 0x04, 0x9e, 0x82, 0xbe, 0x81, 0x63, 0x89, 0x3f, 0x4b,
	0xce, 0x70, 0x5c, 0x14, 0xf1, 0xce, 0x39, 0x18, 0x59, 0x93, 0x07, 0xc8, 0xd6, 0x90, 0x27, 0x2f,
	0x24, 0x67, 0x5e, 0x55, 0x87, 0x6f, 0x1b, 0x35, 0xb5, 0x13, 0xc4, 0x39, 0x1c, 0x59, 0x93, 0xde,
	0x6c, 0x60, 0xcc, 0xe5, 0x54, 0x3b, 0x07, 0x15, 0x1c, 0xed, 0x04, 0xa9, 0x5d, 0xaa, 0xe5, 0xf8,
	0xa7, 0x05, 0x3a, 0x26, 0x97, 0x09, 0xf5, 0x1c, 0x74, 0x53, 0xce, 0x18, 0x49, 0xab, 0x76, 0x30,
	0x5d, 0xd7, 0xb9, 0x8e, 0xff, 0x14, 0x83, 0x35, 0xf4, 0x41, 0x4f, 0x37, 0x4e, 0x70, 0xdd, 0xb6,
	0x4e, 0xd5, 0x99, 0x3d, 0x6b, 0xfc, 0x9a, 0xb1, 0x4c, 0x7d, 0x4d, 0x5b, 0x18, 0x16, 0xea, 0x92,
	0xfd, 0x2d, 0x7c, 0x05, 0x80, 0x1e, 0x51, 0xa5, 0x22, 0x75, 0xe4, 0xce, 0x0c, 0x36, 0x12, 0x55,
	0xcd, 0xe4, 0x46, 0x6d, 0xcd, 0x5a, 0x08, 0x25, 0xe1, 0x19, 0xe8, 0xe0, 0x34, 0xa7, 0x38, 0xd5,
	0x69, 0x9d, 0x23, 0x7d, 0xe6, 0x6e, 0x9b, 0xb7, 0x03, 0x46, 0xed, 0x79, 0x4e, 0xcd, 0x72, 0x4c,
	0xc0, 0xb1, 0xd1, 0x22, 0x5f, 0x4a, 0x22, 0x15, 0x9c, 0x80, 0xa3, 0xea, 0x6e, 0x9d, 0xef, 0xa1,
	0x56, 0xe8, 0x37, 0x0a, 0xe6, 0x92, 0xa7, 0x5e, 0xa9, 0x32, 0xa4, 0x19, 0xf0, 0x25, 0x68, 0xd5,
	0x66, 0xd6, 0x5d, 0xea, 0xde, 0xd4, 0x50, 0x4d, 0x19, 0xbf, 0x03, 0xdd, 0xda, 0x46, 0x0a, 0xce,
	0x24, 0x81, 0x53, 0xd0, 0x32, 0x0f, 0xc6, 0xf9, 0xf5, 0xbf, 0x3e, 0x7e, 0xf2, 0x97, 0xd3, 0x4a,
	0xa3, 0xa8, 0x66, 0xbd, 0xf8, 0xd6, 0x3c, 0x93, 0xdb, 0xcb, 0x82, 0x43, 0x30, 0xb8, 0x46, 0x41,
	0xe4, 0xe3, 0x20, 0x5c, 0x5e, 0x45, 0x38, 0xfa, 0xb8, 0xf4, 0xf1, 0x55, 0xb8, 0xf2, 0x23, 0xfb,
	0xbf, 0x7f, 0x62, 0xcb, 0x4b, 0x2f, 0x08, 0x6d, 0x0b, 0x3e, 0x01, 0x8f, 0xee, 0x61, 0x17, 0xab,
	0x45, 0xb8, 0x3c, 0xb7, 0x0f, 0xe0, 0x63, 0x70, 0x72, 0x0f, 0xf4, 0x3e, 0xa0, 0x85, 0x7d, 0x78,
	0x7e, 0xf6, 0xe9, 0xcd, 0x86, 0xaa, 0xac, 0x4c, 0xaa, 0x88, 0x6e, 0x12, 0xab, 0x34, 0x4b, 0x79,
	0x21, 0x5c, 0x91, 0x97, 0xdb, 0x84, 0x14, 0xa7, 0x32, 0xcd, 0xc8, 0x36, 0x96, 0x6e, 0x52, 0xd2,
	0x7c, 0xed, 0x6e, 0xb8, 0x6b, 0x1a, 0x4a, 0xcc, 0xbf, 0xf3, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0xc8, 0xcd, 0xa2, 0x51, 0x03, 0x00, 0x00,
}
