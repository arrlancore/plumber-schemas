// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_nats_streaming.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NatsStreamingConn struct {
	// @gotags: kong:"help='Dial string for NATS server. Ex: nats://localhost:4222',default='nats://localhost:4222'"
	Dsn string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty" kong:"help='Dial string for NATS server. Ex: nats://localhost:4222',default='nats://localhost:4222'"`
	// @gotags: kong:"help='Whether to verify server certificate'"
	InsecureTls bool `protobuf:"varint,2,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty" kong:"help='Whether to verify server certificate'"`
	// @gotags: kong:"help='CA file (only needed if addr is tls://)*',type=existingfile"
	TlsCaCert []byte `protobuf:"bytes,3,opt,name=tls_ca_cert,json=tlsCaCert,proto3" json:"tls_ca_cert,omitempty" kong:"help='CA file (only needed if addr is tls://)*',type=existingfile"`
	// @gotags: kong:"help='Cient cert file (only needed if addr is tls://*)',type=existingfile"
	TlsClientCert []byte `protobuf:"bytes,4,opt,name=tls_client_cert,json=tlsClientCert,proto3" json:"tls_client_cert,omitempty" kong:"help='Cient cert file (only needed if addr is tls://*)',type=existingfile"`
	// @gotags: kong:"help='Client key file (only needed if addr is tls://*)',type=existingfile"
	TlsClientKey []byte `protobuf:"bytes,5,opt,name=tls_client_key,json=tlsClientKey,proto3" json:"tls_client_key,omitempty" kong:"help='Client key file (only needed if addr is tls://*)',type=existingfile"`
	// @gotags: kong:"help='NATS .creds file containing authentication credentials'"
	UserCredentials []byte `protobuf:"bytes,6,opt,name=user_credentials,json=userCredentials,proto3" json:"user_credentials,omitempty" kong:"help='NATS .creds file containing authentication credentials'"`
	// @gotags: kong:"help='Cluster ID of the Nats server',required"
	ClusterId string `protobuf:"bytes,7,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" kong:"help='Cluster ID of the Nats server',required"`
	// @gotags: kong:"help='User specified client ID to connect with',default=plumber"
	ClientId             string   `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" kong:"help='User specified client ID to connect with',default=plumber"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsStreamingConn) Reset()         { *m = NatsStreamingConn{} }
func (m *NatsStreamingConn) String() string { return proto.CompactTextString(m) }
func (*NatsStreamingConn) ProtoMessage()    {}
func (*NatsStreamingConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc025e0cb724b14, []int{0}
}

func (m *NatsStreamingConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsStreamingConn.Unmarshal(m, b)
}
func (m *NatsStreamingConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsStreamingConn.Marshal(b, m, deterministic)
}
func (m *NatsStreamingConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsStreamingConn.Merge(m, src)
}
func (m *NatsStreamingConn) XXX_Size() int {
	return xxx_messageInfo_NatsStreamingConn.Size(m)
}
func (m *NatsStreamingConn) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsStreamingConn.DiscardUnknown(m)
}

var xxx_messageInfo_NatsStreamingConn proto.InternalMessageInfo

func (m *NatsStreamingConn) GetDsn() string {
	if m != nil {
		return m.Dsn
	}
	return ""
}

func (m *NatsStreamingConn) GetInsecureTls() bool {
	if m != nil {
		return m.InsecureTls
	}
	return false
}

func (m *NatsStreamingConn) GetTlsCaCert() []byte {
	if m != nil {
		return m.TlsCaCert
	}
	return nil
}

func (m *NatsStreamingConn) GetTlsClientCert() []byte {
	if m != nil {
		return m.TlsClientCert
	}
	return nil
}

func (m *NatsStreamingConn) GetTlsClientKey() []byte {
	if m != nil {
		return m.TlsClientKey
	}
	return nil
}

func (m *NatsStreamingConn) GetUserCredentials() []byte {
	if m != nil {
		return m.UserCredentials
	}
	return nil
}

func (m *NatsStreamingConn) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NatsStreamingConn) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type NatsStreamingReadArgs struct {
	// @gotags: kong:"help='NATS stream channel. Ex: orders'"
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty" kong:"help='NATS stream channel. Ex: orders'"`
	// @gotags: kong:"help='Create a durable subscription with this name for the given channel'"
	DurableName string `protobuf:"bytes,2,opt,name=durable_name,json=durableName,proto3" json:"durable_name,omitempty" kong:"help='Create a durable subscription with this name for the given channel'"`
	// @gotags: kong:"help='Deliver starting with last published message',xor=nats_delivery_option"
	ReadLastAvailable bool `protobuf:"varint,3,opt,name=read_last_available,json=readLastAvailable,proto3" json:"read_last_available,omitempty" kong:"help='Deliver starting with last published message',xor=nats_delivery_option"`
	// @gotags: kong:"help='Deliver messages starting at sequence number',xor=nats_delivery_option"
	ReadSequenceNumber uint32 `protobuf:"varint,4,opt,name=read_sequence_number,json=readSequenceNumber,proto3" json:"read_sequence_number,omitempty" kong:"help='Deliver messages starting at sequence number',xor=nats_delivery_option"`
	// @gotags: kong:"help='Deliver messages in last interval (e.g. 1s, 1h)',xor=nats_delivery_option"
	ReadSince string `protobuf:"bytes,5,opt,name=read_since,json=readSince,proto3" json:"read_since,omitempty" kong:"help='Deliver messages in last interval (e.g. 1s, 1h)',xor=nats_delivery_option"`
	// @gotags: kong:"help='Deliver all available messages',xor=nats_delivery_option"
	ReadAll              bool     `protobuf:"varint,6,opt,name=read_all,json=readAll,proto3" json:"read_all,omitempty" kong:"help='Deliver all available messages',xor=nats_delivery_option"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsStreamingReadArgs) Reset()         { *m = NatsStreamingReadArgs{} }
func (m *NatsStreamingReadArgs) String() string { return proto.CompactTextString(m) }
func (*NatsStreamingReadArgs) ProtoMessage()    {}
func (*NatsStreamingReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc025e0cb724b14, []int{1}
}

func (m *NatsStreamingReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsStreamingReadArgs.Unmarshal(m, b)
}
func (m *NatsStreamingReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsStreamingReadArgs.Marshal(b, m, deterministic)
}
func (m *NatsStreamingReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsStreamingReadArgs.Merge(m, src)
}
func (m *NatsStreamingReadArgs) XXX_Size() int {
	return xxx_messageInfo_NatsStreamingReadArgs.Size(m)
}
func (m *NatsStreamingReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsStreamingReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_NatsStreamingReadArgs proto.InternalMessageInfo

func (m *NatsStreamingReadArgs) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *NatsStreamingReadArgs) GetDurableName() string {
	if m != nil {
		return m.DurableName
	}
	return ""
}

func (m *NatsStreamingReadArgs) GetReadLastAvailable() bool {
	if m != nil {
		return m.ReadLastAvailable
	}
	return false
}

func (m *NatsStreamingReadArgs) GetReadSequenceNumber() uint32 {
	if m != nil {
		return m.ReadSequenceNumber
	}
	return 0
}

func (m *NatsStreamingReadArgs) GetReadSince() string {
	if m != nil {
		return m.ReadSince
	}
	return ""
}

func (m *NatsStreamingReadArgs) GetReadAll() bool {
	if m != nil {
		return m.ReadAll
	}
	return false
}

type NatsStreamingWriteArgs struct {
	// @gotags: kong:"help='NATS stream channel. Ex: orders'"
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty" kong:"help='NATS stream channel. Ex: orders'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatsStreamingWriteArgs) Reset()         { *m = NatsStreamingWriteArgs{} }
func (m *NatsStreamingWriteArgs) String() string { return proto.CompactTextString(m) }
func (*NatsStreamingWriteArgs) ProtoMessage()    {}
func (*NatsStreamingWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc025e0cb724b14, []int{2}
}

func (m *NatsStreamingWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NatsStreamingWriteArgs.Unmarshal(m, b)
}
func (m *NatsStreamingWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NatsStreamingWriteArgs.Marshal(b, m, deterministic)
}
func (m *NatsStreamingWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatsStreamingWriteArgs.Merge(m, src)
}
func (m *NatsStreamingWriteArgs) XXX_Size() int {
	return xxx_messageInfo_NatsStreamingWriteArgs.Size(m)
}
func (m *NatsStreamingWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_NatsStreamingWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_NatsStreamingWriteArgs proto.InternalMessageInfo

func (m *NatsStreamingWriteArgs) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func init() {
	proto.RegisterType((*NatsStreamingConn)(nil), "protos.args.NatsStreamingConn")
	proto.RegisterType((*NatsStreamingReadArgs)(nil), "protos.args.NatsStreamingReadArgs")
	proto.RegisterType((*NatsStreamingWriteArgs)(nil), "protos.args.NatsStreamingWriteArgs")
}

func init() { proto.RegisterFile("ps_args_nats_streaming.proto", fileDescriptor_5bc025e0cb724b14) }

var fileDescriptor_5bc025e0cb724b14 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x86, 0xd5, 0x5d, 0xd8, 0x26, 0x6e, 0x97, 0xdd, 0x35, 0x1f, 0x0a, 0xe2, 0x43, 0xa5, 0x42,
	0xa8, 0x1c, 0x68, 0x10, 0x9c, 0x10, 0xa7, 0xd2, 0xd3, 0x0a, 0xd4, 0x43, 0x16, 0x09, 0x89, 0x8b,
	0x35, 0xb1, 0x47, 0xa9, 0x85, 0xe3, 0x14, 0x8f, 0x83, 0xb4, 0x3f, 0x86, 0xff, 0xc8, 0x4f, 0x40,
	0x9e, 0xa6, 0xc0, 0x5e, 0x38, 0x25, 0xf3, 0x3e, 0x4f, 0x14, 0xcf, 0x2b, 0x8b, 0xc7, 0x3b, 0x52,
	0x10, 0x1a, 0x52, 0x1e, 0x22, 0x29, 0x8a, 0x01, 0xa1, 0xb5, 0xbe, 0x59, 0xee, 0x42, 0x17, 0x3b,
	0x39, 0xe1, 0x07, 0x2d, 0x93, 0x31, 0xff, 0x79, 0x24, 0x2e, 0x36, 0x10, 0xe9, 0xea, 0x20, 0xad,
	0x3b, 0xef, 0xe5, 0xb9, 0x38, 0x36, 0xe4, 0x8b, 0xd1, 0x6c, 0xb4, 0xc8, 0xab, 0xf4, 0x2a, 0x9f,
	0x89, 0xa9, 0xf5, 0x84, 0xba, 0x0f, 0xa8, 0xa2, 0xa3, 0xe2, 0x68, 0x36, 0x5a, 0x64, 0xd5, 0xe4,
	0x90, 0x7d, 0x76, 0x24, 0x9f, 0x8a, 0x49, 0x74, 0xa4, 0x34, 0x28, 0x8d, 0x21, 0x16, 0xc7, 0xb3,
	0xd1, 0x62, 0x5a, 0xe5, 0xd1, 0xd1, 0x1a, 0xd6, 0x18, 0xa2, 0x7c, 0x21, 0xce, 0x98, 0x3b, 0x8b,
	0x3e, 0xee, 0x9d, 0x5b, 0xec, 0x9c, 0x26, 0x87, 0x53, 0xf6, 0x9e, 0x8b, 0x3b, 0xff, 0x78, 0xdf,
	0xf0, 0xba, 0xb8, 0xcd, 0xda, 0xf4, 0x8f, 0xf6, 0x11, 0xaf, 0xe5, 0x4b, 0x71, 0xde, 0x13, 0x06,
	0xa5, 0x03, 0x1a, 0xf4, 0xd1, 0x82, 0xa3, 0xe2, 0x84, 0xbd, 0xb3, 0x94, 0xaf, 0xff, 0xc6, 0xf2,
	0x89, 0x10, 0xda, 0xf5, 0x14, 0x31, 0x28, 0x6b, 0x8a, 0x31, 0x2f, 0x95, 0x0f, 0xc9, 0xa5, 0x91,
	0x8f, 0x44, 0x3e, 0xfc, 0xcb, 0x9a, 0x22, 0x63, 0x9a, 0xed, 0x83, 0x4b, 0x33, 0xff, 0x35, 0x12,
	0xf7, 0x6f, 0xf4, 0x53, 0x21, 0x98, 0x55, 0x68, 0x48, 0x16, 0x62, 0xac, 0xb7, 0xe0, 0x3d, 0xba,
	0xa1, 0xa7, 0xc3, 0x98, 0xba, 0x32, 0x7d, 0x80, 0xda, 0xa1, 0xf2, 0xd0, 0x22, 0x77, 0x95, 0x57,
	0x93, 0x21, 0xdb, 0x40, 0x8b, 0x72, 0x29, 0xee, 0x06, 0x04, 0xa3, 0x1c, 0x50, 0x54, 0xf0, 0x03,
	0xac, 0x4b, 0x88, 0x3b, 0xcb, 0xaa, 0x8b, 0x84, 0x3e, 0x01, 0xc5, 0xd5, 0x01, 0xc8, 0xd7, 0xe2,
	0x1e, 0xfb, 0x84, 0xdf, 0x7b, 0xf4, 0x1a, 0x95, 0xef, 0xdb, 0x1a, 0x03, 0x17, 0x78, 0x5a, 0xc9,
	0xc4, 0xae, 0x06, 0xb4, 0x61, 0x92, 0x96, 0xde, 0x7f, 0x61, 0xbd, 0x46, 0x6e, 0x30, 0xaf, 0x72,
	0xf6, 0x52, 0x20, 0x1f, 0x8a, 0x8c, 0x31, 0x38, 0xc7, 0xb5, 0x65, 0xd5, 0x38, 0xcd, 0x2b, 0xe7,
	0xe6, 0x6f, 0xc4, 0x83, 0x1b, 0x1b, 0x7f, 0x09, 0x36, 0xe2, 0xff, 0x57, 0xfe, 0xf0, 0xfe, 0xeb,
	0xbb, 0xc6, 0xc6, 0x6d, 0x5f, 0x2f, 0x75, 0xd7, 0x96, 0x35, 0x44, 0xbd, 0xd5, 0x5d, 0xd8, 0x95,
	0x3b, 0xc7, 0xa7, 0x79, 0x45, 0x7a, 0x8b, 0x2d, 0x50, 0x59, 0xf7, 0xd6, 0x99, 0xb2, 0xe9, 0xca,
	0xfd, 0x1d, 0x2c, 0xd3, 0x1d, 0xac, 0x4f, 0x78, 0x78, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x74,
	0x69, 0x5b, 0xf9, 0xb7, 0x02, 0x00, 0x00,
}
