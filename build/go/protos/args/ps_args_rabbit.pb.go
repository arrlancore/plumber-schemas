// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_rabbit.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RabbitConn struct {
	// @gotags: kong:"help='Destination host address (full DSN)',env='PLUMBER_RELAY_RABBIT_ADDRESS',default='amqp://localhost',required"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='Destination host address (full DSN)',env='PLUMBER_RELAY_RABBIT_ADDRESS',default='amqp://localhost',required"`
	// @gotags: kong:"help='Force TLS usage (regardless of DSN)',env='PLUMBER_RELAY_RABBIT_USE_TLS'"
	UseTls bool `protobuf:"varint,2,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" kong:"help='Force TLS usage (regardless of DSN)',env='PLUMBER_RELAY_RABBIT_USE_TLS'"`
	// @gotags: kong:"help='Whether to verify server TLS certificate',env='PLUMBER_RELAY_RABBIT_SKIP_VERIFY_TLS'"
	TlsSkipVerify        bool     `protobuf:"varint,3,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Whether to verify server TLS certificate',env='PLUMBER_RELAY_RABBIT_SKIP_VERIFY_TLS'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitConn) Reset()         { *m = RabbitConn{} }
func (m *RabbitConn) String() string { return proto.CompactTextString(m) }
func (*RabbitConn) ProtoMessage()    {}
func (*RabbitConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d1eee3dc8ebf97, []int{0}
}

func (m *RabbitConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitConn.Unmarshal(m, b)
}
func (m *RabbitConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitConn.Marshal(b, m, deterministic)
}
func (m *RabbitConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitConn.Merge(m, src)
}
func (m *RabbitConn) XXX_Size() int {
	return xxx_messageInfo_RabbitConn.Size(m)
}
func (m *RabbitConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitConn.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitConn proto.InternalMessageInfo

func (m *RabbitConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RabbitConn) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *RabbitConn) GetTlsSkipVerify() bool {
	if m != nil {
		return m.TlsSkipVerify
	}
	return false
}

type RabbitReadArgs struct {
	// @gotags: kong:"help='Name of the exchange',env='PLUMBER_RELAY_RABBIT_EXCHANGE',required"
	ExchangeName string `protobuf:"bytes,1,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty" kong:"help='Name of the exchange',env='PLUMBER_RELAY_RABBIT_EXCHANGE',required"`
	// @gotags: kong:"help='Name of the queue where messages will be routed to',env='PLUMBER_RELAY_RABBIT_QUEUE',required"
	QueueName string `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty" kong:"help='Name of the queue where messages will be routed to',env='PLUMBER_RELAY_RABBIT_QUEUE',required"`
	// @gotags: kong:"help='Binding key for topic based exchanges',env='PLUMBER_RELAY_RABBIT_ROUTING_KEY',required"
	BindingKey string `protobuf:"bytes,3,opt,name=binding_key,json=bindingKey,proto3" json:"binding_key,omitempty" kong:"help='Binding key for topic based exchanges',env='PLUMBER_RELAY_RABBIT_ROUTING_KEY',required"`
	// @gotags: kong:"help='Whether plumber should be the only one using the queue',env='PLUMBER_RELAY_RABBIT_QUEUE_EXCLUSIVE'"
	QueueExclusive bool `protobuf:"varint,4,opt,name=queue_exclusive,json=queueExclusive,proto3" json:"queue_exclusive,omitempty" kong:"help='Whether plumber should be the only one using the queue',env='PLUMBER_RELAY_RABBIT_QUEUE_EXCLUSIVE'"`
	// @gotags: kong:"help='Whether to create/declare the queue (if it does not exist)',env='PLUMBER_RELAY_RABBIT_QUEUE_DECLARE',default=true"
	QueueDeclare bool `protobuf:"varint,5,opt,name=queue_declare,json=queueDeclare,proto3" json:"queue_declare,omitempty" kong:"help='Whether to create/declare the queue (if it does not exist)',env='PLUMBER_RELAY_RABBIT_QUEUE_DECLARE',default=true"`
	// @gotags: kong:"help='Whether the queue should survive after disconnect',env='PLUMBER_RELAY_RABBIT_QUEUE_DURABLE'"
	QueueDurable bool `protobuf:"varint,6,opt,name=queue_durable,json=queueDurable,proto3" json:"queue_durable,omitempty" kong:"help='Whether the queue should survive after disconnect',env='PLUMBER_RELAY_RABBIT_QUEUE_DURABLE'"`
	// @gotags: kong:"help='Automatically acknowledge receipt of read/received messages',env='PLUMBER_RELAY_RABBIT_AUTOACK',default=true"
	AutoAck bool `protobuf:"varint,7,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty" kong:"help='Automatically acknowledge receipt of read/received messages',env='PLUMBER_RELAY_RABBIT_AUTOACK',default=true"`
	// @gotags: kong:"help='How to identify the consumer to RabbitMQ',env='PLUMBER_RELAY_CONSUMER_TAG',default=plumber"
	ConsumerTag string `protobuf:"bytes,8,opt,name=consumer_tag,json=consumerTag,proto3" json:"consumer_tag,omitempty" kong:"help='How to identify the consumer to RabbitMQ',env='PLUMBER_RELAY_CONSUMER_TAG',default=plumber"`
	// @gotags: kong:"help='Whether to auto-delete the queue after plumber has disconnected',env='PLUMBER_RELAY_RABBIT_QUEUE_AUTO_DELETE',default=true"
	QueueDelete bool `protobuf:"varint,9,opt,name=queue_delete,json=queueDelete,proto3" json:"queue_delete,omitempty" kong:"help='Whether to auto-delete the queue after plumber has disconnected',env='PLUMBER_RELAY_RABBIT_QUEUE_AUTO_DELETE',default=true"`
	// @gotags: kong:"help='Key=Value pair for sending additional queue argument to RabbitMQ. Example: --queue-arg x-dead-letter-exchange=mydlexchange --queue-arg x-queue-mode=lazy',env='PLUMBER_RELAY_RABBIT_QUEUE_ARGS'"
	QueueArg map[string]string `protobuf:"bytes,10,rep,name=queue_arg,json=queueArg,proto3" json:"queue_arg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" kong:"help='Key=Value pair for sending additional queue argument to RabbitMQ. Example: --queue-arg x-dead-letter-exchange=mydlexchange --queue-arg x-queue-mode=lazy',env='PLUMBER_RELAY_RABBIT_QUEUE_ARGS'"`
	// @gotags: kong:"help='Exclude messages with routing key matching regex'"
	ExcludeRoutingKeyRegex string   `protobuf:"bytes,11,opt,name=exclude_routing_key_regex,json=excludeRoutingKeyRegex,proto3" json:"exclude_routing_key_regex,omitempty" kong:"help='Exclude messages with routing key matching regex'"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *RabbitReadArgs) Reset()         { *m = RabbitReadArgs{} }
func (m *RabbitReadArgs) String() string { return proto.CompactTextString(m) }
func (*RabbitReadArgs) ProtoMessage()    {}
func (*RabbitReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d1eee3dc8ebf97, []int{1}
}

func (m *RabbitReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitReadArgs.Unmarshal(m, b)
}
func (m *RabbitReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitReadArgs.Marshal(b, m, deterministic)
}
func (m *RabbitReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitReadArgs.Merge(m, src)
}
func (m *RabbitReadArgs) XXX_Size() int {
	return xxx_messageInfo_RabbitReadArgs.Size(m)
}
func (m *RabbitReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitReadArgs proto.InternalMessageInfo

func (m *RabbitReadArgs) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *RabbitReadArgs) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *RabbitReadArgs) GetBindingKey() string {
	if m != nil {
		return m.BindingKey
	}
	return ""
}

func (m *RabbitReadArgs) GetQueueExclusive() bool {
	if m != nil {
		return m.QueueExclusive
	}
	return false
}

func (m *RabbitReadArgs) GetQueueDeclare() bool {
	if m != nil {
		return m.QueueDeclare
	}
	return false
}

func (m *RabbitReadArgs) GetQueueDurable() bool {
	if m != nil {
		return m.QueueDurable
	}
	return false
}

func (m *RabbitReadArgs) GetAutoAck() bool {
	if m != nil {
		return m.AutoAck
	}
	return false
}

func (m *RabbitReadArgs) GetConsumerTag() string {
	if m != nil {
		return m.ConsumerTag
	}
	return ""
}

func (m *RabbitReadArgs) GetQueueDelete() bool {
	if m != nil {
		return m.QueueDelete
	}
	return false
}

func (m *RabbitReadArgs) GetQueueArg() map[string]string {
	if m != nil {
		return m.QueueArg
	}
	return nil
}

func (m *RabbitReadArgs) GetExcludeRoutingKeyRegex() string {
	if m != nil {
		return m.ExcludeRoutingKeyRegex
	}
	return ""
}

type RabbitWriteArgs struct {
	// @gotags: kong:"help='Exchange to write message(s) to',required"
	ExchangeName string `protobuf:"bytes,1,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty" kong:"help='Exchange to write message(s) to',required"`
	// @gotags: kong:"help='Routing key to write message(s) to',required"
	RoutingKey string `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty" kong:"help='Routing key to write message(s) to',required"`
	// @gotags: kong:"help='Fills message properties $app_id with this value',default=plumber"
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" kong:"help='Fills message properties  with this value',default=plumber"`
	// @gotags: kong:"help='The type of exchange we are working with',enum='direct,topic,headers,fanout',default=topic,group=exchange"
	ExchangeType string `protobuf:"bytes,4,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type,omitempty" kong:"help='The type of exchange we are working with',enum='direct,topic,headers,fanout',default=topic,group=exchange"`
	// @gotags: kong:"help='Whether to declare an exchange (if it does not exist)',group=exchange"
	ExchangeDeclare bool `protobuf:"varint,5,opt,name=exchange_declare,json=exchangeDeclare,proto3" json:"exchange_declare,omitempty" kong:"help='Whether to declare an exchange (if it does not exist)',group=exchange"`
	// @gotags: kong:"help='Whether to make a declared exchange durable',group=exchange"
	ExchangeDurable bool `protobuf:"varint,6,opt,name=exchange_durable,json=exchangeDurable,proto3" json:"exchange_durable,omitempty" kong:"help='Whether to make a declared exchange durable',group=exchange"`
	// @gotags: kong:"help='Whether to auto-delete the exchange (after writes)',group=exchange"
	ExchangeAutoDelete   bool     `protobuf:"varint,7,opt,name=exchange_auto_delete,json=exchangeAutoDelete,proto3" json:"exchange_auto_delete,omitempty" kong:"help='Whether to auto-delete the exchange (after writes)',group=exchange"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitWriteArgs) Reset()         { *m = RabbitWriteArgs{} }
func (m *RabbitWriteArgs) String() string { return proto.CompactTextString(m) }
func (*RabbitWriteArgs) ProtoMessage()    {}
func (*RabbitWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d1eee3dc8ebf97, []int{2}
}

func (m *RabbitWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitWriteArgs.Unmarshal(m, b)
}
func (m *RabbitWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitWriteArgs.Marshal(b, m, deterministic)
}
func (m *RabbitWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitWriteArgs.Merge(m, src)
}
func (m *RabbitWriteArgs) XXX_Size() int {
	return xxx_messageInfo_RabbitWriteArgs.Size(m)
}
func (m *RabbitWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitWriteArgs proto.InternalMessageInfo

func (m *RabbitWriteArgs) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *RabbitWriteArgs) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

func (m *RabbitWriteArgs) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *RabbitWriteArgs) GetExchangeType() string {
	if m != nil {
		return m.ExchangeType
	}
	return ""
}

func (m *RabbitWriteArgs) GetExchangeDeclare() bool {
	if m != nil {
		return m.ExchangeDeclare
	}
	return false
}

func (m *RabbitWriteArgs) GetExchangeDurable() bool {
	if m != nil {
		return m.ExchangeDurable
	}
	return false
}

func (m *RabbitWriteArgs) GetExchangeAutoDelete() bool {
	if m != nil {
		return m.ExchangeAutoDelete
	}
	return false
}

func init() {
	proto.RegisterType((*RabbitConn)(nil), "protos.args.RabbitConn")
	proto.RegisterType((*RabbitReadArgs)(nil), "protos.args.RabbitReadArgs")
	proto.RegisterMapType((map[string]string)(nil), "protos.args.RabbitReadArgs.QueueArgEntry")
	proto.RegisterType((*RabbitWriteArgs)(nil), "protos.args.RabbitWriteArgs")
}

func init() { proto.RegisterFile("ps_args_rabbit.proto", fileDescriptor_01d1eee3dc8ebf97) }

var fileDescriptor_01d1eee3dc8ebf97 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x54, 0xd2, 0x36, 0x1f, 0xcf, 0x6d, 0x53, 0xad, 0x0a, 0x6c, 0x91, 0x50, 0x4b, 0x91, 0xa0,
	0x3d, 0x60, 0x23, 0xb8, 0x50, 0x7a, 0x0a, 0x50, 0x24, 0x54, 0x09, 0x09, 0x53, 0x81, 0xc4, 0x65,
	0xb5, 0xb6, 0x1f, 0x8e, 0x15, 0x7f, 0x6c, 0xf7, 0x23, 0x8a, 0x7f, 0x02, 0xbf, 0x81, 0x3f, 0x8b,
	0xbc, 0x6b, 0x87, 0xf8, 0xc6, 0x29, 0x79, 0x33, 0xe3, 0xb7, 0xa3, 0x37, 0x03, 0xc7, 0x42, 0x31,
	0x2e, 0x53, 0xc5, 0x24, 0x8f, 0xa2, 0x4c, 0xfb, 0x42, 0x56, 0xba, 0x22, 0x9e, 0xfd, 0x51, 0x7e,
	0xc3, 0x9c, 0xa7, 0x00, 0xa1, 0x25, 0x3f, 0x54, 0x65, 0x49, 0x28, 0x8c, 0x79, 0x92, 0x48, 0x54,
	0x8a, 0x0e, 0xce, 0x06, 0x17, 0xd3, 0xb0, 0x1b, 0xc9, 0x23, 0x18, 0x1b, 0x85, 0x4c, 0xe7, 0x8a,
	0x0e, 0xcf, 0x06, 0x17, 0x93, 0x70, 0x64, 0x14, 0xde, 0xe5, 0x8a, 0x3c, 0x87, 0x99, 0xce, 0x15,
	0x53, 0xcb, 0x4c, 0xb0, 0x15, 0xca, 0xec, 0x57, 0x4d, 0x77, 0xac, 0xe0, 0x40, 0xe7, 0xea, 0xdb,
	0x32, 0x13, 0xdf, 0x2d, 0x78, 0xfe, 0x7b, 0x17, 0x0e, 0xdd, 0x4b, 0x21, 0xf2, 0x64, 0x2e, 0x53,
	0x45, 0x9e, 0xc1, 0x01, 0xae, 0xe3, 0x05, 0x2f, 0x53, 0x64, 0x25, 0x2f, 0xb0, 0x7d, 0x73, 0xbf,
	0x03, 0xbf, 0xf0, 0x02, 0xc9, 0x13, 0x80, 0x7b, 0x83, 0xa6, 0x55, 0x0c, 0xad, 0x62, 0x6a, 0x11,
	0x4b, 0x9f, 0x82, 0x17, 0x65, 0x65, 0x92, 0x95, 0x29, 0x5b, 0xa2, 0x7b, 0x7a, 0x1a, 0x42, 0x0b,
	0xdd, 0x62, 0x4d, 0x5e, 0xc0, 0xcc, 0x7d, 0x8f, 0xeb, 0x38, 0x37, 0x2a, 0x5b, 0x21, 0xdd, 0xb5,
	0xfe, 0x0e, 0x2d, 0x7c, 0xd3, 0xa1, 0x8d, 0x1b, 0x27, 0x4c, 0x30, 0xce, 0xb9, 0x44, 0xba, 0x67,
	0x65, 0xfb, 0x16, 0xfc, 0xe8, 0xb0, 0x2d, 0x91, 0x91, 0x3c, 0xca, 0x91, 0x8e, 0xb6, 0x45, 0x0e,
	0x23, 0x27, 0x30, 0xe1, 0x46, 0x57, 0x8c, 0xc7, 0x4b, 0x3a, 0xb6, 0xfc, 0xb8, 0x99, 0xe7, 0xf1,
	0x92, 0x3c, 0x85, 0xfd, 0xb8, 0x2a, 0x95, 0x29, 0x50, 0x32, 0xcd, 0x53, 0x3a, 0xb1, 0x7e, 0xbd,
	0x0e, 0xbb, 0xe3, 0x69, 0x23, 0xe9, 0x7c, 0xe4, 0xa8, 0x91, 0x4e, 0xed, 0x06, 0xaf, 0xb5, 0xd1,
	0x40, 0xe4, 0x13, 0xb8, 0x0b, 0x34, 0xe1, 0x52, 0x38, 0xdb, 0xb9, 0xf0, 0x5e, 0x5f, 0xfa, 0x5b,
	0xa9, 0xfa, 0xfd, 0x43, 0xfb, 0x5f, 0x1b, 0xf1, 0x5c, 0xa6, 0x37, 0xa5, 0x96, 0x75, 0x38, 0xb9,
	0x6f, 0x47, 0x72, 0x05, 0x27, 0xf6, 0x2a, 0x09, 0x32, 0x59, 0x19, 0xdd, 0x1e, 0x91, 0x49, 0x4c,
	0x71, 0x4d, 0x3d, 0x6b, 0xed, 0x61, 0x2b, 0x08, 0x1d, 0x7f, 0x8b, 0x75, 0xd8, 0xb0, 0x8f, 0xaf,
	0xe1, 0xa0, 0xb7, 0x95, 0x1c, 0xc1, 0x4e, 0x13, 0x80, 0x8b, 0xb0, 0xf9, 0x4b, 0x8e, 0x61, 0x6f,
	0xc5, 0x73, 0xd3, 0x85, 0xe6, 0x86, 0x77, 0xc3, 0xb7, 0x83, 0xf3, 0x3f, 0x43, 0x98, 0x39, 0x8b,
	0x3f, 0x64, 0xa6, 0xf1, 0xff, 0xcb, 0x70, 0x0a, 0xde, 0x96, 0xd1, 0x76, 0x31, 0xc8, 0x8d, 0x37,
	0xf2, 0x00, 0x46, 0x5c, 0x08, 0x96, 0x25, 0x6d, 0x13, 0xf6, 0xb8, 0x10, 0x9f, 0x93, 0xde, 0x72,
	0x5d, 0x0b, 0x57, 0x81, 0xad, 0xe5, 0x77, 0xb5, 0x40, 0x72, 0x09, 0x47, 0x1b, 0x51, 0xbf, 0x03,
	0xb3, 0x0e, 0xef, 0x6a, 0xd0, 0x93, 0xf6, 0x9a, 0xf0, 0x4f, 0xda, 0x96, 0xe1, 0x15, 0x1c, 0x6f,
	0xa4, 0xb6, 0x15, 0x6d, 0xac, 0xae, 0x18, 0xa4, 0xe3, 0xe6, 0x46, 0x57, 0x2e, 0xdd, 0xf7, 0xd7,
	0x3f, 0xaf, 0xd2, 0x4c, 0x2f, 0x4c, 0xe4, 0xc7, 0x55, 0x11, 0x44, 0x5c, 0xc7, 0x8b, 0xb8, 0x92,
	0x22, 0x10, 0xb9, 0x29, 0x22, 0x94, 0x2f, 0x55, 0xbc, 0xc0, 0x82, 0xab, 0x20, 0x32, 0x59, 0x9e,
	0x04, 0x69, 0x15, 0xb8, 0xe4, 0x83, 0x26, 0xf9, 0x68, 0x64, 0x87, 0x37, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x8b, 0x47, 0x2c, 0xde, 0xfb, 0x03, 0x00, 0x00,
}
