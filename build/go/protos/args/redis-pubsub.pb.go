// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redis-pubsub.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RedisPubSubConn struct {
	// @gotags: kong:"help='Address of redis server',env='PLUMBER_RELAY_REDIS_PUBSUB_ADDRESS',default=localhost:6379"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='Address of redis server',env='PLUMBER_RELAY_REDIS_PUBSUB_ADDRESS',default=localhost:6379"`
	// @gotags: kong:"help='Optional username to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_USERNAME'"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" kong:"help='Optional username to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_USERNAME'"`
	// @gotags: kong:"help='Optional password to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_PASSWORD'"
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" kong:"help='Optional password to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_PASSWORD'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisPubSubConn) Reset()         { *m = RedisPubSubConn{} }
func (m *RedisPubSubConn) String() string { return proto.CompactTextString(m) }
func (*RedisPubSubConn) ProtoMessage()    {}
func (*RedisPubSubConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_e501abdf9fae4c9b, []int{0}
}

func (m *RedisPubSubConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisPubSubConn.Unmarshal(m, b)
}
func (m *RedisPubSubConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisPubSubConn.Marshal(b, m, deterministic)
}
func (m *RedisPubSubConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisPubSubConn.Merge(m, src)
}
func (m *RedisPubSubConn) XXX_Size() int {
	return xxx_messageInfo_RedisPubSubConn.Size(m)
}
func (m *RedisPubSubConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisPubSubConn.DiscardUnknown(m)
}

var xxx_messageInfo_RedisPubSubConn proto.InternalMessageInfo

func (m *RedisPubSubConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RedisPubSubConn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RedisPubSubConn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RedisPubSubReadOpts struct {
	// @gotags: kong:"help='Database (0-16)',env='PLUMBER_RELAY_REDIS_PUBSUB_DATABASE'"
	Database uint32 `protobuf:"varint,1,opt,name=database,proto3" json:"database,omitempty" kong:"help='Database (0-16)',env='PLUMBER_RELAY_REDIS_PUBSUB_DATABASE'"`
	// @gotags: kong:"help='Comma separated list of channels to read from',env='PLUMBER_RELAY_REDIS_PUBSUB_CHANNELS',required"
	Channel              []string `protobuf:"bytes,2,rep,name=channel,proto3" json:"channel,omitempty" kong:"help='Comma separated list of channels to read from',env='PLUMBER_RELAY_REDIS_PUBSUB_CHANNELS',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisPubSubReadOpts) Reset()         { *m = RedisPubSubReadOpts{} }
func (m *RedisPubSubReadOpts) String() string { return proto.CompactTextString(m) }
func (*RedisPubSubReadOpts) ProtoMessage()    {}
func (*RedisPubSubReadOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_e501abdf9fae4c9b, []int{1}
}

func (m *RedisPubSubReadOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisPubSubReadOpts.Unmarshal(m, b)
}
func (m *RedisPubSubReadOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisPubSubReadOpts.Marshal(b, m, deterministic)
}
func (m *RedisPubSubReadOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisPubSubReadOpts.Merge(m, src)
}
func (m *RedisPubSubReadOpts) XXX_Size() int {
	return xxx_messageInfo_RedisPubSubReadOpts.Size(m)
}
func (m *RedisPubSubReadOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisPubSubReadOpts.DiscardUnknown(m)
}

var xxx_messageInfo_RedisPubSubReadOpts proto.InternalMessageInfo

func (m *RedisPubSubReadOpts) GetDatabase() uint32 {
	if m != nil {
		return m.Database
	}
	return 0
}

func (m *RedisPubSubReadOpts) GetChannel() []string {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RedisPubSubWriteOpts struct {
	// @gotags: kong:"help='Database (0-16)'"
	Database uint32 `protobuf:"varint,1,opt,name=database,proto3" json:"database,omitempty" kong:"help='Database (0-16)'"`
	// @gotags: kong:"help='Comma separated list of channels to write to',required"
	Channel              []string `protobuf:"bytes,2,rep,name=channel,proto3" json:"channel,omitempty" kong:"help='Comma separated list of channels to write to',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisPubSubWriteOpts) Reset()         { *m = RedisPubSubWriteOpts{} }
func (m *RedisPubSubWriteOpts) String() string { return proto.CompactTextString(m) }
func (*RedisPubSubWriteOpts) ProtoMessage()    {}
func (*RedisPubSubWriteOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_e501abdf9fae4c9b, []int{2}
}

func (m *RedisPubSubWriteOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisPubSubWriteOpts.Unmarshal(m, b)
}
func (m *RedisPubSubWriteOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisPubSubWriteOpts.Marshal(b, m, deterministic)
}
func (m *RedisPubSubWriteOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisPubSubWriteOpts.Merge(m, src)
}
func (m *RedisPubSubWriteOpts) XXX_Size() int {
	return xxx_messageInfo_RedisPubSubWriteOpts.Size(m)
}
func (m *RedisPubSubWriteOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisPubSubWriteOpts.DiscardUnknown(m)
}

var xxx_messageInfo_RedisPubSubWriteOpts proto.InternalMessageInfo

func (m *RedisPubSubWriteOpts) GetDatabase() uint32 {
	if m != nil {
		return m.Database
	}
	return 0
}

func (m *RedisPubSubWriteOpts) GetChannel() []string {
	if m != nil {
		return m.Channel
	}
	return nil
}

func init() {
	proto.RegisterType((*RedisPubSubConn)(nil), "protos.args.RedisPubSubConn")
	proto.RegisterType((*RedisPubSubReadOpts)(nil), "protos.args.RedisPubSubReadOpts")
	proto.RegisterType((*RedisPubSubWriteOpts)(nil), "protos.args.RedisPubSubWriteOpts")
}

func init() { proto.RegisterFile("redis-pubsub.proto", fileDescriptor_e501abdf9fae4c9b) }

var fileDescriptor_e501abdf9fae4c9b = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xb1, 0x4b, 0x34, 0x31,
	0x10, 0xc5, 0xb9, 0x3b, 0xf8, 0x3e, 0x8d, 0x88, 0xb0, 0x5a, 0x04, 0xab, 0x63, 0x2b, 0x9b, 0xdb,
	0x14, 0x56, 0x62, 0xa7, 0xa5, 0x82, 0xb2, 0x16, 0x82, 0xdd, 0x4c, 0x32, 0xec, 0x2e, 0xec, 0x26,
	0x61, 0x26, 0xc1, 0x7f, 0x5f, 0x92, 0xf3, 0x8e, 0xab, 0xad, 0x86, 0x1f, 0x6f, 0x78, 0xef, 0xf1,
	0x54, 0xc3, 0xe4, 0x26, 0xd9, 0xc5, 0x8c, 0x92, 0xb1, 0x8b, 0x1c, 0x52, 0x68, 0x2e, 0xea, 0x91,
	0x0e, 0x78, 0x90, 0xd6, 0xaa, 0xab, 0xbe, 0xbc, 0xbc, 0x67, 0xfc, 0xc8, 0xf8, 0x1c, 0xbc, 0x6f,
	0xb4, 0xfa, 0x0f, 0xce, 0x31, 0x89, 0xe8, 0xd5, 0x76, 0x75, 0x77, 0xde, 0x1f, 0xb0, 0xb9, 0x55,
	0x67, 0x59, 0x88, 0x3d, 0x2c, 0xa4, 0xd7, 0x55, 0x3a, 0x72, 0xd1, 0x22, 0x88, 0x7c, 0x07, 0x76,
	0x7a, 0xb3, 0xd7, 0x0e, 0xdc, 0xbe, 0xa8, 0xeb, 0x93, 0x90, 0x9e, 0xc0, 0xbd, 0xc5, 0x54, 0xed,
	0x1c, 0x24, 0x40, 0x10, 0xaa, 0x49, 0x97, 0xfd, 0x91, 0x4b, 0x09, 0x3b, 0x82, 0xf7, 0x34, 0xeb,
	0xf5, 0x76, 0x53, 0x4a, 0xfc, 0x62, 0xfb, 0xaa, 0x6e, 0x4e, 0xcc, 0x3e, 0x79, 0x4a, 0xf4, 0x77,
	0xb7, 0xa7, 0xc7, 0xaf, 0x87, 0x61, 0x4a, 0x63, 0xc6, 0xce, 0x86, 0xc5, 0x20, 0x24, 0x3b, 0xda,
	0xc0, 0xd1, 0xc4, 0x39, 0x2f, 0x48, 0xbc, 0x13, 0x3b, 0xd2, 0x02, 0x62, 0x30, 0x4f, 0xb3, 0x33,
	0x43, 0x30, 0xfb, 0xf1, 0x4c, 0x19, 0x0f, 0xff, 0x55, 0xb8, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x7f, 0xb1, 0x7b, 0xa3, 0x66, 0x01, 0x00, 0x00,
}
