// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redis-streams.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateConsumerConfig_OffsetStart int32

const (
	CreateConsumerConfig_Latest CreateConsumerConfig_OffsetStart = 0
	CreateConsumerConfig_Oldest CreateConsumerConfig_OffsetStart = 1
)

var CreateConsumerConfig_OffsetStart_name = map[int32]string{
	0: "Latest",
	1: "Oldest",
}

var CreateConsumerConfig_OffsetStart_value = map[string]int32{
	"Latest": 0,
	"Oldest": 1,
}

func (x CreateConsumerConfig_OffsetStart) String() string {
	return proto.EnumName(CreateConsumerConfig_OffsetStart_name, int32(x))
}

func (CreateConsumerConfig_OffsetStart) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{1, 0}
}

type RedisStreamsConn struct {
	// @gotags: kong:"help='Address of redis server',default=localhost:6379,required,env='PLUMBER_RELAY_REDIS_STREAMS_ADDRESS'"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='Address of redis server',default=localhost:6379,required,env='PLUMBER_RELAY_REDIS_STREAMS_ADDRESS'"`
	// @gotags: kong:"help='Username (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_STREAMS_USERNAME'"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" kong:"help='Username (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_STREAMS_USERNAME'"`
	// @gotags: kong:"help='Password (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_STREAMS_PASSWORD'"
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" kong:"help='Password (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_STREAMS_PASSWORD'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisStreamsConn) Reset()         { *m = RedisStreamsConn{} }
func (m *RedisStreamsConn) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsConn) ProtoMessage()    {}
func (*RedisStreamsConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{0}
}

func (m *RedisStreamsConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsConn.Unmarshal(m, b)
}
func (m *RedisStreamsConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsConn.Marshal(b, m, deterministic)
}
func (m *RedisStreamsConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsConn.Merge(m, src)
}
func (m *RedisStreamsConn) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsConn.Size(m)
}
func (m *RedisStreamsConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsConn.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsConn proto.InternalMessageInfo

func (m *RedisStreamsConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RedisStreamsConn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RedisStreamsConn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateConsumerConfig struct {
	// @gotags: kong:"help='Create the streams if creating a new consumer group',env='PLUMBER_RELAY_REDIS_STREAMS_CREATE_STREAMS'"
	CreateStreams bool `protobuf:"varint,1,opt,name=create_streams,json=createStreams,proto3" json:"create_streams,omitempty" kong:"help='Create the streams if creating a new consumer group',env='PLUMBER_RELAY_REDIS_STREAMS_CREATE_STREAMS'"`
	// @gotags: kong:"help='Recreate this consumer group if it does not exist',env='PLUMBER_RELAY_REDIS_STREAMS_RECREATE_CONSUMER_GROUP'"
	RecreateConsumerGroup bool `protobuf:"varint,2,opt,name=recreate_consumer_group,json=recreateConsumerGroup,proto3" json:"recreate_consumer_group,omitempty" kong:"help='Recreate this consumer group if it does not exist',env='PLUMBER_RELAY_REDIS_STREAMS_RECREATE_CONSUMER_GROUP'"`
	// @gotags: kong:"help='What offset to start reading at (0: latest, 1: oldest)',default=0,required,env='PLUMBER_RELAY_REDIS_STREAMS_START_ID'"
	OffsetStart          CreateConsumerConfig_OffsetStart `protobuf:"varint,3,opt,name=offset_start,json=offsetStart,proto3,enum=protos.args.CreateConsumerConfig_OffsetStart" json:"offset_start,omitempty" kong:"help='What offset to start reading at (0: latest, 1: oldest)',default=0,required,env='PLUMBER_RELAY_REDIS_STREAMS_START_ID'"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CreateConsumerConfig) Reset()         { *m = CreateConsumerConfig{} }
func (m *CreateConsumerConfig) String() string { return proto.CompactTextString(m) }
func (*CreateConsumerConfig) ProtoMessage()    {}
func (*CreateConsumerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{1}
}

func (m *CreateConsumerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateConsumerConfig.Unmarshal(m, b)
}
func (m *CreateConsumerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateConsumerConfig.Marshal(b, m, deterministic)
}
func (m *CreateConsumerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsumerConfig.Merge(m, src)
}
func (m *CreateConsumerConfig) XXX_Size() int {
	return xxx_messageInfo_CreateConsumerConfig.Size(m)
}
func (m *CreateConsumerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsumerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsumerConfig proto.InternalMessageInfo

func (m *CreateConsumerConfig) GetCreateStreams() bool {
	if m != nil {
		return m.CreateStreams
	}
	return false
}

func (m *CreateConsumerConfig) GetRecreateConsumerGroup() bool {
	if m != nil {
		return m.RecreateConsumerGroup
	}
	return false
}

func (m *CreateConsumerConfig) GetOffsetStart() CreateConsumerConfig_OffsetStart {
	if m != nil {
		return m.OffsetStart
	}
	return CreateConsumerConfig_Latest
}

type RedisStreamsReadArgs struct {
	// @gotags: kong:"help='Database',required,default=0,env='PLUMBER_RELAY_REDIS_STREAMS_DATABASE'"
	Database uint32 `protobuf:"varint,1,opt,name=database,proto3" json:"database,omitempty" kong:"help='Database',required,default=0,env='PLUMBER_RELAY_REDIS_STREAMS_DATABASE'"`
	// @gotags: kong:"help='Streams to read from',required,env='PLUMBER_RELAY_REDIS_STREAMS_STREAMS'"
	Stream []string `protobuf:"bytes,2,rep,name=stream,proto3" json:"stream,omitempty" kong:"help='Streams to read from',required,env='PLUMBER_RELAY_REDIS_STREAMS_STREAMS'"`
	// @gotags: kong:"help='Consumer group name',env='PLUMBER_RELAY_REDIS_STREAMS_CONSUMER_GROUP',default=plumber"
	ConsumerGroup string `protobuf:"bytes,3,opt,name=consumer_group,json=consumerGroup,proto3" json:"consumer_group,omitempty" kong:"help='Consumer group name',env='PLUMBER_RELAY_REDIS_STREAMS_CONSUMER_GROUP',default=plumber"`
	// @gotags: kong:"help='Consumer name',env='PLUMBER_RELAY_REDIS_STREAMS_CONSUMER_NAME',default=plumber-consumer-1"
	ConsumerName string `protobuf:"bytes,4,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty" kong:"help='Consumer name',env='PLUMBER_RELAY_REDIS_STREAMS_CONSUMER_NAME',default=plumber-consumer-1"`
	// @gotags: kong:"help='Number of records to read from stream(s) per read',env='PLUMBER_RELAY_REDIS_STREAMS_COUNT',default=10"
	Count uint32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty" kong:"help='Number of records to read from stream(s) per read',env='PLUMBER_RELAY_REDIS_STREAMS_COUNT',default=10"`
	// @gotags: kong:"embed"
	CreateConsumerConfig *CreateConsumerConfig `protobuf:"bytes,6,opt,name=create_consumer_config,json=createConsumerConfig,proto3" json:"create_consumer_config,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RedisStreamsReadArgs) Reset()         { *m = RedisStreamsReadArgs{} }
func (m *RedisStreamsReadArgs) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsReadArgs) ProtoMessage()    {}
func (*RedisStreamsReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{2}
}

func (m *RedisStreamsReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsReadArgs.Unmarshal(m, b)
}
func (m *RedisStreamsReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsReadArgs.Marshal(b, m, deterministic)
}
func (m *RedisStreamsReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsReadArgs.Merge(m, src)
}
func (m *RedisStreamsReadArgs) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsReadArgs.Size(m)
}
func (m *RedisStreamsReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsReadArgs proto.InternalMessageInfo

func (m *RedisStreamsReadArgs) GetDatabase() uint32 {
	if m != nil {
		return m.Database
	}
	return 0
}

func (m *RedisStreamsReadArgs) GetStream() []string {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *RedisStreamsReadArgs) GetConsumerGroup() string {
	if m != nil {
		return m.ConsumerGroup
	}
	return ""
}

func (m *RedisStreamsReadArgs) GetConsumerName() string {
	if m != nil {
		return m.ConsumerName
	}
	return ""
}

func (m *RedisStreamsReadArgs) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RedisStreamsReadArgs) GetCreateConsumerConfig() *CreateConsumerConfig {
	if m != nil {
		return m.CreateConsumerConfig
	}
	return nil
}

type RedisStreamsWriteArgs struct {
	// @gotags: kong:"help='What redis ID to use for input data (* = auto-generate)',default='*'"
	WriteId string `protobuf:"bytes,1,opt,name=write_id,json=writeId,proto3" json:"write_id,omitempty" kong:"help='What redis ID to use for input data (* = auto-generate)',default='*'"`
	// @gotags: kong:"help='Streams to write to'"
	Streams []string `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty" kong:"help='Streams to write to'"`
	// @gotags: kong:"help='Key name to write input data to'"
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty" kong:"help='Key name to write input data to'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisStreamsWriteArgs) Reset()         { *m = RedisStreamsWriteArgs{} }
func (m *RedisStreamsWriteArgs) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsWriteArgs) ProtoMessage()    {}
func (*RedisStreamsWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{3}
}

func (m *RedisStreamsWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsWriteArgs.Unmarshal(m, b)
}
func (m *RedisStreamsWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsWriteArgs.Marshal(b, m, deterministic)
}
func (m *RedisStreamsWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsWriteArgs.Merge(m, src)
}
func (m *RedisStreamsWriteArgs) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsWriteArgs.Size(m)
}
func (m *RedisStreamsWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsWriteArgs proto.InternalMessageInfo

func (m *RedisStreamsWriteArgs) GetWriteId() string {
	if m != nil {
		return m.WriteId
	}
	return ""
}

func (m *RedisStreamsWriteArgs) GetStreams() []string {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *RedisStreamsWriteArgs) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.args.CreateConsumerConfig_OffsetStart", CreateConsumerConfig_OffsetStart_name, CreateConsumerConfig_OffsetStart_value)
	proto.RegisterType((*RedisStreamsConn)(nil), "protos.args.RedisStreamsConn")
	proto.RegisterType((*CreateConsumerConfig)(nil), "protos.args.CreateConsumerConfig")
	proto.RegisterType((*RedisStreamsReadArgs)(nil), "protos.args.RedisStreamsReadArgs")
	proto.RegisterType((*RedisStreamsWriteArgs)(nil), "protos.args.RedisStreamsWriteArgs")
}

func init() { proto.RegisterFile("redis-streams.proto", fileDescriptor_55f03e487ac12019) }

var fileDescriptor_55f03e487ac12019 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x4d, 0xeb, 0xd6, 0xee, 0xeb, 0x76, 0x29, 0x63, 0x77, 0x8d, 0x9e, 0x6a, 0x64, 0xa1,
	0x97, 0x26, 0xb0, 0x82, 0x20, 0x9e, 0xb4, 0x07, 0x11, 0xc4, 0x95, 0xd9, 0xc3, 0x82, 0x07, 0xc3,
	0x64, 0x66, 0x9a, 0x06, 0x9b, 0x4c, 0x98, 0x37, 0x61, 0xf1, 0x03, 0xf8, 0x75, 0xfd, 0x0c, 0x32,
	0x2f, 0x49, 0xed, 0x4a, 0xc1, 0x53, 0xe6, 0xff, 0xfe, 0x2f, 0x33, 0xef, 0xff, 0x9b, 0x81, 0xa7,
	0x56, 0xab, 0x02, 0x57, 0xe8, 0xac, 0x16, 0x25, 0xc6, 0xb5, 0x35, 0xce, 0xb0, 0x09, 0x7d, 0x30,
	0x16, 0x36, 0xc7, 0x48, 0xc1, 0x8c, 0xfb, 0x9e, 0xdb, 0xb6, 0x65, 0x6d, 0xaa, 0x8a, 0x85, 0xf0,
	0x44, 0x28, 0x65, 0x35, 0x62, 0x18, 0x2c, 0x82, 0xe5, 0x29, 0xef, 0x25, 0x7b, 0x01, 0xe3, 0x06,
	0xb5, 0xad, 0x44, 0xa9, 0xc3, 0x01, 0x59, 0x7b, 0xed, 0xbd, 0x5a, 0x20, 0xde, 0x1b, 0xab, 0xc2,
	0x61, 0xeb, 0xf5, 0x3a, 0xfa, 0x1d, 0xc0, 0x7c, 0x6d, 0xb5, 0x70, 0x7a, 0x6d, 0x2a, 0x6c, 0x4a,
	0x6d, 0xd7, 0xa6, 0xda, 0x14, 0x39, 0xbb, 0x82, 0x73, 0x49, 0xf5, 0xb4, 0x9b, 0x91, 0x4e, 0x1c,
	0xf3, 0x69, 0x5b, 0xed, 0xa6, 0x62, 0x6f, 0xe0, 0x99, 0xd5, 0x5d, 0xa3, 0xec, 0x76, 0x48, 0x73,
	0x6b, 0x9a, 0x9a, 0xc6, 0x18, 0xf3, 0x8b, 0xde, 0xee, 0xf7, 0xff, 0xe8, 0x4d, 0xf6, 0x15, 0xce,
	0xcc, 0x66, 0x83, 0xda, 0xa5, 0xe8, 0x84, 0x75, 0x34, 0xd7, 0xf9, 0xf5, 0x2a, 0x3e, 0x20, 0x10,
	0x1f, 0x9b, 0x2b, 0xbe, 0xa1, 0xbf, 0x6e, 0xfd, 0x4f, 0x7c, 0x62, 0xfe, 0x8a, 0xe8, 0x0a, 0x26,
	0x07, 0x1e, 0x03, 0x18, 0x7d, 0x16, 0x4e, 0xa3, 0x9b, 0x3d, 0xf2, 0xeb, 0x9b, 0x9d, 0xf2, 0xeb,
	0x20, 0xfa, 0x35, 0x80, 0xf9, 0x21, 0x57, 0xae, 0x85, 0x7a, 0x6f, 0x73, 0x22, 0xa8, 0x84, 0x13,
	0x99, 0x40, 0x4d, 0x51, 0xa7, 0x7c, 0xaf, 0xd9, 0x25, 0x8c, 0x5a, 0x0a, 0xe1, 0x60, 0x31, 0x5c,
	0x9e, 0xf2, 0x4e, 0x11, 0xa4, 0x87, 0xa1, 0x5b, 0xbe, 0x53, 0xf9, 0x20, 0xec, 0x2b, 0xd8, 0x17,
	0x52, 0xba, 0xa1, 0xc7, 0xd4, 0x75, 0xd6, 0x17, 0xbf, 0xf8, 0x5b, 0x9a, 0xc3, 0x89, 0x34, 0x4d,
	0xe5, 0xc2, 0x13, 0x3a, 0xbc, 0x15, 0xec, 0x0e, 0x2e, 0xff, 0xa5, 0x2b, 0x09, 0x44, 0x38, 0x5a,
	0x04, 0xcb, 0xc9, 0xf5, 0xcb, 0xff, 0x12, 0xe3, 0x73, 0x79, 0xa4, 0x1a, 0x7d, 0x87, 0x8b, 0x43,
	0x0c, 0x77, 0xb6, 0x70, 0x9a, 0x38, 0x3c, 0x87, 0xf1, 0xbd, 0x17, 0x69, 0xa1, 0xfa, 0x47, 0x46,
	0xfa, 0x93, 0xf2, 0xcf, 0xaf, 0x7f, 0x0c, 0x2d, 0x87, 0x5e, 0xb2, 0x19, 0x0c, 0x7f, 0xe8, 0x9f,
	0x5d, 0x7a, 0xbf, 0xfc, 0xf0, 0xee, 0xdb, 0xdb, 0xbc, 0x70, 0xdb, 0x26, 0x8b, 0xa5, 0x29, 0x93,
	0x4c, 0x38, 0xb9, 0x95, 0xc6, 0xd6, 0x49, 0xbd, 0x6b, 0xca, 0x4c, 0xdb, 0x15, 0xca, 0xad, 0x2e,
	0x05, 0x26, 0x59, 0x53, 0xec, 0x54, 0x92, 0x9b, 0xa4, 0xcd, 0x91, 0xf8, 0x1c, 0xd9, 0x88, 0xc4,
	0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0x4b, 0x96, 0x9d, 0x26, 0x03, 0x00, 0x00,
}
