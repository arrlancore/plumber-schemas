// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kafka.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Kafka struct {
	// Required
	Topics []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	// Optional; specify what offset the consumer should read from (only works if '--use-consumer-group' is false)
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Optional: (default: true)
	UseConsumerGroup bool `protobuf:"varint,3,opt,name=use_consumer_group,json=useConsumerGroup,proto3" json:"use_consumer_group,omitempty"`
	// Optional; used only if "use_consumer_group" is true
	ConsumerGroupName string `protobuf:"bytes,4,opt,name=consumer_group_name,json=consumerGroupName,proto3" json:"consumer_group_name,omitempty"`
	// Optional; how long to wait for new data when reading batches of messages (default: 1s)
	MaxWaitSeconds int32 `protobuf:"varint,5,opt,name=max_wait_seconds,json=maxWaitSeconds,proto3" json:"max_wait_seconds,omitempty"`
	// Optional; minimum number of bytes to fetch in a single kafka request (throughput optimization)
	MinBytes int32 `protobuf:"varint,6,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	// Optional; maximum number of bytes to fetch in a single kafka request (throughput optimization)
	MaxBytes int32 `protobuf:"varint,7,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	// Optional; how often to commit offsets to broker (default: 0 == synchronous)
	// NOTE: Used only-if "use_consumer_group" is true
	CommitIntervalSeconds int32 `protobuf:"varint,8,opt,name=commit_interval_seconds,json=commitIntervalSeconds,proto3" json:"commit_interval_seconds,omitempty"`
	// Optional; how long a coordinator will wait for member joins as part of a rebalance (default: 5s)
	RebalanceTimeoutSeconds int32    `protobuf:"varint,9,opt,name=rebalance_timeout_seconds,json=rebalanceTimeoutSeconds,proto3" json:"rebalance_timeout_seconds,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Kafka) Reset()         { *m = Kafka{} }
func (m *Kafka) String() string { return proto.CompactTextString(m) }
func (*Kafka) ProtoMessage()    {}
func (*Kafka) Descriptor() ([]byte, []int) {
	return fileDescriptor_68928ed13de9fb92, []int{0}
}

func (m *Kafka) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kafka.Unmarshal(m, b)
}
func (m *Kafka) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kafka.Marshal(b, m, deterministic)
}
func (m *Kafka) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kafka.Merge(m, src)
}
func (m *Kafka) XXX_Size() int {
	return xxx_messageInfo_Kafka.Size(m)
}
func (m *Kafka) XXX_DiscardUnknown() {
	xxx_messageInfo_Kafka.DiscardUnknown(m)
}

var xxx_messageInfo_Kafka proto.InternalMessageInfo

func (m *Kafka) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Kafka) GetReadOffset() int64 {
	if m != nil {
		return m.ReadOffset
	}
	return 0
}

func (m *Kafka) GetUseConsumerGroup() bool {
	if m != nil {
		return m.UseConsumerGroup
	}
	return false
}

func (m *Kafka) GetConsumerGroupName() string {
	if m != nil {
		return m.ConsumerGroupName
	}
	return ""
}

func (m *Kafka) GetMaxWaitSeconds() int32 {
	if m != nil {
		return m.MaxWaitSeconds
	}
	return 0
}

func (m *Kafka) GetMinBytes() int32 {
	if m != nil {
		return m.MinBytes
	}
	return 0
}

func (m *Kafka) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *Kafka) GetCommitIntervalSeconds() int32 {
	if m != nil {
		return m.CommitIntervalSeconds
	}
	return 0
}

func (m *Kafka) GetRebalanceTimeoutSeconds() int32 {
	if m != nil {
		return m.RebalanceTimeoutSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*Kafka)(nil), "protos.args.Kafka")
}

func init() { proto.RegisterFile("kafka.proto", fileDescriptor_68928ed13de9fb92) }

var fileDescriptor_68928ed13de9fb92 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcd, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0x49, 0xfb, 0xb6, 0x6f, 0xb3, 0x05, 0xa9, 0x2b, 0xda, 0x88, 0x07, 0x83, 0xa7, 0x1c,
	0x34, 0x39, 0x08, 0x82, 0x7a, 0xab, 0x07, 0x11, 0x41, 0x21, 0x0a, 0x82, 0x97, 0x65, 0xb2, 0x9d,
	0xa6, 0x4b, 0xb3, 0xd9, 0xb0, 0x1f, 0x1a, 0xff, 0x71, 0xcf, 0x92, 0x0f, 0xab, 0x9e, 0x96, 0xe7,
	0xf9, 0xfd, 0x86, 0x59, 0x18, 0x32, 0xdd, 0xc0, 0x6a, 0x03, 0x71, 0xa5, 0x95, 0x55, 0x74, 0xda,
	0x3e, 0x26, 0x06, 0x9d, 0x9b, 0x93, 0xcf, 0x01, 0x19, 0xdd, 0x37, 0x90, 0x1e, 0x90, 0xb1, 0x55,
	0x95, 0xe0, 0x26, 0xf0, 0xc2, 0x61, 0xe4, 0xa7, 0x7d, 0xa2, 0xc7, 0x64, 0xaa, 0x11, 0x96, 0x4c,
	0xad, 0x56, 0x06, 0x6d, 0x30, 0x08, 0xbd, 0x68, 0x98, 0x92, 0xa6, 0x7a, 0x6c, 0x1b, 0x7a, 0x4a,
	0xa8, 0x33, 0xc8, 0xb8, 0x2a, 0x8d, 0x93, 0xa8, 0x59, 0xae, 0x95, 0xab, 0x82, 0x61, 0xe8, 0x45,
	0x93, 0x74, 0xe6, 0x0c, 0xde, 0xf4, 0xe0, 0xb6, 0xe9, 0x69, 0x4c, 0xf6, 0xfe, 0x9a, 0xac, 0x04,
	0x89, 0xc1, 0xbf, 0xd0, 0x8b, 0xfc, 0x74, 0x97, 0xff, 0x76, 0x1f, 0x40, 0x22, 0x8d, 0xc8, 0x4c,
	0x42, 0xcd, 0xde, 0x41, 0x58, 0x66, 0x90, 0xab, 0x72, 0x69, 0x82, 0x51, 0xe8, 0x45, 0xa3, 0x74,
	0x47, 0x42, 0xfd, 0x02, 0xc2, 0x3e, 0x75, 0x2d, 0x3d, 0x22, 0xbe, 0x14, 0x25, 0xcb, 0x3e, 0x2c,
	0x9a, 0x60, 0xdc, 0x2a, 0x13, 0x29, 0xca, 0x45, 0x93, 0x5b, 0x08, 0x75, 0x0f, 0xff, 0xf7, 0x10,
	0xea, 0x0e, 0x5e, 0x90, 0x39, 0x57, 0x52, 0x0a, 0xcb, 0x44, 0x69, 0x51, 0xbf, 0x41, 0xb1, 0x5d,
	0x35, 0x69, 0xd5, 0xfd, 0x0e, 0xdf, 0xf5, 0xf4, 0x7b, 0xe3, 0x15, 0x39, 0xd4, 0x98, 0x41, 0x01,
	0x25, 0x47, 0x66, 0x85, 0x44, 0xe5, 0x7e, 0x3e, 0xe9, 0xb7, 0x93, 0xf3, 0xad, 0xf0, 0xdc, 0xf1,
	0x7e, 0x76, 0x71, 0xfd, 0x7a, 0x99, 0x0b, 0xbb, 0x76, 0x59, 0xcc, 0x95, 0x4c, 0x32, 0xb0, 0x7c,
	0xcd, 0x95, 0xae, 0x92, 0xaa, 0x70, 0x32, 0x43, 0x7d, 0x66, 0xf8, 0x1a, 0x25, 0x98, 0x24, 0x73,
	0xa2, 0x58, 0x26, 0xb9, 0x4a, 0xba, 0xab, 0x25, 0xcd, 0xd5, 0xb2, 0x71, 0x1b, 0xce, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0xe5, 0xa9, 0xa1, 0xd8, 0x01, 0x00, 0x00,
}
