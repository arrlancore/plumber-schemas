// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ps_args_redis_pubsub.proto

package args

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RedisPubSubConn struct {
	// @gotags: kong:"help='Address of redis server',env='PLUMBER_RELAY_REDIS_PUBSUB_ADDRESS',default=localhost:6379"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='Address of redis server',env='PLUMBER_RELAY_REDIS_PUBSUB_ADDRESS',default=localhost:6379"`
	// @gotags: kong:"help='Optional username to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_USERNAME'"
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" kong:"help='Optional username to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_USERNAME'"`
	// @gotags: kong:"help='Optional password to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_PASSWORD'"
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" kong:"help='Optional password to auth with (redis >= v6.0.0)',env='PLUMBER_RELAY_REDIS_PUBSUB_PASSWORD'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisPubSubConn) Reset()         { *m = RedisPubSubConn{} }
func (m *RedisPubSubConn) String() string { return proto.CompactTextString(m) }
func (*RedisPubSubConn) ProtoMessage()    {}
func (*RedisPubSubConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_02834b0677b77745, []int{0}
}

func (m *RedisPubSubConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisPubSubConn.Unmarshal(m, b)
}
func (m *RedisPubSubConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisPubSubConn.Marshal(b, m, deterministic)
}
func (m *RedisPubSubConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisPubSubConn.Merge(m, src)
}
func (m *RedisPubSubConn) XXX_Size() int {
	return xxx_messageInfo_RedisPubSubConn.Size(m)
}
func (m *RedisPubSubConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisPubSubConn.DiscardUnknown(m)
}

var xxx_messageInfo_RedisPubSubConn proto.InternalMessageInfo

func (m *RedisPubSubConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RedisPubSubConn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RedisPubSubConn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RedisPubSubReadArgs struct {
	// @gotags: kong:"help='Database (0-16)',env='PLUMBER_RELAY_REDIS_PUBSUB_DATABASE'"
	Database uint32 `protobuf:"varint,1,opt,name=database,proto3" json:"database,omitempty" kong:"help='Database (0-16)',env='PLUMBER_RELAY_REDIS_PUBSUB_DATABASE'"`
	// @gotags: kong:"help='Comma separated list of channels to read from',env='PLUMBER_RELAY_REDIS_PUBSUB_CHANNELS',required"
	Channel              []string `protobuf:"bytes,2,rep,name=channel,proto3" json:"channel,omitempty" kong:"help='Comma separated list of channels to read from',env='PLUMBER_RELAY_REDIS_PUBSUB_CHANNELS',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisPubSubReadArgs) Reset()         { *m = RedisPubSubReadArgs{} }
func (m *RedisPubSubReadArgs) String() string { return proto.CompactTextString(m) }
func (*RedisPubSubReadArgs) ProtoMessage()    {}
func (*RedisPubSubReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_02834b0677b77745, []int{1}
}

func (m *RedisPubSubReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisPubSubReadArgs.Unmarshal(m, b)
}
func (m *RedisPubSubReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisPubSubReadArgs.Marshal(b, m, deterministic)
}
func (m *RedisPubSubReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisPubSubReadArgs.Merge(m, src)
}
func (m *RedisPubSubReadArgs) XXX_Size() int {
	return xxx_messageInfo_RedisPubSubReadArgs.Size(m)
}
func (m *RedisPubSubReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisPubSubReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisPubSubReadArgs proto.InternalMessageInfo

func (m *RedisPubSubReadArgs) GetDatabase() uint32 {
	if m != nil {
		return m.Database
	}
	return 0
}

func (m *RedisPubSubReadArgs) GetChannel() []string {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RedisPubSubWriteArgs struct {
	// @gotags: kong:"help='Database (0-16)'"
	Database uint32 `protobuf:"varint,1,opt,name=database,proto3" json:"database,omitempty" kong:"help='Database (0-16)'"`
	// @gotags: kong:"help='Comma separated list of channels to write to',required"
	Channel              []string `protobuf:"bytes,2,rep,name=channel,proto3" json:"channel,omitempty" kong:"help='Comma separated list of channels to write to',required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisPubSubWriteArgs) Reset()         { *m = RedisPubSubWriteArgs{} }
func (m *RedisPubSubWriteArgs) String() string { return proto.CompactTextString(m) }
func (*RedisPubSubWriteArgs) ProtoMessage()    {}
func (*RedisPubSubWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_02834b0677b77745, []int{2}
}

func (m *RedisPubSubWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisPubSubWriteArgs.Unmarshal(m, b)
}
func (m *RedisPubSubWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisPubSubWriteArgs.Marshal(b, m, deterministic)
}
func (m *RedisPubSubWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisPubSubWriteArgs.Merge(m, src)
}
func (m *RedisPubSubWriteArgs) XXX_Size() int {
	return xxx_messageInfo_RedisPubSubWriteArgs.Size(m)
}
func (m *RedisPubSubWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisPubSubWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisPubSubWriteArgs proto.InternalMessageInfo

func (m *RedisPubSubWriteArgs) GetDatabase() uint32 {
	if m != nil {
		return m.Database
	}
	return 0
}

func (m *RedisPubSubWriteArgs) GetChannel() []string {
	if m != nil {
		return m.Channel
	}
	return nil
}

func init() {
	proto.RegisterType((*RedisPubSubConn)(nil), "protos.args.RedisPubSubConn")
	proto.RegisterType((*RedisPubSubReadArgs)(nil), "protos.args.RedisPubSubReadArgs")
	proto.RegisterType((*RedisPubSubWriteArgs)(nil), "protos.args.RedisPubSubWriteArgs")
}

func init() { proto.RegisterFile("ps_args_redis_pubsub.proto", fileDescriptor_02834b0677b77745) }

var fileDescriptor_02834b0677b77745 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xb1, 0x4b, 0x34, 0x31,
	0x10, 0xc5, 0xb9, 0x3b, 0xf8, 0x3e, 0x8d, 0x88, 0xb0, 0x5a, 0x2c, 0x57, 0x1d, 0x5b, 0xd9, 0xb8,
	0x29, 0xac, 0xc4, 0x4a, 0x2d, 0xb5, 0x90, 0xb5, 0x10, 0x6c, 0x96, 0x99, 0x64, 0xd8, 0x5d, 0xd8,
	0x4d, 0xc2, 0x4c, 0x82, 0xff, 0xbe, 0x24, 0xe7, 0x1d, 0x57, 0x5b, 0x85, 0x1f, 0xbf, 0xf0, 0xe6,
	0xf1, 0xd4, 0x36, 0x48, 0x0f, 0x3c, 0x48, 0xcf, 0x64, 0x27, 0xe9, 0x43, 0x42, 0x49, 0xd8, 0x06,
	0xf6, 0xd1, 0x57, 0x17, 0xe5, 0x91, 0x36, 0xfb, 0xc6, 0xa8, 0xab, 0x2e, 0x7f, 0x79, 0x4f, 0xf8,
	0x91, 0xf0, 0xc5, 0x3b, 0x57, 0xd5, 0xea, 0x3f, 0x58, 0xcb, 0x24, 0x52, 0xaf, 0x76, 0xab, 0xdb,
	0xf3, 0xee, 0x80, 0xd5, 0x56, 0x9d, 0x25, 0x21, 0x76, 0xb0, 0x50, 0xbd, 0x2e, 0xea, 0xc8, 0xd9,
	0x05, 0x10, 0xf9, 0xf6, 0x6c, 0xeb, 0xcd, 0xde, 0x1d, 0xb8, 0x79, 0x55, 0xd7, 0x27, 0x47, 0x3a,
	0x02, 0xfb, 0xc4, 0x43, 0x89, 0xb3, 0x10, 0x01, 0x41, 0xa8, 0x5c, 0xba, 0xec, 0x8e, 0x9c, 0x4b,
	0x98, 0x11, 0x9c, 0xa3, 0xb9, 0x5e, 0xef, 0x36, 0xb9, 0xc4, 0x2f, 0x36, 0x6f, 0xea, 0xe6, 0x24,
	0xec, 0x93, 0xa7, 0x48, 0x7f, 0x4f, 0x7b, 0x7e, 0xfc, 0x7a, 0x18, 0xa6, 0x38, 0x26, 0x6c, 0x8d,
	0x5f, 0x34, 0x42, 0x34, 0xa3, 0xf1, 0x1c, 0x74, 0x98, 0xd3, 0x82, 0xc4, 0x77, 0x62, 0x46, 0x5a,
	0x40, 0x34, 0xa6, 0x69, 0xb6, 0x7a, 0xf0, 0x7a, 0x3f, 0x9e, 0xce, 0xe3, 0xe1, 0xbf, 0x02, 0xf7,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xd2, 0x8c, 0xcf, 0x6e, 0x01, 0x00, 0x00,
}
