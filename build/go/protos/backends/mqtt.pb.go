// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mqtt.proto

package backends

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TODO: This needs to be used by CLI
type MQTTQoSLevel int32

const (
	MQTTQoSLevel_AT_MOST_ONCE  MQTTQoSLevel = 0
	MQTTQoSLevel_AT_LEAST_ONCE MQTTQoSLevel = 1
	MQTTQoSLevel_EXACTLY_ONCE  MQTTQoSLevel = 2
)

var MQTTQoSLevel_name = map[int32]string{
	0: "AT_MOST_ONCE",
	1: "AT_LEAST_ONCE",
	2: "EXACTLY_ONCE",
}

var MQTTQoSLevel_value = map[string]int32{
	"AT_MOST_ONCE":  0,
	"AT_LEAST_ONCE": 1,
	"EXACTLY_ONCE":  2,
}

func (x MQTTQoSLevel) String() string {
	return proto.EnumName(MQTTQoSLevel_name, int32(x))
}

func (MQTTQoSLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{0}
}

type MQTTTLSOptions struct {
	// @gotags: kong:"help='CA file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CA_FILE,type=existingfile"
	CaFile string `protobuf:"bytes,1,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty" kong:"help='CA file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CA_FILE,type=existingfile"`
	// @gotags: kong:"help='Client cert file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CERT_FILE,type=existingfile"
	CertFile string `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty" kong:"help='Client cert file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CERT_FILE,type=existingfile"`
	// @gotags: kong:"help='Client key file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_KEY_FILE,type=existingfile"
	KeyFile string `protobuf:"bytes,3,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty" kong:"help='Client key file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_KEY_FILE,type=existingfile"`
	// @gotags: kong:"help='Whether to verify server certificate',env=PLUMBER_RELAY_MQTT_SKIP_VERIFY_TLS"
	SkipVerify           bool     `protobuf:"varint,4,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty" kong:"help='Whether to verify server certificate',env=PLUMBER_RELAY_MQTT_SKIP_VERIFY_TLS"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MQTTTLSOptions) Reset()         { *m = MQTTTLSOptions{} }
func (m *MQTTTLSOptions) String() string { return proto.CompactTextString(m) }
func (*MQTTTLSOptions) ProtoMessage()    {}
func (*MQTTTLSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{0}
}

func (m *MQTTTLSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MQTTTLSOptions.Unmarshal(m, b)
}
func (m *MQTTTLSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MQTTTLSOptions.Marshal(b, m, deterministic)
}
func (m *MQTTTLSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MQTTTLSOptions.Merge(m, src)
}
func (m *MQTTTLSOptions) XXX_Size() int {
	return xxx_messageInfo_MQTTTLSOptions.Size(m)
}
func (m *MQTTTLSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MQTTTLSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MQTTTLSOptions proto.InternalMessageInfo

func (m *MQTTTLSOptions) GetCaFile() string {
	if m != nil {
		return m.CaFile
	}
	return ""
}

func (m *MQTTTLSOptions) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *MQTTTLSOptions) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *MQTTTLSOptions) GetSkipVerify() bool {
	if m != nil {
		return m.SkipVerify
	}
	return false
}

type MQTTConn struct {
	// @gotags: kong:"help='MQTT address',default='tcp://localhost:1883',env='PLUMBER_RELAY_MQTT_ADDRESS',required"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='MQTT address',default='tcp://localhost:1883',env='PLUMBER_RELAY_MQTT_ADDRESS',required"`
	// @gotags: kong:"help='How long to attempt to connect for',env='PLUMBER_RELAY_MQTT_CONNECT_TIMEOUT',default=5"
	ConnTimeoutSeconds uint32 `protobuf:"varint,3,opt,name=conn_timeout_seconds,json=connTimeoutSeconds,proto3" json:"conn_timeout_seconds,omitempty" kong:"help='How long to attempt to connect for',env='PLUMBER_RELAY_MQTT_CONNECT_TIMEOUT',default=5"`
	// @gotags: kong:"help='Client id presented to MQTT broker',env='PLUMBER_RELAY_MQTT_CLIENT_ID',default=plumber"
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" kong:"help='Client id presented to MQTT broker',env='PLUMBER_RELAY_MQTT_CLIENT_ID',default=plumber"`
	// @gotags: kong:"help='QoS level to use for pub/sub (0: at most once, 1: at least once, 2: exactly once)',enum='0,1,2',env=PLUMBER_RELAY_MQTT_QOS,default=0"
	QosLevel uint32 `protobuf:"varint,5,opt,name=qos_level,json=qosLevel,proto3" json:"qos_level,omitempty" kong:"help='QoS level to use for pub/sub (0: at most once, 1: at least once, 2: exactly once)',enum='0,1,2',env=PLUMBER_RELAY_MQTT_QOS,default=0"`
	// @gotags: kong:"embed"
	TlsOptions           *MQTTTLSOptions `protobuf:"bytes,6,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MQTTConn) Reset()         { *m = MQTTConn{} }
func (m *MQTTConn) String() string { return proto.CompactTextString(m) }
func (*MQTTConn) ProtoMessage()    {}
func (*MQTTConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{1}
}

func (m *MQTTConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MQTTConn.Unmarshal(m, b)
}
func (m *MQTTConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MQTTConn.Marshal(b, m, deterministic)
}
func (m *MQTTConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MQTTConn.Merge(m, src)
}
func (m *MQTTConn) XXX_Size() int {
	return xxx_messageInfo_MQTTConn.Size(m)
}
func (m *MQTTConn) XXX_DiscardUnknown() {
	xxx_messageInfo_MQTTConn.DiscardUnknown(m)
}

var xxx_messageInfo_MQTTConn proto.InternalMessageInfo

func (m *MQTTConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MQTTConn) GetConnTimeoutSeconds() uint32 {
	if m != nil {
		return m.ConnTimeoutSeconds
	}
	return 0
}

func (m *MQTTConn) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *MQTTConn) GetQosLevel() uint32 {
	if m != nil {
		return m.QosLevel
	}
	return 0
}

func (m *MQTTConn) GetTlsOptions() *MQTTTLSOptions {
	if m != nil {
		return m.TlsOptions
	}
	return nil
}

type MQTTReadArgs struct {
	// @gotags: kong:"help='Topic to read message(s) from',env='PLUMBER_RELAY_MQTT_TOPIC',required"
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty" kong:"help='Topic to read message(s) from',env='PLUMBER_RELAY_MQTT_TOPIC',required"`
	// @gotags: kong:"help='How long to attempt to read message(s)',default=0,env='PLUMBER_RELAY_MQTT_READ_TIMEOUT_SECONDS'"
	ReadTimeoutSeconds   uint32   `protobuf:"varint,2,opt,name=read_timeout_seconds,json=readTimeoutSeconds,proto3" json:"read_timeout_seconds,omitempty" kong:"help='How long to attempt to read message(s)',default=0,env='PLUMBER_RELAY_MQTT_READ_TIMEOUT_SECONDS'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MQTTReadArgs) Reset()         { *m = MQTTReadArgs{} }
func (m *MQTTReadArgs) String() string { return proto.CompactTextString(m) }
func (*MQTTReadArgs) ProtoMessage()    {}
func (*MQTTReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{2}
}

func (m *MQTTReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MQTTReadArgs.Unmarshal(m, b)
}
func (m *MQTTReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MQTTReadArgs.Marshal(b, m, deterministic)
}
func (m *MQTTReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MQTTReadArgs.Merge(m, src)
}
func (m *MQTTReadArgs) XXX_Size() int {
	return xxx_messageInfo_MQTTReadArgs.Size(m)
}
func (m *MQTTReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_MQTTReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_MQTTReadArgs proto.InternalMessageInfo

func (m *MQTTReadArgs) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MQTTReadArgs) GetReadTimeoutSeconds() uint32 {
	if m != nil {
		return m.ReadTimeoutSeconds
	}
	return 0
}

type MQTTWriteArgs struct {
	// @gotags: kong:"help='Topic to write message(s) to',required"
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty" kong:"help='Topic to write message(s) to',required"`
	// @gotags: kong:"help='How long to attempt to publish message(s)',default=5"
	WriteTimeoutSeconds  uint32   `protobuf:"varint,2,opt,name=write_timeout_seconds,json=writeTimeoutSeconds,proto3" json:"write_timeout_seconds,omitempty" kong:"help='How long to attempt to publish message(s)',default=5"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MQTTWriteArgs) Reset()         { *m = MQTTWriteArgs{} }
func (m *MQTTWriteArgs) String() string { return proto.CompactTextString(m) }
func (*MQTTWriteArgs) ProtoMessage()    {}
func (*MQTTWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{3}
}

func (m *MQTTWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MQTTWriteArgs.Unmarshal(m, b)
}
func (m *MQTTWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MQTTWriteArgs.Marshal(b, m, deterministic)
}
func (m *MQTTWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MQTTWriteArgs.Merge(m, src)
}
func (m *MQTTWriteArgs) XXX_Size() int {
	return xxx_messageInfo_MQTTWriteArgs.Size(m)
}
func (m *MQTTWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_MQTTWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_MQTTWriteArgs proto.InternalMessageInfo

func (m *MQTTWriteArgs) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MQTTWriteArgs) GetWriteTimeoutSeconds() uint32 {
	if m != nil {
		return m.WriteTimeoutSeconds
	}
	return 0
}

func init() {
	proto.RegisterEnum("protos.backends.MQTTQoSLevel", MQTTQoSLevel_name, MQTTQoSLevel_value)
	proto.RegisterType((*MQTTTLSOptions)(nil), "protos.backends.MQTTTLSOptions")
	proto.RegisterType((*MQTTConn)(nil), "protos.backends.MQTTConn")
	proto.RegisterType((*MQTTReadArgs)(nil), "protos.backends.MQTTReadArgs")
	proto.RegisterType((*MQTTWriteArgs)(nil), "protos.backends.MQTTWriteArgs")
}

func init() { proto.RegisterFile("mqtt.proto", fileDescriptor_35327d90702720f6) }

var fileDescriptor_35327d90702720f6 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x49, 0x61, 0x6d, 0xf7, 0xba, 0xc2, 0x08, 0x43, 0x04, 0x71, 0x58, 0xd5, 0x53, 0x85,
	0x44, 0x82, 0xc6, 0x19, 0x41, 0xa8, 0x8a, 0x84, 0xd4, 0x51, 0x2d, 0x8d, 0x06, 0xe3, 0x62, 0x25,
	0xf6, 0x5b, 0x6b, 0xd5, 0x89, 0x53, 0xdb, 0x1d, 0xea, 0x95, 0x3f, 0x91, 0xbf, 0x08, 0xd9, 0x6e,
	0x0f, 0x05, 0xb1, 0x53, 0xf2, 0xbe, 0x9f, 0xf5, 0xbd, 0xf7, 0x7d, 0x00, 0xd5, 0xda, 0x98, 0xb8,
	0x51, 0xd2, 0xc8, 0xf0, 0x89, 0xfb, 0xe8, 0xb8, 0x2c, 0xe8, 0x0a, 0x6b, 0xa6, 0x87, 0xbf, 0x02,
	0x78, 0x7c, 0x79, 0x95, 0xe7, 0xf9, 0x74, 0x3e, 0x6b, 0x0c, 0x97, 0xb5, 0x0e, 0x5f, 0x40, 0x87,
	0x16, 0xe4, 0x96, 0x0b, 0x8c, 0x82, 0x41, 0x30, 0x3a, 0xce, 0xda, 0xb4, 0xf8, 0xcc, 0x05, 0x86,
	0xaf, 0xe0, 0x98, 0xa2, 0x32, 0x1e, 0xb5, 0x1c, 0xea, 0x5a, 0xc1, 0xc1, 0x97, 0xd0, 0x5d, 0xe1,
	0xd6, 0xb3, 0x87, 0x8e, 0x75, 0x56, 0xb8, 0x75, 0xe8, 0x1c, 0x7a, 0x7a, 0xc5, 0x1b, 0x72, 0x87,
	0x8a, 0xdf, 0x6e, 0xa3, 0x47, 0x83, 0x60, 0xd4, 0xcd, 0xc0, 0x4a, 0xd7, 0x4e, 0x19, 0xfe, 0x0e,
	0xa0, 0x6b, 0x8f, 0x18, 0xcb, 0xba, 0x0e, 0x23, 0xe8, 0x14, 0x8c, 0x29, 0xd4, 0x7a, 0xb7, 0x7e,
	0x3f, 0x86, 0x6f, 0xe1, 0x8c, 0xca, 0xba, 0x26, 0x86, 0x57, 0x28, 0x37, 0x86, 0x68, 0xa4, 0xb2,
	0x66, 0xda, 0xad, 0xeb, 0x67, 0xa1, 0x65, 0xb9, 0x47, 0x73, 0x4f, 0xdc, 0xc5, 0x82, 0x63, 0x6d,
	0x08, 0x67, 0x6e, 0xaf, 0xbd, 0xd8, 0x09, 0x5f, 0x98, 0x85, 0x6b, 0xa9, 0x89, 0xc0, 0x3b, 0x14,
	0xd1, 0x91, 0xf3, 0xe8, 0xae, 0xa5, 0x9e, 0xda, 0x39, 0xfc, 0x08, 0x3d, 0x23, 0x34, 0x91, 0xbe,
	0x93, 0xa8, 0x3d, 0x08, 0x46, 0xbd, 0x8b, 0xf3, 0xf8, 0xaf, 0xfa, 0xe2, 0xc3, 0xea, 0x32, 0x30,
	0x42, 0xef, 0xfe, 0x87, 0xd7, 0x70, 0x62, 0x69, 0x86, 0x05, 0x4b, 0xd5, 0x42, 0x87, 0x67, 0x70,
	0x64, 0x64, 0xc3, 0xe9, 0x2e, 0x95, 0x1f, 0x6c, 0x26, 0x85, 0x05, 0xfb, 0x27, 0x53, 0xcb, 0x67,
	0xb2, 0xec, 0x30, 0xd3, 0xf0, 0x06, 0xfa, 0xd6, 0xf7, 0x9b, 0xe2, 0x06, 0xef, 0x31, 0xbe, 0x80,
	0xe7, 0x3f, 0xed, 0x93, 0xff, 0x38, 0x3f, 0x73, 0xf0, 0xd0, 0xfa, 0xf5, 0xc4, 0x9f, 0x7c, 0x25,
	0xe7, 0xbe, 0x84, 0x53, 0x38, 0x49, 0x73, 0x72, 0x39, 0x9b, 0xe7, 0x64, 0xf6, 0x75, 0x3c, 0x39,
	0x7d, 0x10, 0x3e, 0x85, 0x7e, 0x9a, 0x93, 0xe9, 0x24, 0xdd, 0x4b, 0x81, 0x7d, 0x34, 0xf9, 0x9e,
	0x8e, 0xf3, 0xe9, 0x8d, 0x57, 0x5a, 0x9f, 0x3e, 0xfc, 0x78, 0xbf, 0xe0, 0x66, 0xb9, 0x29, 0x63,
	0x2a, 0xab, 0xa4, 0x2c, 0x0c, 0x5d, 0x52, 0xa9, 0x9a, 0xa4, 0x11, 0x9b, 0xaa, 0x44, 0xf5, 0x46,
	0xd3, 0x25, 0x56, 0x85, 0x4e, 0xca, 0x0d, 0x17, 0x2c, 0x59, 0xc8, 0xc4, 0xb7, 0x9a, 0xec, 0x5b,
	0x2d, 0xdb, 0x4e, 0x78, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xc9, 0x21, 0x6c, 0xba, 0x02,
	0x00, 0x00,
}
