// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redis-streams.proto

package backends

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateConsumerConfig_OffsetStart int32

const (
	CreateConsumerConfig_Latest CreateConsumerConfig_OffsetStart = 0
	CreateConsumerConfig_Oldest CreateConsumerConfig_OffsetStart = 1
)

var CreateConsumerConfig_OffsetStart_name = map[int32]string{
	0: "Latest",
	1: "Oldest",
}

var CreateConsumerConfig_OffsetStart_value = map[string]int32{
	"Latest": 0,
	"Oldest": 1,
}

func (x CreateConsumerConfig_OffsetStart) String() string {
	return proto.EnumName(CreateConsumerConfig_OffsetStart_name, int32(x))
}

func (CreateConsumerConfig_OffsetStart) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{1, 0}
}

type RedisStreamsConn struct {
	// Required
	// Address of redis server. Ex: "localhost:6379"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Optional
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Optional
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisStreamsConn) Reset()         { *m = RedisStreamsConn{} }
func (m *RedisStreamsConn) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsConn) ProtoMessage()    {}
func (*RedisStreamsConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{0}
}

func (m *RedisStreamsConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsConn.Unmarshal(m, b)
}
func (m *RedisStreamsConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsConn.Marshal(b, m, deterministic)
}
func (m *RedisStreamsConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsConn.Merge(m, src)
}
func (m *RedisStreamsConn) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsConn.Size(m)
}
func (m *RedisStreamsConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsConn.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsConn proto.InternalMessageInfo

func (m *RedisStreamsConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RedisStreamsConn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RedisStreamsConn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateConsumerConfig struct {
	// Create the streams if we're creating a new consumer group
	CreateStreams bool `protobuf:"varint,3,opt,name=create_streams,json=createStreams,proto3" json:"create_streams,omitempty"`
	// Recreate this consumer group if it doesn't exist
	RecreateConsumerGroup bool `protobuf:"varint,4,opt,name=recreate_consumer_group,json=recreateConsumerGroup,proto3" json:"recreate_consumer_group,omitempty"`
	// Required
	OffsetStart          CreateConsumerConfig_OffsetStart `protobuf:"varint,5,opt,name=offset_start,json=offsetStart,proto3,enum=protos.backends.CreateConsumerConfig_OffsetStart" json:"offset_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CreateConsumerConfig) Reset()         { *m = CreateConsumerConfig{} }
func (m *CreateConsumerConfig) String() string { return proto.CompactTextString(m) }
func (*CreateConsumerConfig) ProtoMessage()    {}
func (*CreateConsumerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{1}
}

func (m *CreateConsumerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateConsumerConfig.Unmarshal(m, b)
}
func (m *CreateConsumerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateConsumerConfig.Marshal(b, m, deterministic)
}
func (m *CreateConsumerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsumerConfig.Merge(m, src)
}
func (m *CreateConsumerConfig) XXX_Size() int {
	return xxx_messageInfo_CreateConsumerConfig.Size(m)
}
func (m *CreateConsumerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsumerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsumerConfig proto.InternalMessageInfo

func (m *CreateConsumerConfig) GetCreateStreams() bool {
	if m != nil {
		return m.CreateStreams
	}
	return false
}

func (m *CreateConsumerConfig) GetRecreateConsumerGroup() bool {
	if m != nil {
		return m.RecreateConsumerGroup
	}
	return false
}

func (m *CreateConsumerConfig) GetOffsetStart() CreateConsumerConfig_OffsetStart {
	if m != nil {
		return m.OffsetStart
	}
	return CreateConsumerConfig_Latest
}

type RedisStreamsReadArgs struct {
	// Required
	// Database (0-16)
	Database uint32 `protobuf:"varint,1,opt,name=database,proto3" json:"database,omitempty"`
	// Required
	// Stream(s) to read from/write to
	Stream []string `protobuf:"bytes,2,rep,name=stream,proto3" json:"stream,omitempty"`
	// Optional for Writes
	// Ignored for reads
	// Default is "*", which means redis will auto generate it
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Required for writes
	// Ignored for reads
	Key           string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	ConsumerGroup string `protobuf:"bytes,5,opt,name=consumer_group,json=consumerGroup,proto3" json:"consumer_group,omitempty"`
	ConsumerName  string `protobuf:"bytes,6,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// Optional for reads
	// Ignored for writes
	// Specify if you the user needs to create/recreate a consumer group
	// @gotags: kong:"embed"
	CreateConsumerConfig *CreateConsumerConfig `protobuf:"bytes,7,opt,name=create_consumer_config,json=createConsumerConfig,proto3" json:"create_consumer_config,omitempty" kong:"embed"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RedisStreamsReadArgs) Reset()         { *m = RedisStreamsReadArgs{} }
func (m *RedisStreamsReadArgs) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsReadArgs) ProtoMessage()    {}
func (*RedisStreamsReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{2}
}

func (m *RedisStreamsReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsReadArgs.Unmarshal(m, b)
}
func (m *RedisStreamsReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsReadArgs.Marshal(b, m, deterministic)
}
func (m *RedisStreamsReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsReadArgs.Merge(m, src)
}
func (m *RedisStreamsReadArgs) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsReadArgs.Size(m)
}
func (m *RedisStreamsReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsReadArgs proto.InternalMessageInfo

func (m *RedisStreamsReadArgs) GetDatabase() uint32 {
	if m != nil {
		return m.Database
	}
	return 0
}

func (m *RedisStreamsReadArgs) GetStream() []string {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *RedisStreamsReadArgs) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RedisStreamsReadArgs) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RedisStreamsReadArgs) GetConsumerGroup() string {
	if m != nil {
		return m.ConsumerGroup
	}
	return ""
}

func (m *RedisStreamsReadArgs) GetConsumerName() string {
	if m != nil {
		return m.ConsumerName
	}
	return ""
}

func (m *RedisStreamsReadArgs) GetCreateConsumerConfig() *CreateConsumerConfig {
	if m != nil {
		return m.CreateConsumerConfig
	}
	return nil
}

type RedisStreamsWriteArgs struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisStreamsWriteArgs) Reset()         { *m = RedisStreamsWriteArgs{} }
func (m *RedisStreamsWriteArgs) String() string { return proto.CompactTextString(m) }
func (*RedisStreamsWriteArgs) ProtoMessage()    {}
func (*RedisStreamsWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f03e487ac12019, []int{3}
}

func (m *RedisStreamsWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisStreamsWriteArgs.Unmarshal(m, b)
}
func (m *RedisStreamsWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisStreamsWriteArgs.Marshal(b, m, deterministic)
}
func (m *RedisStreamsWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisStreamsWriteArgs.Merge(m, src)
}
func (m *RedisStreamsWriteArgs) XXX_Size() int {
	return xxx_messageInfo_RedisStreamsWriteArgs.Size(m)
}
func (m *RedisStreamsWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisStreamsWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RedisStreamsWriteArgs proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protos.backends.CreateConsumerConfig_OffsetStart", CreateConsumerConfig_OffsetStart_name, CreateConsumerConfig_OffsetStart_value)
	proto.RegisterType((*RedisStreamsConn)(nil), "protos.backends.RedisStreamsConn")
	proto.RegisterType((*CreateConsumerConfig)(nil), "protos.backends.CreateConsumerConfig")
	proto.RegisterType((*RedisStreamsReadArgs)(nil), "protos.backends.RedisStreamsReadArgs")
	proto.RegisterType((*RedisStreamsWriteArgs)(nil), "protos.backends.RedisStreamsWriteArgs")
}

func init() { proto.RegisterFile("redis-streams.proto", fileDescriptor_55f03e487ac12019) }

var fileDescriptor_55f03e487ac12019 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x6a, 0xdb, 0x4c,
	0x14, 0x85, 0x7f, 0xc9, 0x7f, 0x9c, 0xf8, 0x3a, 0x76, 0xcd, 0xd4, 0x49, 0x44, 0x57, 0x46, 0xc5,
	0xe0, 0x4d, 0x24, 0x9a, 0x42, 0x77, 0xa5, 0xb4, 0x5e, 0x74, 0x53, 0x1a, 0x98, 0x14, 0x0a, 0xed,
	0xc2, 0x8c, 0x66, 0xae, 0x65, 0x11, 0x4b, 0x23, 0xe6, 0x8e, 0x28, 0x7d, 0x90, 0xbe, 0x68, 0x9f,
	0xa0, 0xcc, 0x48, 0x72, 0x9d, 0x90, 0x45, 0x57, 0x9a, 0x73, 0xce, 0xbd, 0xc3, 0xd1, 0x37, 0xf0,
	0xdc, 0xa0, 0x2a, 0xe8, 0x9a, 0xac, 0x41, 0x51, 0x52, 0x52, 0x1b, 0x6d, 0x35, 0x7b, 0xe6, 0x3f,
	0x94, 0x64, 0x42, 0xde, 0x63, 0xa5, 0x28, 0x56, 0x30, 0xe3, 0x6e, 0xee, 0xae, 0x1d, 0x5b, 0xeb,
	0xaa, 0x62, 0x11, 0x9c, 0x0a, 0xa5, 0x0c, 0x12, 0x45, 0xc1, 0x22, 0x58, 0x8d, 0x78, 0x2f, 0xd9,
	0x0b, 0x38, 0x6b, 0x08, 0x4d, 0x25, 0x4a, 0x8c, 0x42, 0x1f, 0x1d, 0xb4, 0xcb, 0x6a, 0x41, 0xf4,
	0x43, 0x1b, 0x15, 0x0d, 0xda, 0xac, 0xd7, 0xf1, 0xef, 0x00, 0xe6, 0x6b, 0x83, 0xc2, 0xe2, 0x5a,
	0x57, 0xd4, 0x94, 0x68, 0xd6, 0xba, 0xda, 0x16, 0x39, 0x5b, 0xc2, 0x54, 0x7a, 0x7f, 0xd3, 0xf5,
	0xf4, 0xab, 0x67, 0x7c, 0xd2, 0xba, 0x5d, 0x2b, 0xf6, 0x06, 0xae, 0x0c, 0x76, 0x83, 0xb2, 0xbb,
	0x61, 0x93, 0x1b, 0xdd, 0xd4, 0xd1, 0xff, 0x7e, 0xfe, 0xa2, 0x8f, 0xfb, 0xfb, 0x3f, 0xba, 0x90,
	0x7d, 0x81, 0x73, 0xbd, 0xdd, 0x12, 0xda, 0x0d, 0x59, 0x61, 0x6c, 0x74, 0xb2, 0x08, 0x56, 0xd3,
	0x9b, 0x57, 0xc9, 0x23, 0x0a, 0xc9, 0x53, 0xdd, 0x92, 0x5b, 0xbf, 0x79, 0xe7, 0x16, 0xf9, 0x58,
	0xff, 0x15, 0xf1, 0x12, 0xc6, 0x47, 0x19, 0x03, 0x18, 0x7e, 0x12, 0x16, 0xc9, 0xce, 0xfe, 0x73,
	0xe7, 0xdb, 0xbd, 0x72, 0xe7, 0x20, 0xfe, 0x15, 0xc2, 0xfc, 0x98, 0x2d, 0x47, 0xa1, 0xde, 0x9b,
	0xdc, 0x53, 0x54, 0xc2, 0x8a, 0x4c, 0x10, 0x7a, 0xc0, 0x13, 0x7e, 0xd0, 0xec, 0x12, 0x86, 0x2d,
	0x89, 0x28, 0x5c, 0x0c, 0x56, 0x23, 0xde, 0x29, 0x36, 0x85, 0xb0, 0xe8, 0xb9, 0x86, 0x85, 0x62,
	0x33, 0x18, 0xdc, 0xe3, 0x4f, 0xff, 0xf7, 0x23, 0xee, 0x8e, 0x1e, 0xe5, 0x43, 0x34, 0x27, 0x3e,
	0x9c, 0xc8, 0x07, 0x48, 0x5e, 0xc2, 0xc1, 0xd8, 0xf8, 0x77, 0x1c, 0xfa, 0xa9, 0xf3, 0xde, 0xfc,
	0xec, 0xde, 0xf2, 0x3b, 0x5c, 0x3e, 0xa6, 0x2d, 0x3d, 0x94, 0xe8, 0x74, 0x11, 0xac, 0xc6, 0x37,
	0xcb, 0x7f, 0x22, 0xc8, 0xe7, 0xf2, 0x09, 0x37, 0xbe, 0x82, 0x8b, 0x63, 0x2c, 0x5f, 0x4d, 0x61,
	0xd1, 0x71, 0xf9, 0xf0, 0xee, 0xdb, 0xdb, 0xbc, 0xb0, 0xbb, 0x26, 0x4b, 0xa4, 0x2e, 0xd3, 0x4c,
	0x58, 0xb9, 0x93, 0xda, 0xd4, 0x69, 0xbd, 0x6f, 0xca, 0x0c, 0xcd, 0x35, 0xc9, 0x1d, 0x96, 0x82,
	0xd2, 0xac, 0x29, 0xf6, 0x2a, 0xcd, 0x75, 0xda, 0x96, 0x48, 0xfb, 0x12, 0xd9, 0xd0, 0x1b, 0xaf,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xc4, 0x15, 0xfd, 0xfb, 0x02, 0x00, 0x00,
}
