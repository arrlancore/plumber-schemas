// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rabbit.proto

package backends

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RabbitConn struct {
	// Required; full DSN used to connect to rabbit
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Connect over TLS
	UseTls bool `protobuf:"varint,2,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// Specify to not verify server's TLS certificate
	InsecureTls          bool     `protobuf:"varint,3,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitConn) Reset()         { *m = RabbitConn{} }
func (m *RabbitConn) String() string { return proto.CompactTextString(m) }
func (*RabbitConn) ProtoMessage()    {}
func (*RabbitConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3e2cf5cfff1350, []int{0}
}

func (m *RabbitConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitConn.Unmarshal(m, b)
}
func (m *RabbitConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitConn.Marshal(b, m, deterministic)
}
func (m *RabbitConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitConn.Merge(m, src)
}
func (m *RabbitConn) XXX_Size() int {
	return xxx_messageInfo_RabbitConn.Size(m)
}
func (m *RabbitConn) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitConn.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitConn proto.InternalMessageInfo

func (m *RabbitConn) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RabbitConn) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *RabbitConn) GetInsecureTls() bool {
	if m != nil {
		return m.InsecureTls
	}
	return false
}

type RabbitReadArgs struct {
	// Required
	ExchangeName string `protobuf:"bytes,1,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// Required; queue name to read from
	QueueName string `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	// Required; routing key for topic based exchanges
	RoutingKey string `protobuf:"bytes,3,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// Optional; whether the queue is exclusive to this connection
	QueueExclusive bool `protobuf:"varint,4,opt,name=queue_exclusive,json=queueExclusive,proto3" json:"queue_exclusive,omitempty"`
	// Optional; whether to create the queue
	QueueDeclare bool `protobuf:"varint,5,opt,name=queue_declare,json=queueDeclare,proto3" json:"queue_declare,omitempty"`
	// Optional; whether the queue should survive after disconnect
	QueueDurable bool `protobuf:"varint,6,opt,name=queue_durable,json=queueDurable,proto3" json:"queue_durable,omitempty"`
	// Optional
	AutoAck bool `protobuf:"varint,7,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`
	// Optional
	AppId                string   `protobuf:"bytes,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitReadArgs) Reset()         { *m = RabbitReadArgs{} }
func (m *RabbitReadArgs) String() string { return proto.CompactTextString(m) }
func (*RabbitReadArgs) ProtoMessage()    {}
func (*RabbitReadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3e2cf5cfff1350, []int{1}
}

func (m *RabbitReadArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitReadArgs.Unmarshal(m, b)
}
func (m *RabbitReadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitReadArgs.Marshal(b, m, deterministic)
}
func (m *RabbitReadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitReadArgs.Merge(m, src)
}
func (m *RabbitReadArgs) XXX_Size() int {
	return xxx_messageInfo_RabbitReadArgs.Size(m)
}
func (m *RabbitReadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitReadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitReadArgs proto.InternalMessageInfo

func (m *RabbitReadArgs) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *RabbitReadArgs) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *RabbitReadArgs) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

func (m *RabbitReadArgs) GetQueueExclusive() bool {
	if m != nil {
		return m.QueueExclusive
	}
	return false
}

func (m *RabbitReadArgs) GetQueueDeclare() bool {
	if m != nil {
		return m.QueueDeclare
	}
	return false
}

func (m *RabbitReadArgs) GetQueueDurable() bool {
	if m != nil {
		return m.QueueDurable
	}
	return false
}

func (m *RabbitReadArgs) GetAutoAck() bool {
	if m != nil {
		return m.AutoAck
	}
	return false
}

func (m *RabbitReadArgs) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type RabbitWriteArgs struct {
	// Required
	ExchangeName string `protobuf:"bytes,1,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	// Required
	RoutingKey           string   `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitWriteArgs) Reset()         { *m = RabbitWriteArgs{} }
func (m *RabbitWriteArgs) String() string { return proto.CompactTextString(m) }
func (*RabbitWriteArgs) ProtoMessage()    {}
func (*RabbitWriteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3e2cf5cfff1350, []int{2}
}

func (m *RabbitWriteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitWriteArgs.Unmarshal(m, b)
}
func (m *RabbitWriteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitWriteArgs.Marshal(b, m, deterministic)
}
func (m *RabbitWriteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitWriteArgs.Merge(m, src)
}
func (m *RabbitWriteArgs) XXX_Size() int {
	return xxx_messageInfo_RabbitWriteArgs.Size(m)
}
func (m *RabbitWriteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitWriteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitWriteArgs proto.InternalMessageInfo

func (m *RabbitWriteArgs) GetExchangeName() string {
	if m != nil {
		return m.ExchangeName
	}
	return ""
}

func (m *RabbitWriteArgs) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

func init() {
	proto.RegisterType((*RabbitConn)(nil), "protos.backends.RabbitConn")
	proto.RegisterType((*RabbitReadArgs)(nil), "protos.backends.RabbitReadArgs")
	proto.RegisterType((*RabbitWriteArgs)(nil), "protos.backends.RabbitWriteArgs")
}

func init() { proto.RegisterFile("rabbit.proto", fileDescriptor_9a3e2cf5cfff1350) }

var fileDescriptor_9a3e2cf5cfff1350 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4b, 0xab, 0xd3, 0x40,
	0x14, 0xc7, 0x69, 0xf4, 0x26, 0xed, 0xb9, 0xf1, 0x16, 0x06, 0xc4, 0x71, 0x21, 0x5e, 0xeb, 0xc2,
	0xbb, 0xb1, 0x59, 0xb8, 0x16, 0xb9, 0x3e, 0x16, 0x22, 0xb8, 0x08, 0x85, 0x82, 0x9b, 0x30, 0x8f,
	0x43, 0x32, 0x64, 0x92, 0x89, 0xf3, 0x90, 0xf6, 0xab, 0xf8, 0x69, 0xa5, 0x33, 0x0d, 0x94, 0xae,
	0x5c, 0x85, 0xf9, 0xfd, 0x7f, 0xe1, 0x3c, 0x38, 0x50, 0x5a, 0xc6, 0xb9, 0xf2, 0xdb, 0xc9, 0x1a,
	0x6f, 0xc8, 0x3a, 0x7e, 0xdc, 0x96, 0x33, 0xd1, 0xe3, 0x28, 0xdd, 0x86, 0x03, 0xd4, 0x51, 0xf8,
	0x62, 0xc6, 0x91, 0x50, 0x28, 0x98, 0x94, 0x16, 0x9d, 0xa3, 0x8b, 0xfb, 0xc5, 0xc3, 0xaa, 0x9e,
	0x9f, 0xe4, 0x05, 0x14, 0xc1, 0x61, 0xe3, 0xb5, 0xa3, 0xd9, 0xfd, 0xe2, 0x61, 0x59, 0xe7, 0xc1,
	0xe1, 0x4e, 0x3b, 0xf2, 0x06, 0x4a, 0x35, 0x3a, 0x14, 0xc1, 0xa6, 0xf4, 0x49, 0x4c, 0x6f, 0x67,
	0xb6, 0xd3, 0x6e, 0xf3, 0x37, 0x83, 0xbb, 0x54, 0xa4, 0x46, 0x26, 0x1f, 0x6d, 0xeb, 0xc8, 0x5b,
	0x78, 0x86, 0x07, 0xd1, 0xb1, 0xb1, 0xc5, 0x66, 0x64, 0x03, 0x9e, 0xcb, 0x95, 0x33, 0xfc, 0xc9,
	0x06, 0x24, 0xaf, 0x00, 0x7e, 0x07, 0x0c, 0x67, 0x23, 0x8b, 0xc6, 0x2a, 0x92, 0x18, 0xbf, 0x86,
	0x5b, 0x6b, 0x82, 0x57, 0x63, 0xdb, 0xf4, 0x78, 0x8c, 0x85, 0x57, 0x35, 0x9c, 0xd1, 0x0f, 0x3c,
	0x92, 0x77, 0xb0, 0x4e, 0xff, 0xe3, 0x41, 0xe8, 0xe0, 0xd4, 0x1f, 0xa4, 0x4f, 0x63, 0x77, 0x77,
	0x11, 0x7f, 0x9b, 0xe9, 0xa9, 0x9b, 0x24, 0x4a, 0x14, 0x9a, 0x59, 0xa4, 0x37, 0x51, 0x2b, 0x23,
	0xfc, 0x9a, 0xd8, 0x85, 0x14, 0x2c, 0xe3, 0x1a, 0x69, 0x7e, 0x29, 0x25, 0x46, 0x5e, 0xc2, 0x92,
	0x05, 0x6f, 0x1a, 0x26, 0x7a, 0x5a, 0xc4, 0xbc, 0x38, 0xbd, 0x1f, 0x45, 0x4f, 0x9e, 0x43, 0xce,
	0xa6, 0xa9, 0x51, 0x92, 0x2e, 0x63, 0xa7, 0x37, 0x6c, 0x9a, 0xbe, 0xcb, 0xcd, 0x1e, 0xd6, 0x69,
	0x37, 0x7b, 0xab, 0x3c, 0xfe, 0xff, 0x72, 0xae, 0xa6, 0xcf, 0xae, 0xa7, 0xff, 0xfc, 0xe9, 0xd7,
	0xc7, 0x56, 0xf9, 0x2e, 0xf0, 0xad, 0x30, 0x43, 0xc5, 0x99, 0x17, 0x9d, 0x30, 0x76, 0xaa, 0x26,
	0x1d, 0x06, 0x8e, 0xf6, 0xbd, 0x13, 0x1d, 0x0e, 0xcc, 0x55, 0x3c, 0x28, 0x2d, 0xab, 0xd6, 0x54,
	0xe9, 0x34, 0xaa, 0xf9, 0x34, 0x78, 0x1e, 0xc1, 0x87, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x56,
	0xa1, 0x1c, 0x02, 0x42, 0x02, 0x00, 0x00,
}
